### YamlMime:DocDB
type: Assembly
id: sqlassembly.microsoft.sqlserver.types
description: 
name: Microsoft.SqlServer.Types
assemblyName: Microsoft.SqlServer.Types, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
assemblySecurityLevel: Unrestricted
culture: ''
isVisible: true
owner: sys
publicKey: 89845DCD8080CC91
version: 16.0.0.0
fileNames:
- microsoft.sqlserver.types.dll
isDecompiled: true
sourceCode: |+
  using System;
  using System.CodeDom.Compiler;
  using System.Collections;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.Data.SqlTypes;
  using System.Diagnostics;
  using System.Globalization;
  using System.IO;
  using System.Reflection;
  using System.Resources;
  using System.Runtime.CompilerServices;
  using System.Runtime.InteropServices;
  using System.Runtime.Serialization;
  using System.Runtime.Versioning;
  using System.Security;
  using System.Security.Permissions;
  using System.Text;
  using System.Threading;
  using System.Xml;
  using Microsoft.SqlServer.Server;

  [assembly: CompilationRelaxations(8)]
  [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
  [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
  [assembly: AllowPartiallyTrustedCallers]
  [assembly: SecurityRules(SecurityRuleSet.Level1)]
  [assembly: ComVisible(false)]
  [assembly: CLSCompliant(true)]
  [assembly: AssemblyProduct("Microsoft SQL Server")]
  [assembly: AssemblyCopyright("Microsoft. All rights reserved.")]
  [assembly: AssemblyTrademark("Microsoft SQL Server is a registered trademark of Microsoft Corporation.")]
  [assembly: AssemblyCompany("Microsoft Corporation")]
  [assembly: AssemblyFileVersion("16.0.1000.6")]
  [assembly: AssemblyInformationalVersion("16.0.1000.6")]
  [assembly: AssemblyKeyFile("D:\\dbs\\sh\\5uj5\\1008_054209\\cmd\\9\\Tools\\scopas\\custom\\data\\snk\\sql2003snkey.snk")]
  [assembly: AssemblyDelaySign(true)]
  [assembly: AssemblyKeyName("")]
  [assembly: TargetFramework(".NETFramework,Version=v4.6.2", FrameworkDisplayName = "")]
  [assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
  [assembly: AssemblyVersion("16.0.0.0")]
  [module: UnverifiableCode]
  internal static class AssemblyVersionInfo
  {
  	public const string VersionString = "16.0.0.0";

  	public const int MajorVersion = 16;

  	public const int MinorVersion = 0;

  	public const int BuildVersion = 1000;

  	public const int SPLevel = 0;

  	public const string ProductVersionString = "16.0";

  	public const string ProductNameString = "Microsoft SQL Server";

  	public const string SqlEngineUsageMetricsRoleGuidString = "{0xbd7f7c0d,0x7c36,0x4721,{0xaf,0xa8,0xb,0xa7,0x0,0xe2,0x6d,0x9e}}";

  	public const string ProductNameBrandingString = "SQL Server 2022";

  	public const string LongProductNameBrandingString = "Microsoft SQL Server 2022";

  	public const string ProductNameShortcutBrandingString = "SQL Server 2022";

  	public const string ProductCodeNameString = "2022";

  	public const string VersionLocationString = "160";

  	public const string FileVersionSuffix = "160";

  	public const string ProductVersionLocationString = "160";

  	public const string VersionHelpKeywordPrefix = "sql13";

  	public const string VersionHelpSettingsToken = "SQLServerBooksOnline.16.0";

  	public const string SetupSupportFolder = "SQL2022";

  	public const string ProductLicenseFile = "SQLServer2022";

  	public const string SqlProductFamilyCode = "{6F3B47C9-1659-4511-A3F5-002E24969DFD}";

  	public const string ProductUpdateCategory = "3FE7E625-9647-48F4-B0C8-AC9D23DB1625";

  	public const string ProductDiscoveryId = "SQLv16";

  	public const string SqlInstanceIDPrefix = "MSSQL16";

  	public const string AsInstanceIDPrefix = "MSAS16";

  	public const string RsInstanceIDPrefix = "MSRS16";

  	public const string MaxMaintenanceVersion = "16.0.0.0";

  	public const uint evalTimeBombValue = 180u;

  	public const uint currentReleaseTimeBombValue = 0u;

  	public const string WerEventNameSetupMsi = "SQL160MSI";

  	public const string WerEventNameSetupConfig = "SQL160Exception";

  	public const string ASUsageMetricsRoleGuidString = "{0x2414bc1b, 0x1572, 0x4cd9, {0x9c, 0xa5,  0x65, 0x16,  0x6d, 0x8d,  0xef,  0x3d}}";

  	public const string SqlMajorFileVersion = "2022";

  	public const string LicenseLink = "aka.ms/useterms";

  	public const string VersionHelpNamespace = "ms-help://MS.SQLCC.v16";

  	public const string VersionBIDSHelpNamespace = "ms-help://MS.VSCC.v90";

  	public const string VisualStudioShellVersion = "14.0";

  	public const string VisualStudio2012ShellVersion = "";

  	public const string MroBaselineRuntimeVersion = "3.5";

  	public const string MpoBaselineRuntimeVersion = "3.7";
  }
  namespace Microsoft.SqlServer.Types;

  internal static class Constants
  {
  	internal const int SEVERITY_ERROR = 1;

  	internal const int FACILITY_ITF = 4;
  }
  internal enum GL_HResult
  {
  	GL_E_GEODETIC_RESULT_EXCEEDS_HEMISPHERE = -2147221304,
  	GL_E_GEODETIC_ANTIPODAL_ARGUMENTS,
  	GL_E_GEODETIC_BUFFER_WRAPS_AROUND
  }
  internal enum FigureAttributesKatmai : byte
  {
  	InteriorRing,
  	Stroke,
  	ExteriorRing
  }
  internal enum FigureAttributes : byte
  {
  	None,
  	Line,
  	Arc,
  	Curve
  }
  internal enum SegmentType : byte
  {
  	Line,
  	Arc,
  	FirstLine,
  	FirstArc
  }
  internal enum OpenGisType : byte
  {
  	Unknown,
  	Point,
  	LineString,
  	Polygon,
  	MultiPoint,
  	MultiLineString,
  	MultiPolygon,
  	GeometryCollection,
  	CircularString,
  	CompoundCurve,
  	CurvePolygon,
  	FullGlobe
  }
  internal interface GeoDataSink
  {
  	void SetSrid(int srid);

  	void BeginGeo(OpenGisType type);

  	void BeginFigure(double latitude, double longitude, double? z, double? m);

  	void AddLine(double latitude, double longitude, double? z, double? m);

  	void AddCircularArc(double latitude1, double longitude1, double? z1, double? m1, double latitude2, double longitude2, double? z2, double? m2);

  	void AddSegment(SegmentType type);

  	void StartRing(FigureAttributes type);

  	void EndFigure();

  	void EndGeo();

  	void Finish();
  }
  [Flags]
  internal enum SerializationProperties : byte
  {
  	None = 0,
  	HasZValues = 1,
  	HasMValues = 2,
  	IsValid = 4,
  	IsSinglePoint = 8,
  	IsSingleLineSegment = 0x10,
  	IsLargerThanAHemisphere = 0x20
  }
  internal enum SerializationVersion : byte
  {
  	Katmai_CTP4 = 1,
  	SQL11_Fullglobe
  }
  [Serializable]
  internal struct Point
  {
  	public double x;

  	public double y;

  	public Point(double X, double Y)
  	{
  		x = X;
  		y = Y;
  	}

  	public static bool operator ==(Point p1, Point p2)
  	{
  		if (p1.x == p2.x)
  		{
  			return p1.y == p2.y;
  		}
  		return false;
  	}

  	public static bool operator !=(Point p1, Point p2)
  	{
  		return !(p1 == p2);
  	}

  	public override bool Equals(object obj)
  	{
  		if (obj is Point point && x == point.x)
  		{
  			return y == point.y;
  		}
  		return false;
  	}

  	public override int GetHashCode()
  	{
  		return (int)x ^ (int)y;
  	}
  }
  [Serializable]
  internal struct Sphere
  {
  	public double x;

  	public double y;

  	public double z;

  	public double extent;
  }
  internal struct PointZM
  {
  	public double x;

  	public double y;

  	public double z;

  	public double m;

  	public PointZM(double X, double Y, double Z, double M)
  	{
  		x = X;
  		y = Y;
  		z = Z;
  		m = M;
  	}
  }
  internal struct Segment
  {
  	public SegmentType type;

  	public Segment(SegmentType Type)
  	{
  		type = Type;
  	}
  }
  [Serializable]
  internal struct Figure
  {
  	public int pointOffset;

  	public FigureAttributes figureAttribute;

  	public Figure(int pointOffset, FigureAttributes figureAttribute)
  	{
  		this.pointOffset = pointOffset;
  		this.figureAttribute = figureAttribute;
  	}
  }
  [Serializable]
  internal struct Shape
  {
  	public int figureOffset;

  	public int parentOffset;

  	public OpenGisType type;

  	public Shape(int figureOffset, int parentOffset, OpenGisType type)
  	{
  		this.figureOffset = figureOffset;
  		this.parentOffset = parentOffset;
  		this.type = type;
  	}
  }
  internal struct EllipsoidParameters
  {
  	public double semi_major;

  	public double semi_minor;

  	public EllipsoidParameters(double major, double minor)
  	{
  		semi_major = major;
  		semi_minor = minor;
  	}

  	public double GetMinCurvature()
  	{
  		return semi_minor / (semi_major * semi_major);
  	}

  	public double GetMaxCurvature()
  	{
  		return semi_major / (semi_minor * semi_minor);
  	}

  	public double GetEccentricity()
  	{
  		return semi_minor / semi_major;
  	}
  }
  [Serializable]
  internal struct GeoData : IBinarySerialize
  {
  	private Point[] m_points;

  	private double[] m_zValues;

  	private double[] m_mValues;

  	private Figure[] m_figures;

  	private Shape[] m_shapes;

  	private Segment[] m_segments;

  	private bool m_fValid;

  	private bool m_isLargerThanAHemisphere;

  	private bool m_isKatmaiCompatible;

  	public static readonly int MaxGeometryCollectionDepth = 28;

  	public int NumGeometries
  	{
  		get
  		{
  			if (IsEmptyAndNoChildShapes())
  			{
  				return 0;
  			}
  			if (GetGType() == OpenGisType.GeometryCollection)
  			{
  				int num = 0;
  				for (int i = 1; i < GetShapeCount(); i++)
  				{
  					if (m_shapes[i].parentOffset == 0)
  					{
  						num++;
  					}
  				}
  				return num;
  			}
  			if (ContainsChildShapes())
  			{
  				return GetShapeCount() - 1;
  			}
  			return 1;
  		}
  	}

  	public int NumInteriorRing
  	{
  		get
  		{
  			if (!IsEmpty())
  			{
  				return GetFigureCount() - 1;
  			}
  			return 0;
  		}
  	}

  	public int NumRings
  	{
  		get
  		{
  			if (!IsEmpty())
  			{
  				return GetFigureCount();
  			}
  			return 0;
  		}
  	}

  	public GeoData ExteriorRing => AsRing(0);

  	public PointZM StartPoint => GetPointN(1);

  	public PointZM EndPoint => GetPointN(GetPointCount());

  	public double X => m_points[0].x;

  	public double Y => m_points[0].y;

  	public double Z => m_zValues[0];

  	public double M => m_mValues[0];

  	private void CreateArrays(int cPoints, int cFigures, int cShapes, int cZValues, int cMValues, int cSegments)
  	{
  		m_points = ((cPoints <= 0) ? null : new Point[cPoints]);
  		m_figures = ((cFigures <= 0) ? null : new Figure[cFigures]);
  		m_zValues = ((cZValues <= 0) ? null : new double[cZValues]);
  		m_mValues = ((cMValues <= 0) ? null : new double[cMValues]);
  		m_segments = ((cSegments <= 0) ? null : new Segment[cSegments]);
  		m_shapes = ((cShapes <= 0) ? null : new Shape[cShapes]);
  	}

  	public GeoData(PointZM p)
  	{
  		this = default(GeoData);
  		m_fValid = true;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		bool flag = !double.IsNaN(p.z);
  		bool flag2 = !double.IsNaN(p.m);
  		CreateArrays(1, 1, 1, flag ? 1 : 0, flag2 ? 1 : 0, 0);
  		m_points[0] = new Point(p.x, p.y);
  		if (flag)
  		{
  			m_zValues[0] = p.z;
  		}
  		if (flag2)
  		{
  			m_mValues[0] = p.m;
  		}
  		m_figures[0] = new Figure(0, FigureAttributes.Line);
  		m_shapes[0] = new Shape(0, -1, OpenGisType.Point);
  		AssertValid();
  	}

  	public GeoData(OpenGisType type)
  	{
  		this = default(GeoData);
  		m_fValid = true;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(0, 0, 1, 0, 0, 0);
  		m_shapes[0] = new Shape(-1, -1, type);
  		AssertValid();
  	}

  	public GeoData(int cPoints, int cFigures, int cShapes)
  	{
  		this = default(GeoData);
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(cPoints, cFigures, cShapes, 0, 0, 0);
  	}

  	public GeoData(Point[] points, Figure[] figures, Shape[] shapes)
  	{
  		this = default(GeoData);
  		m_points = points;
  		m_figures = figures;
  		m_shapes = shapes;
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		AssertValid();
  	}

  	public GeoData(Point[] points, Figure[] figures, Shape[] shapes, double[] zValues, double[] mValues)
  	{
  		this = default(GeoData);
  		m_points = points;
  		m_zValues = zValues;
  		m_mValues = mValues;
  		m_figures = figures;
  		m_shapes = shapes;
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		AssertValid();
  	}

  	public GeoData(Point[] points, Figure[] figures, Shape[] shapes, double[] zValues, double[] mValues, Segment[] mSegments)
  	{
  		this = default(GeoData);
  		m_points = points;
  		m_zValues = zValues;
  		m_mValues = mValues;
  		m_figures = figures;
  		m_shapes = shapes;
  		m_segments = mSegments;
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		AssertValid();
  	}

  	public GeoData(int cPoints, int cFigures, int cShapes, int cSegments)
  	{
  		this = default(GeoData);
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(cPoints, cFigures, cShapes, 0, 0, cSegments);
  	}

  	public GeoData(int cPoints, int cFigures, int cShapes, int cZValues, int cMValues)
  	{
  		this = default(GeoData);
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(cPoints, cFigures, cShapes, cZValues, cMValues, 0);
  	}

  	public GeoData(int cPoints, int cFigures, int cShapes, int cZValues, int cMValues, int cSegments)
  	{
  		this = default(GeoData);
  		m_fValid = false;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(cPoints, cFigures, cShapes, cZValues, cMValues, cSegments);
  	}

  	public GeoData(Point p)
  	{
  		this = default(GeoData);
  		m_fValid = true;
  		m_isLargerThanAHemisphere = false;
  		m_isKatmaiCompatible = true;
  		CreateArrays(1, 1, 1, 0, 0, 0);
  		m_points[0] = p;
  		m_figures[0] = new Figure(0, FigureAttributes.Line);
  		m_shapes[0] = new Shape(0, -1, OpenGisType.Point);
  		AssertValid();
  	}

  	public int IndexOfShapeOfNextGeometry(int iShapeOfStartGeometry)
  	{
  		for (int parentOffset = m_shapes[iShapeOfStartGeometry].parentOffset; parentOffset != -1; parentOffset = m_shapes[parentOffset].parentOffset)
  		{
  			for (int i = iShapeOfStartGeometry + 1; i < GetShapeCount(); i++)
  			{
  				if (m_shapes[i].parentOffset == parentOffset)
  				{
  					return i;
  				}
  			}
  		}
  		return -1;
  	}

  	public int IndexOfLastShapeOfGeometry(int iShape)
  	{
  		int num = IndexOfShapeOfNextGeometry(iShape);
  		if (-1 != num)
  		{
  			return num - 1;
  		}
  		return GetShapeCount() - 1;
  	}

  	public Shape GetShape(int iShape)
  	{
  		return m_shapes[iShape];
  	}

  	public void SetShape(int iShape, Shape s)
  	{
  		m_shapes[iShape] = s;
  	}

  	public int IndexOfNthChildShape(int iShape)
  	{
  		if (GetGType() == OpenGisType.GeometryCollection)
  		{
  			int num = 0;
  			for (int i = 1; i < GetShapeCount(); i++)
  			{
  				if (m_shapes[i].parentOffset == 0)
  				{
  					num++;
  					if (num == iShape)
  					{
  						return i;
  					}
  				}
  			}
  			return -1;
  		}
  		return iShape;
  	}

  	public int IndexOfLastChildShape(int iShape)
  	{
  		int num = GetShapeCount() - 1;
  		while (num > iShape && GetShape(num).parentOffset != iShape)
  		{
  			num--;
  		}
  		return num;
  	}

  	public Figure GetFigure(int iFigure)
  	{
  		return m_figures[iFigure];
  	}

  	public Figure GetFigure(int iShape, int iFigure)
  	{
  		return m_figures[GetShape(iShape).figureOffset + iFigure];
  	}

  	public void SetFigure(int iFigure, Figure f)
  	{
  		m_figures[iFigure] = f;
  	}

  	public int IndexOfFirstFigure(int iShape)
  	{
  		return GetShape(iShape).figureOffset;
  	}

  	public int IndexOfLastFigure(int iShape)
  	{
  		int i;
  		for (i = iShape + 1; i < GetShapeCount() && IsEmpty(i); i++)
  		{
  		}
  		if (i >= GetShapeCount())
  		{
  			return GetFigureCount() - 1;
  		}
  		return GetShape(i).figureOffset - 1;
  	}

  	public int GetFigureCount()
  	{
  		if (m_figures == null)
  		{
  			return 0;
  		}
  		return m_figures.Length;
  	}

  	public int GetFigureCount(int iShape)
  	{
  		return IndexOfLastFigure(iShape) - IndexOfFirstFigure(iShape) + 1;
  	}

  	public SegmentType GetSegmentType(int iSegment)
  	{
  		return m_segments[iSegment].type;
  	}

  	public int IndexOfFirstSegment(int iFigure)
  	{
  		if (m_segments == null)
  		{
  			return 0;
  		}
  		int num = -1;
  		for (int i = 0; i < iFigure; i++)
  		{
  			if (GetFigure(i).figureAttribute == FigureAttributes.Curve)
  			{
  				for (int num2 = GetPointCount(i) - 1; num2 > 0; num2 = ((!ManagedDataUtil.IsLineSegment(GetSegmentType(num))) ? (num2 - 2) : (num2 - 1)))
  				{
  					num++;
  				}
  			}
  		}
  		return num + 1;
  	}

  	public int IndexOfLastSegment(int iFigure)
  	{
  		if (m_segments == null)
  		{
  			return -1;
  		}
  		int num = IndexOfFirstSegment(iFigure);
  		if (GetFigure(iFigure).figureAttribute == FigureAttributes.Curve)
  		{
  			int num2 = GetPointCount(iFigure) - 1;
  			while (num2 > 0)
  			{
  				num2 = ((!ManagedDataUtil.IsLineSegment(GetSegmentType(num))) ? (num2 - 2) : (num2 - 1));
  				num++;
  			}
  		}
  		return num - 1;
  	}

  	public int IndexOfFirstPoint(int iFigure)
  	{
  		return m_figures[iFigure].pointOffset;
  	}

  	public int IndexOfFirstPoint(int iShape, int iFigure)
  	{
  		return GetFigure(iShape, iFigure).pointOffset;
  	}

  	public int IndexOfLastPoint(int iFigure)
  	{
  		if (iFigure != GetFigureCount() - 1)
  		{
  			return m_figures[iFigure + 1].pointOffset - 1;
  		}
  		return GetPointCount() - 1;
  	}

  	public int IndexOfLastPoint(int iShape, int iFigure)
  	{
  		int num = GetShape(iShape).figureOffset + iFigure;
  		if (num != GetFigureCount() - 1)
  		{
  			return GetFigure(num + 1).pointOffset - 1;
  		}
  		return GetPointCount() - 1;
  	}

  	public int GetPointCount()
  	{
  		if (m_points == null)
  		{
  			return 0;
  		}
  		return m_points.Length;
  	}

  	public int GetPointCount(int iShape, int iFigure)
  	{
  		return IndexOfLastPoint(iShape, iFigure) - IndexOfFirstPoint(iShape, iFigure) + 1;
  	}

  	public int GetPointCount(int iFigure)
  	{
  		return IndexOfLastPoint(iFigure) - IndexOfFirstPoint(iFigure) + 1;
  	}

  	public Point GetPoint(int iShape, int iFigure, int iPoint)
  	{
  		return m_points[GetFigure(iShape, iFigure).pointOffset + iPoint];
  	}

  	public Point GetPoint(int iFigure, int iPoint)
  	{
  		return m_points[GetFigure(iFigure).pointOffset + iPoint];
  	}

  	public Point GetPoint(int iPoint)
  	{
  		return m_points[iPoint];
  	}

  	public bool IsRealPoint()
  	{
  		return GetPointCount() == 1;
  	}

  	public bool HasZ(int first, int last)
  	{
  		if (m_zValues == null)
  		{
  			return false;
  		}
  		for (int i = first; i <= last; i++)
  		{
  			if (!double.IsNaN(m_zValues[i]))
  			{
  				return true;
  			}
  		}
  		return false;
  	}

  	public bool HasZ()
  	{
  		return m_zValues != null;
  	}

  	public bool HasM(int first, int last)
  	{
  		if (m_mValues == null)
  		{
  			return false;
  		}
  		for (int i = first; i <= last; i++)
  		{
  			if (!double.IsNaN(m_mValues[i]))
  			{
  				return true;
  			}
  		}
  		return false;
  	}

  	public bool HasM()
  	{
  		return m_mValues != null;
  	}

  	public OpenGisType GetGType(int iShape)
  	{
  		return GetShape(iShape).type;
  	}

  	public OpenGisType GetGType()
  	{
  		return GetGType(0);
  	}

  	public bool GetIsValid()
  	{
  		return m_fValid;
  	}

  	public void SetIsValid(bool fValid)
  	{
  		m_fValid = fValid;
  	}

  	public bool GetIsFullGlobe()
  	{
  		return GetGType() == OpenGisType.FullGlobe;
  	}

  	public bool GetIsKatmaiCompatible()
  	{
  		return m_isKatmaiCompatible;
  	}

  	public void SetIsKatmaiCompatible(bool value)
  	{
  		m_isKatmaiCompatible = value;
  	}

  	public bool GetIsLargerThanAHemisphere()
  	{
  		return m_isLargerThanAHemisphere;
  	}

  	public void SetIsLargerThanAHemisphere(bool value)
  	{
  		m_isLargerThanAHemisphere = value;
  	}

  	public bool ContainsCurvedShapes()
  	{
  		for (int i = 0; i < GetShapeCount(); i++)
  		{
  			if (GetGType(i) == OpenGisType.CircularString || GetGType(i) == OpenGisType.CompoundCurve || GetGType(i) == OpenGisType.CurvePolygon)
  			{
  				return true;
  			}
  		}
  		return false;
  	}

  	public void Read(BinaryReader r, SerializationVersion maxVersion, string strUnexpectedVersion, bool isGeography)
  	{
  		SerializationVersion serializationVersion = (SerializationVersion)r.ReadByte();
  		m_isKatmaiCompatible = serializationVersion == SerializationVersion.Katmai_CTP4;
  		if ((int)serializationVersion > (int)maxVersion || (int)serializationVersion < 1)
  		{
  			string arg = ((!isGeography) ? "Geometry" : "Geography");
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, strUnexpectedVersion, arg, (int)serializationVersion, (int)maxVersion));
  		}
  		ReadCommon(r, !isGeography, isGeography);
  	}

  	public void Read(BinaryReader r, bool isGeography)
  	{
  		SerializationVersion serializationVersion = (SerializationVersion)r.ReadByte();
  		m_isKatmaiCompatible = serializationVersion == SerializationVersion.Katmai_CTP4;
  		if ((int)serializationVersion > 2 || (int)serializationVersion < 1)
  		{
  			throw new FormatException();
  		}
  		ReadCommon(r, !isGeography, isGeography);
  	}

  	public void Read(BinaryReader r)
  	{
  		SerializationVersion serializationVersion = (SerializationVersion)r.ReadByte();
  		m_isKatmaiCompatible = serializationVersion == SerializationVersion.Katmai_CTP4;
  		if ((int)serializationVersion > 2 || (int)serializationVersion < 1)
  		{
  			throw new FormatException();
  		}
  		ReadCommon(r, geometryChecks: false, geographyChecks: false);
  	}

  	public int GetNextCurveFigure(int indexOflastCurveFigure)
  	{
  		do
  		{
  			indexOflastCurveFigure++;
  		}
  		while (indexOflastCurveFigure < GetFigureCount() && m_figures[indexOflastCurveFigure].figureAttribute != FigureAttributes.Curve);
  		return indexOflastCurveFigure;
  	}

  	public void ReadCommon(BinaryReader r, bool geometryChecks, bool geographyChecks)
  	{
  		SerializationProperties value = (SerializationProperties)r.ReadByte();
  		m_fValid = ManagedDataUtil.IsOn(value, SerializationProperties.IsValid);
  		m_isLargerThanAHemisphere = ManagedDataUtil.IsOn(value, SerializationProperties.IsLargerThanAHemisphere);
  		int num = 0;
  		if (ManagedDataUtil.IsOn(value, SerializationProperties.IsSinglePoint))
  		{
  			num = 1;
  		}
  		else if (ManagedDataUtil.IsOn(value, SerializationProperties.IsSingleLineSegment))
  		{
  			num = 2;
  		}
  		else
  		{
  			num = r.ReadInt32();
  			if (num < 0)
  			{
  				throw new FormatException();
  			}
  		}
  		m_points = ((num <= 0) ? null : new Point[num]);
  		for (int i = 0; i < num; i++)
  		{
  			m_points[i].x = r.ReadDouble();
  			m_points[i].y = r.ReadDouble();
  			if (double.IsNaN(m_points[i].x) || double.IsNaN(m_points[i].y) || double.IsInfinity(m_points[i].x) || double.IsInfinity(m_points[i].y))
  			{
  				throw new FormatException();
  			}
  		}
  		if (geographyChecks)
  		{
  			for (int j = 0; j < num; j++)
  			{
  				if (Math.Abs(m_points[j].x) > 90.0 || Math.Abs(m_points[j].y) > 15069.0)
  				{
  					throw new FormatException();
  				}
  			}
  		}
  		if (ManagedDataUtil.IsOn(value, SerializationProperties.HasZValues))
  		{
  			m_zValues = new double[num];
  			for (int k = 0; k < num; k++)
  			{
  				m_zValues[k] = r.ReadDouble();
  			}
  		}
  		else
  		{
  			m_zValues = null;
  		}
  		if (ManagedDataUtil.IsOn(value, SerializationProperties.HasMValues))
  		{
  			m_mValues = new double[num];
  			for (int l = 0; l < num; l++)
  			{
  				m_mValues[l] = r.ReadDouble();
  			}
  		}
  		else
  		{
  			m_mValues = null;
  		}
  		bool flag = false;
  		if (ManagedDataUtil.IsOn(value, SerializationProperties.IsSinglePoint) || ManagedDataUtil.IsOn(value, SerializationProperties.IsSingleLineSegment))
  		{
  			m_figures = new Figure[1];
  			m_figures[0].figureAttribute = FigureAttributes.Line;
  			m_figures[0].pointOffset = 0;
  		}
  		else
  		{
  			int num2 = r.ReadInt32();
  			if (num == 0 != (num2 == 0))
  			{
  				throw new FormatException();
  			}
  			if (num2 < 0)
  			{
  				throw new FormatException();
  			}
  			m_figures = ((num2 <= 0) ? null : new Figure[num2]);
  			int num3 = -1;
  			for (int m = 0; m < num2; m++)
  			{
  				byte figureAttribute = r.ReadByte();
  				if (m_isKatmaiCompatible)
  				{
  					m_figures[m].figureAttribute = FigureAttributes.Line;
  				}
  				else
  				{
  					m_figures[m].figureAttribute = (FigureAttributes)figureAttribute;
  					if (m_figures[m].figureAttribute == FigureAttributes.None || (int)m_figures[m].figureAttribute > 3)
  					{
  						throw new FormatException();
  					}
  					if (m_figures[m].figureAttribute == FigureAttributes.Curve)
  					{
  						flag = true;
  					}
  				}
  				m_figures[m].pointOffset = r.ReadInt32();
  				if (num3 >= m_figures[m].pointOffset)
  				{
  					throw new FormatException();
  				}
  				num3 = m_figures[m].pointOffset;
  			}
  			for (int n = 0; n < num2; n++)
  			{
  				if (m_figures[n].figureAttribute == FigureAttributes.Arc && GetPointCount(n) % 2 == 0)
  				{
  					throw new FormatException();
  				}
  			}
  			if (num3 >= GetPointCount())
  			{
  				throw new FormatException();
  			}
  			if (num2 > 0 && m_figures[0].pointOffset != 0)
  			{
  				throw new FormatException();
  			}
  		}
  		if (ManagedDataUtil.IsOn(value, SerializationProperties.IsSinglePoint) || ManagedDataUtil.IsOn(value, SerializationProperties.IsSingleLineSegment))
  		{
  			m_shapes = new Shape[1];
  			m_shapes[0].parentOffset = -1;
  			m_shapes[0].figureOffset = 0;
  			if (ManagedDataUtil.IsOn(value, SerializationProperties.IsSinglePoint))
  			{
  				m_shapes[0].type = OpenGisType.Point;
  			}
  			else
  			{
  				m_shapes[0].type = OpenGisType.LineString;
  			}
  			m_segments = null;
  		}
  		else
  		{
  			int num4 = r.ReadInt32();
  			if (num4 <= 0)
  			{
  				throw new FormatException();
  			}
  			m_shapes = new Shape[num4];
  			m_shapes[0].parentOffset = r.ReadInt32();
  			m_shapes[0].figureOffset = r.ReadInt32();
  			m_shapes[0].type = (OpenGisType)r.ReadByte();
  			bool flag2 = IsEmpty(0);
  			if ((m_shapes[0].figureOffset != -1 && m_shapes[0].figureOffset != 0) || m_shapes[0].parentOffset != -1 || (int)m_shapes[0].type > 11 || (int)m_shapes[0].type <= 0)
  			{
  				throw new FormatException();
  			}
  			if (m_shapes[0].type == OpenGisType.FullGlobe && (m_figures != null || m_points != null || geometryChecks))
  			{
  				throw new FormatException();
  			}
  			if (ManagedDataUtil.IsOpenGisTypeCollection(m_shapes[0].type) && num4 == 1 && !IsEmpty(0))
  			{
  				throw new FormatException();
  			}
  			if (m_isKatmaiCompatible && (int)m_shapes[0].type > 7)
  			{
  				throw new FormatException();
  			}
  			for (int num5 = 1; num5 < num4; num5++)
  			{
  				m_shapes[num5].parentOffset = r.ReadInt32();
  				m_shapes[num5].figureOffset = r.ReadInt32();
  				m_shapes[num5].type = (OpenGisType)r.ReadByte();
  				flag2 &= IsEmpty(num5);
  				if ((m_shapes[num5].figureOffset != -1 && m_shapes[num5 - 1].figureOffset > m_shapes[num5].figureOffset) || m_shapes[num5].figureOffset >= GetFigureCount() || m_shapes[num5].figureOffset < -1)
  				{
  					throw new FormatException();
  				}
  				if (m_shapes[num5].parentOffset < 0 || m_shapes[num5].parentOffset >= num5)
  				{
  					throw new FormatException();
  				}
  				if ((int)m_shapes[num5].type > 11 || (int)m_shapes[num5].type <= 0)
  				{
  					throw new FormatException();
  				}
  				if (m_isKatmaiCompatible && (int)m_shapes[num5].type > 7)
  				{
  					throw new FormatException();
  				}
  				OpenGisType type = m_shapes[m_shapes[num5].parentOffset].type;
  				OpenGisType type2 = m_shapes[num5].type;
  				if (type != OpenGisType.GeometryCollection && (type != OpenGisType.MultiPolygon || type2 != OpenGisType.Polygon) && (type != OpenGisType.MultiLineString || type2 != OpenGisType.LineString) && (type != OpenGisType.MultiPoint || type2 != OpenGisType.Point))
  				{
  					throw new FormatException();
  				}
  				if (ManagedDataUtil.IsOpenGisTypeCollection(m_shapes[num5 - 1].type) && !IsEmpty(num5 - 1) && m_shapes[num5].parentOffset != num5 - 1)
  				{
  					throw new FormatException();
  				}
  			}
  			if (flag2 != (m_figures == null))
  			{
  				throw new FormatException();
  			}
  			for (int num6 = 0; num6 < num4; num6++)
  			{
  				if (IsEmpty(num6))
  				{
  					continue;
  				}
  				if (!ContainsChildShapes(num6) && IndexOfFirstFigure(num6) > IndexOfLastFigure(num6))
  				{
  					throw new FormatException();
  				}
  				if (m_shapes[num6].type == OpenGisType.Polygon || m_shapes[num6].type == OpenGisType.CurvePolygon)
  				{
  					int num7 = IndexOfLastFigure(num6);
  					for (int num8 = IndexOfFirstFigure(num6); num8 <= num7; num8++)
  					{
  						if ((!geometryChecks || !IsClosed(num8)) && (!geographyChecks || !GeodeticIsClosed(num8)))
  						{
  							throw new FormatException();
  						}
  					}
  				}
  				else if (m_shapes[num6].type == OpenGisType.CircularString)
  				{
  					if (IndexOfLastFigure(num6) != IndexOfFirstFigure(num6) || m_figures[IndexOfFirstFigure(num6)].figureAttribute != FigureAttributes.Arc)
  					{
  						throw new FormatException();
  					}
  				}
  				else if (m_shapes[num6].type == OpenGisType.CompoundCurve)
  				{
  					if (IndexOfLastFigure(num6) != IndexOfFirstFigure(num6) || m_figures[IndexOfFirstFigure(num6)].figureAttribute != FigureAttributes.Curve)
  					{
  						throw new FormatException();
  					}
  				}
  				else if ((m_shapes[num6].type == OpenGisType.LineString || m_shapes[num6].type == OpenGisType.Point) && (IndexOfLastFigure(num6) != IndexOfFirstFigure(num6) || m_figures[IndexOfFirstFigure(num6)].figureAttribute != FigureAttributes.Line))
  				{
  					throw new FormatException();
  				}
  			}
  			if (flag)
  			{
  				ReadSegments(r);
  			}
  			else
  			{
  				m_segments = null;
  			}
  		}
  		AssertValid();
  	}

  	public void ReadSegments(BinaryReader r)
  	{
  		int num = r.ReadInt32();
  		if (num <= 0)
  		{
  			throw new FormatException();
  		}
  		int nextCurveFigure = GetNextCurveFigure(-1);
  		int num2 = 1;
  		m_segments = new Segment[num];
  		for (int i = 0; i < num; i++)
  		{
  			if (num2 == GetPointCount(nextCurveFigure))
  			{
  				nextCurveFigure = GetNextCurveFigure(nextCurveFigure);
  				if (nextCurveFigure >= GetFigureCount())
  				{
  					throw new FormatException();
  				}
  				num2 = 1;
  			}
  			m_segments[i].type = (SegmentType)r.ReadByte();
  			switch (m_segments[i].type)
  			{
  			case SegmentType.FirstLine:
  				num2++;
  				break;
  			case SegmentType.FirstArc:
  				num2 += 2;
  				if (num2 > GetPointCount(nextCurveFigure))
  				{
  					throw new FormatException();
  				}
  				break;
  			case SegmentType.Line:
  				if (num2 == 1)
  				{
  					throw new FormatException();
  				}
  				num2++;
  				break;
  			case SegmentType.Arc:
  				if (num2 == 1)
  				{
  					throw new FormatException();
  				}
  				num2 += 2;
  				if (num2 > GetPointCount(nextCurveFigure))
  				{
  					throw new FormatException();
  				}
  				break;
  			default:
  				throw new FormatException();
  			}
  		}
  		if (GetNextCurveFigure(nextCurveFigure) < GetFigureCount())
  		{
  			throw new FormatException();
  		}
  		if (num2 != GetPointCount(nextCurveFigure))
  		{
  			throw new FormatException();
  		}
  	}

  	public void Write(BinaryWriter w)
  	{
  		AssertValid();
  		if (m_isKatmaiCompatible)
  		{
  			w.Write((byte)1);
  		}
  		else
  		{
  			w.Write((byte)2);
  		}
  		SerializationProperties value = SerializationProperties.None;
  		if (m_zValues != null)
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.HasZValues);
  		}
  		if (m_mValues != null)
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.HasMValues);
  		}
  		if (m_fValid)
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.IsValid);
  		}
  		if (GetGType() == OpenGisType.Point && !IsEmpty())
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.IsSinglePoint);
  		}
  		if (GetGType() == OpenGisType.LineString && GetPointCount() == 2)
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.IsSingleLineSegment);
  		}
  		if (GetIsLargerThanAHemisphere())
  		{
  			value = ManagedDataUtil.Set(value, SerializationProperties.IsLargerThanAHemisphere);
  		}
  		w.Write((byte)value);
  		int num = ((m_points != null) ? m_points.Length : 0);
  		if (ManagedDataUtil.IsOff(value, SerializationProperties.IsSinglePoint) && ManagedDataUtil.IsOff(value, SerializationProperties.IsSingleLineSegment))
  		{
  			w.Write(num);
  		}
  		for (int i = 0; i < num; i++)
  		{
  			w.Write(m_points[i].x);
  			w.Write(m_points[i].y);
  		}
  		if (m_zValues != null)
  		{
  			for (int j = 0; j < num; j++)
  			{
  				w.Write(m_zValues[j]);
  			}
  		}
  		if (m_mValues != null)
  		{
  			for (int k = 0; k < num; k++)
  			{
  				w.Write(m_mValues[k]);
  			}
  		}
  		int num2 = ((m_figures != null) ? m_figures.Length : 0);
  		if (!ManagedDataUtil.IsOff(value, SerializationProperties.IsSinglePoint) || !ManagedDataUtil.IsOff(value, SerializationProperties.IsSingleLineSegment))
  		{
  			return;
  		}
  		int num3 = ((m_shapes != null) ? m_shapes.Length : 0);
  		w.Write(num2);
  		if (m_isKatmaiCompatible)
  		{
  			int l = 0;
  			for (int m = 0; m < num3; m++)
  			{
  				if (IsEmpty(m))
  				{
  					continue;
  				}
  				if (OpenGisType.Polygon != GetGType(m))
  				{
  					for (; l <= IndexOfLastFigure(m); l++)
  					{
  						w.Write((byte)1);
  						w.Write(m_figures[l].pointOffset);
  					}
  					continue;
  				}
  				w.Write((byte)2);
  				w.Write(m_figures[l].pointOffset);
  				for (l++; l <= IndexOfLastFigure(m); l++)
  				{
  					w.Write((byte)0);
  					w.Write(m_figures[l].pointOffset);
  				}
  			}
  		}
  		else
  		{
  			for (int n = 0; n < num2; n++)
  			{
  				w.Write((byte)m_figures[n].figureAttribute);
  				w.Write(m_figures[n].pointOffset);
  			}
  		}
  		w.Write(num3);
  		for (int num4 = 0; num4 < num3; num4++)
  		{
  			w.Write(m_shapes[num4].parentOffset);
  			w.Write(m_shapes[num4].figureOffset);
  			w.Write((byte)m_shapes[num4].type);
  		}
  		if (m_segments != null)
  		{
  			w.Write(m_segments.Length);
  			for (int num5 = 0; num5 < m_segments.Length; num5++)
  			{
  				w.Write((byte)m_segments[num5].type);
  			}
  		}
  	}

  	public GeoData GetGeometryN(int nGeometry)
  	{
  		if (nGeometry == 1 && GetShapeCount() == 1)
  		{
  			return this;
  		}
  		return AsGeometry(nGeometry);
  	}

  	public GeoData GetInteriorRingN(int nRing)
  	{
  		return AsRing(nRing);
  	}

  	public GeoData GetRingN(int nRing)
  	{
  		return AsRing(nRing - 1);
  	}

  	public PointZM GetPointN(int nPoint)
  	{
  		Point point = GetPoint(nPoint - 1);
  		double z = ((m_zValues != null) ? m_zValues[nPoint - 1] : double.NaN);
  		double m = ((m_mValues != null) ? m_mValues[nPoint - 1] : double.NaN);
  		return new PointZM(point.x, point.y, z, m);
  	}

  	public GeoData GetCurveN(int n)
  	{
  		if (GetGType() == OpenGisType.LineString)
  		{
  			return GetLineStringN(n - 1);
  		}
  		if (GetGType() == OpenGisType.CircularString)
  		{
  			return GetCircularStringN(2 * n - 2);
  		}
  		int num = 0;
  		for (int i = 0; i < n - 1; i++)
  		{
  			num = ((!ManagedDataUtil.IsLineSegment(GetSegmentType(i))) ? (num + 2) : (num + 1));
  		}
  		if (ManagedDataUtil.IsLineSegment(GetSegmentType(n - 1)))
  		{
  			return GetLineStringN(num);
  		}
  		return GetCircularStringN(num);
  	}

  	private void CopyPointArrays(GeoData g, int sourceStartOffset, int destinationStartOffset, int count)
  	{
  		Array.Copy(GetPoints(), sourceStartOffset, g.GetPoints(), destinationStartOffset, count);
  		if (g.GetZValues() != null)
  		{
  			Array.Copy(GetZValues(), sourceStartOffset, g.GetZValues(), destinationStartOffset, count);
  		}
  		if (g.GetMValues() != null)
  		{
  			Array.Copy(GetMValues(), sourceStartOffset, g.GetMValues(), destinationStartOffset, count);
  		}
  	}

  	private GeoData AsRing(int iFigure)
  	{
  		return GetFigure(iFigure).figureAttribute switch
  		{
  			FigureAttributes.Line => AsLineString(iFigure), 
  			FigureAttributes.Arc => AsCircularString(iFigure), 
  			_ => AsCompoundCurve(iFigure), 
  		};
  	}

  	private GeoData AsLineString(int nFigure)
  	{
  		int pointCount = GetPointCount(0, nFigure);
  		int pointOffset = GetFigure(nFigure).pointOffset;
  		GeoData geoData = new GeoData(pointCount, 1, 1, HasZ(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0, HasM(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0);
  		CopyPointArrays(geoData, pointOffset, 0, pointCount);
  		geoData.SetFigure(0, new Figure(0, FigureAttributes.Line));
  		geoData.SetShape(0, new Shape(0, -1, OpenGisType.LineString));
  		geoData.SetIsValid(GetIsValid());
  		return geoData;
  	}

  	private GeoData AsCircularString(int nFigure)
  	{
  		int pointCount = GetPointCount(0, nFigure);
  		int pointOffset = GetFigure(nFigure).pointOffset;
  		GeoData geoData = new GeoData(pointCount, 1, 1, HasZ(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0, HasM(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0);
  		CopyPointArrays(geoData, pointOffset, 0, pointCount);
  		geoData.SetFigure(0, new Figure(0, FigureAttributes.Arc));
  		geoData.SetShape(0, new Shape(0, -1, OpenGisType.CircularString));
  		geoData.SetIsValid(GetIsValid());
  		return geoData;
  	}

  	private GeoData AsCompoundCurve(int nFigure)
  	{
  		int pointCount = GetPointCount(0, nFigure);
  		int pointOffset = GetFigure(nFigure).pointOffset;
  		int num = IndexOfFirstSegment(nFigure);
  		int num2 = IndexOfLastSegment(nFigure) - num + 1;
  		GeoData geoData = new GeoData(pointCount, 1, 1, HasZ(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0, HasM(pointOffset, pointOffset + pointCount - 1) ? pointCount : 0, num2);
  		CopyPointArrays(geoData, GetFigure(nFigure).pointOffset, 0, pointCount);
  		if (num2 > 0)
  		{
  			Array.Copy(GetSegments(), num, geoData.GetSegments(), 0, num2);
  		}
  		geoData.SetFigure(0, new Figure(0, FigureAttributes.Curve));
  		geoData.SetShape(0, new Shape(0, -1, OpenGisType.CompoundCurve));
  		geoData.SetIsValid(GetIsValid());
  		return geoData;
  	}

  	private GeoData GetLineStringN(int startPoint)
  	{
  		GeoData geoData = new GeoData(2, 1, 1, HasZ(startPoint, startPoint + 1) ? 2 : 0, HasM(startPoint, startPoint + 1) ? 2 : 0);
  		CopyPointArrays(geoData, startPoint, 0, 2);
  		geoData.SetFigure(0, new Figure(0, FigureAttributes.Line));
  		geoData.SetShape(0, new Shape(0, -1, OpenGisType.LineString));
  		geoData.SetIsValid(fValid: true);
  		return geoData;
  	}

  	private GeoData GetCircularStringN(int startPoint)
  	{
  		GeoData geoData = new GeoData(3, 1, 1, HasZ(startPoint, startPoint + 2) ? 3 : 0, HasM(startPoint, startPoint + 2) ? 3 : 0);
  		CopyPointArrays(geoData, startPoint, 0, 3);
  		geoData.SetFigure(0, new Figure(0, FigureAttributes.Arc));
  		geoData.SetShape(0, new Shape(0, -1, OpenGisType.CircularString));
  		geoData.SetIsValid(fValid: true);
  		return geoData;
  	}

  	private GeoData AsGeometry(int nShape)
  	{
  		int num = IndexOfNthChildShape(nShape);
  		GeoData geoData;
  		if (IsEmpty(num) && !ContainsChildShapes(num))
  		{
  			geoData = new GeoData(GetShape(num).type);
  		}
  		else
  		{
  			int num2 = IndexOfLastShapeOfGeometry(num);
  			int num3 = num2 - num + 1;
  			int figureOffset = GetShape(num).figureOffset;
  			if (figureOffset != -1)
  			{
  				int num4 = IndexOfLastFigure(num2);
  				int num5 = num4 - figureOffset + 1;
  				int pointOffset = GetFigure(figureOffset).pointOffset;
  				int num6 = ((num4 == GetFigureCount() - 1) ? (GetPointCount() - 1) : (GetFigure(num4 + 1).pointOffset - 1));
  				int num7 = num6 - pointOffset + 1;
  				int num8 = IndexOfFirstSegment(figureOffset);
  				int num9 = IndexOfLastSegment(num4) - num8 + 1;
  				geoData = new GeoData(num7, num5, num3, HasZ(pointOffset, num6) ? num7 : 0, HasM(pointOffset, num6) ? num7 : 0, num9);
  				CopyPointArrays(geoData, pointOffset, 0, num7);
  				for (int i = 0; i < num5; i++)
  				{
  					geoData.m_figures[i] = GetFigure(i + figureOffset);
  					geoData.m_figures[i].pointOffset -= pointOffset;
  				}
  				if (num9 > 0)
  				{
  					Array.Copy(GetSegments(), num8, geoData.GetSegments(), 0, num9);
  				}
  			}
  			else
  			{
  				geoData = new GeoData(0, 0, num3);
  			}
  			for (int j = 0; j < num3; j++)
  			{
  				geoData.m_shapes[j] = GetShape(j + num);
  				if (geoData.m_shapes[j].figureOffset != -1)
  				{
  					geoData.m_shapes[j].figureOffset -= figureOffset;
  				}
  				geoData.m_shapes[j].parentOffset -= num;
  			}
  			geoData.m_shapes[0].parentOffset = -1;
  		}
  		geoData.SetIsValid(GetIsValid());
  		return geoData;
  	}

  	public bool IsClosed()
  	{
  		bool flag = !IsEmpty();
  		int num = 0;
  		while (flag && num < GetFigureCount())
  		{
  			flag = IsClosed(num);
  			num++;
  		}
  		return flag;
  	}

  	public bool IsClosed(int iFigure)
  	{
  		if (GetPointCount(iFigure) > 1)
  		{
  			return GetPoint(IndexOfFirstPoint(iFigure)) == GetPoint(IndexOfLastPoint(iFigure));
  		}
  		return false;
  	}

  	public bool IsClosed(int iShape, int iFigure)
  	{
  		if (!IsEmpty(iShape) && GetPointCount(iShape, iFigure) > 1)
  		{
  			return GetPoint(iShape, iFigure, IndexOfFirstPoint(iShape, iFigure)) == GetPoint(iShape, iFigure, IndexOfLastPoint(iShape, iFigure));
  		}
  		return false;
  	}

  	public bool GeodeticIsClosed()
  	{
  		if (IsEmpty())
  		{
  			return false;
  		}
  		for (int i = 0; i < GetFigureCount(); i++)
  		{
  			if (!GeodeticIsClosed(i))
  			{
  				return false;
  			}
  		}
  		return true;
  	}

  	public bool GeodeticIsClosed(int iFigure)
  	{
  		if (GetPointCount(iFigure) <= 1)
  		{
  			return false;
  		}
  		Point point = GetPoint(IndexOfFirstPoint(iFigure));
  		Point point2 = GetPoint(IndexOfLastPoint(iFigure));
  		if ((point.x != point2.x || (point.y != point2.y && Math.IEEERemainder(point.y - point2.y, 360.0) != 0.0)) && (point.x != 90.0 || point2.x != 90.0))
  		{
  			if (point.x == -90.0)
  			{
  				return point2.x == -90.0;
  			}
  			return false;
  		}
  		return true;
  	}

  	public Point[] GetPoints()
  	{
  		return m_points;
  	}

  	public Figure[] GetFigures()
  	{
  		return m_figures;
  	}

  	public Shape[] GetShapes()
  	{
  		return m_shapes;
  	}

  	public double[] GetZValues()
  	{
  		return m_zValues;
  	}

  	public double[] GetMValues()
  	{
  		return m_mValues;
  	}

  	public Segment[] GetSegments()
  	{
  		return m_segments;
  	}

  	public int GetShapeCount()
  	{
  		if (m_shapes == null)
  		{
  			return 0;
  		}
  		return m_shapes.Length;
  	}

  	public int GetZValuesCount()
  	{
  		if (GetZValues() != null)
  		{
  			if (m_points == null)
  			{
  				return 0;
  			}
  			return m_points.Length;
  		}
  		return 0;
  	}

  	public int GetMValuesCount()
  	{
  		if (GetMValues() != null)
  		{
  			if (m_points == null)
  			{
  				return 0;
  			}
  			return m_points.Length;
  		}
  		return 0;
  	}

  	public int GetSegmentCount()
  	{
  		if (GetSegments() != null)
  		{
  			if (m_segments == null)
  			{
  				return 0;
  			}
  			return m_segments.Length;
  		}
  		return 0;
  	}

  	public bool IsEmptyAndNoChildShapes()
  	{
  		if (IsEmpty())
  		{
  			return !ContainsChildShapes();
  		}
  		return false;
  	}

  	public bool IsEmpty(int iShape)
  	{
  		return GetShape(iShape).figureOffset == -1;
  	}

  	public bool IsEmpty()
  	{
  		if (GetPointCount() == 0)
  		{
  			return !GetIsFullGlobe();
  		}
  		return false;
  	}

  	public bool ContainsChildShapes(int iShape)
  	{
  		if (iShape != GetShapeCount() - 1)
  		{
  			return GetShape(iShape + 1).parentOffset == iShape;
  		}
  		return false;
  	}

  	public bool ContainsChildShapes()
  	{
  		return ContainsChildShapes(0);
  	}

  	public bool IsFillable()
  	{
  		return GetDimension() == 2;
  	}

  	public static void SeparateBounds(ref double pMinX, ref double pMinY, ref double pMaxX, ref double pMaxY)
  	{
  		double num = 1E-08;
  		if (pMinX == pMaxX)
  		{
  			double num2 = (Math.Abs(pMinX) + Math.Abs(pMaxX)) * num;
  			if (num2 == 0.0)
  			{
  				num2 = num;
  			}
  			pMinX -= num2;
  			pMaxX += num2;
  		}
  		if (pMinY == pMaxY)
  		{
  			double num3 = (Math.Abs(pMinY) + Math.Abs(pMaxY)) * num;
  			if (num3 == 0.0)
  			{
  				num3 = num;
  			}
  			pMinY -= num3;
  			pMaxY += num3;
  		}
  	}

  	public int GetDimension()
  	{
  		if (IsEmpty())
  		{
  			return -1;
  		}
  		if (GetIsFullGlobe())
  		{
  			return 2;
  		}
  		if (GetGType() != OpenGisType.GeometryCollection)
  		{
  			return GetDimension(0);
  		}
  		int num = -1;
  		for (int i = 0; i < GetShapeCount(); i++)
  		{
  			if (num == 2)
  			{
  				break;
  			}
  			int dimension = GetDimension(i);
  			if (num < dimension)
  			{
  				num = dimension;
  			}
  		}
  		return num;
  	}

  	public int GetDimension(int iShape)
  	{
  		if (GetGType(iShape) == OpenGisType.Point || GetGType(iShape) == OpenGisType.MultiPoint)
  		{
  			return 0;
  		}
  		if (GetGType(iShape) == OpenGisType.LineString || GetGType(iShape) == OpenGisType.MultiLineString || GetGType(iShape) == OpenGisType.CircularString || GetGType(iShape) == OpenGisType.CompoundCurve)
  		{
  			return 1;
  		}
  		if (GetGType(iShape) == OpenGisType.Polygon || GetGType(iShape) == OpenGisType.MultiPolygon || GetGType(iShape) == OpenGisType.CurvePolygon)
  		{
  			return 2;
  		}
  		return -1;
  	}

  	public bool GetAsPoint(ref double x, ref double y)
  	{
  		if (GetPointCount() == 1)
  		{
  			x = GetPoint(0).x;
  			y = GetPoint(0).y;
  			return true;
  		}
  		if (GetDimension() != 0)
  		{
  			return false;
  		}
  		for (int i = 1; i < GetPointCount(); i++)
  		{
  			if (GetPoint(i).x != GetPoint(0).x || GetPoint(i).y != GetPoint(0).y)
  			{
  				return false;
  			}
  		}
  		x = GetPoint(0).x;
  		y = GetPoint(0).y;
  		return true;
  	}

  	public static GeoData ConstructRectangle(double MinX, double MinY, double MaxX, double MaxY)
  	{
  		GeoData result = default(GeoData);
  		result.CreateArrays(5, 1, 1, 0, 0, 0);
  		result.m_points[0] = new Point(MinX, MinY);
  		result.m_points[1] = new Point(MaxX, MinY);
  		result.m_points[2] = new Point(MaxX, MaxY);
  		result.m_points[3] = new Point(MinX, MaxY);
  		result.m_points[4] = new Point(MinX, MinY);
  		result.m_figures[0] = new Figure(0, FigureAttributes.Line);
  		result.m_shapes[0] = new Shape(0, -1, OpenGisType.Polygon);
  		result.SetIsValid(fValid: true);
  		result.SetIsKatmaiCompatible(value: true);
  		return result;
  	}

  	public void AssertValid()
  	{
  	}

  	public void Populate(GeoDataSink sink)
  	{
  		sink.BeginGeo(GetGType());
  		PopulateRaw(sink);
  		sink.EndGeo();
  		sink.Finish();
  	}

  	public void PopulateRaw(GeoDataSink sink)
  	{
  		int firstSegment = 0;
  		switch (GetGType())
  		{
  		case OpenGisType.Point:
  			if (GetPointCount() > 0)
  			{
  				SinkBeginFigure(0, sink);
  				sink.EndFigure();
  			}
  			break;
  		case OpenGisType.LineString:
  			if (GetFigureCount() > 0)
  			{
  				PopulateLineFigure(0, sink);
  			}
  			break;
  		case OpenGisType.Polygon:
  		{
  			for (int m = 0; m < GetFigureCount(); m++)
  			{
  				PopulateLineFigure(m, sink);
  			}
  			break;
  		}
  		case OpenGisType.MultiPoint:
  		{
  			for (int k = 1; k < GetShapeCount(); k++)
  			{
  				sink.BeginGeo(OpenGisType.Point);
  				if (!IsEmpty(k))
  				{
  					SinkBeginFigure(IndexOfFirstPoint(IndexOfFirstFigure(k)), sink);
  					sink.EndFigure();
  				}
  				sink.EndGeo();
  			}
  			break;
  		}
  		case OpenGisType.MultiLineString:
  		{
  			for (int i = 1; i < GetShapeCount(); i++)
  			{
  				sink.BeginGeo(OpenGisType.LineString);
  				if (!IsEmpty(i))
  				{
  					PopulateLineFigure(IndexOfFirstFigure(i), sink);
  				}
  				sink.EndGeo();
  			}
  			break;
  		}
  		case OpenGisType.MultiPolygon:
  		{
  			for (int l = 1; l < GetShapeCount(); l++)
  			{
  				sink.BeginGeo(OpenGisType.Polygon);
  				PopulateLineFigures(l, sink);
  				sink.EndGeo();
  			}
  			break;
  		}
  		case OpenGisType.GeometryCollection:
  		{
  			int num = 0;
  			for (int j = 1; j < GetShapeCount(); j++)
  			{
  				int parentOffset = GetShape(j).parentOffset;
  				while (num != parentOffset)
  				{
  					sink.EndGeo();
  					num = GetShape(num).parentOffset;
  				}
  				num = j;
  				sink.BeginGeo(GetShape(j).type);
  				firstSegment = PopulateShape(j, sink, firstSegment);
  			}
  			while (num != 0)
  			{
  				sink.EndGeo();
  				num = GetShape(num).parentOffset;
  			}
  			break;
  		}
  		case OpenGisType.CircularString:
  			if (GetFigureCount() > 0)
  			{
  				PopulateArcFigure(0, sink);
  			}
  			break;
  		case OpenGisType.CompoundCurve:
  			if (GetFigureCount() > 0)
  			{
  				firstSegment = PopulateCurveFigure(0, sink, firstSegment);
  			}
  			break;
  		case OpenGisType.CurvePolygon:
  			firstSegment = PopulateCurvePolygon(0, sink, firstSegment);
  			break;
  		case OpenGisType.FullGlobe:
  			break;
  		}
  	}

  	private void PopulateLineFigure(int figure, GeoDataSink sink)
  	{
  		int num = IndexOfFirstPoint(figure);
  		int num2 = IndexOfLastPoint(figure);
  		SinkBeginFigure(num, sink);
  		for (num++; num <= num2; num++)
  		{
  			SinkAddLine(num, sink);
  		}
  		sink.EndFigure();
  	}

  	private void PopulateLineFigures(int shape, GeoDataSink sink)
  	{
  		if (!IsEmpty(shape))
  		{
  			int num = IndexOfLastFigure(shape);
  			for (int i = IndexOfFirstFigure(shape); i <= num; i++)
  			{
  				PopulateLineFigure(i, sink);
  			}
  		}
  	}

  	private void PopulateArcFigure(int figure, GeoDataSink sink)
  	{
  		int num = IndexOfFirstPoint(figure);
  		int num2 = IndexOfLastPoint(figure);
  		SinkBeginFigure(num, sink);
  		for (num++; num <= num2; num += 2)
  		{
  			SinkAddCircularString(num, sink);
  		}
  		sink.EndFigure();
  	}

  	private int PopulateCurveFigure(int figure, GeoDataSink sink, int firstSegment)
  	{
  		int num = firstSegment;
  		int num2 = IndexOfFirstPoint(figure);
  		int num3 = IndexOfLastPoint(figure);
  		sink.AddSegment(m_segments[num].type);
  		SinkBeginFigure(num2, sink);
  		num2++;
  		while (num2 <= num3)
  		{
  			SegmentType type = m_segments[num].type;
  			switch (type)
  			{
  			case SegmentType.Line:
  			case SegmentType.FirstLine:
  				if (SegmentType.FirstLine == type && num != firstSegment)
  				{
  					sink.AddSegment(m_segments[num].type);
  				}
  				SinkAddLine(num2, sink);
  				num2++;
  				break;
  			case SegmentType.Arc:
  			case SegmentType.FirstArc:
  				if (SegmentType.FirstArc == type && num != firstSegment)
  				{
  					sink.AddSegment(m_segments[num].type);
  				}
  				SinkAddCircularString(num2, sink);
  				num2 += 2;
  				break;
  			}
  			num++;
  		}
  		sink.EndFigure();
  		return num;
  	}

  	private int PopulateCurvePolygon(int shape, GeoDataSink sink, int firstSegment)
  	{
  		if (!IsEmpty(shape))
  		{
  			int num = IndexOfLastFigure(shape);
  			for (int i = IndexOfFirstFigure(shape); i <= num; i++)
  			{
  				sink.StartRing(m_figures[i].figureAttribute);
  				switch (m_figures[i].figureAttribute)
  				{
  				case FigureAttributes.Line:
  					PopulateLineFigure(i, sink);
  					break;
  				case FigureAttributes.Arc:
  					PopulateArcFigure(i, sink);
  					break;
  				case FigureAttributes.Curve:
  					firstSegment = PopulateCurveFigure(i, sink, firstSegment);
  					break;
  				}
  			}
  		}
  		return firstSegment;
  	}

  	private int PopulateShape(int shape, GeoDataSink sink, int firstSegment)
  	{
  		if (!IsEmpty(shape))
  		{
  			switch (GetGType(shape))
  			{
  			case OpenGisType.CircularString:
  				if (GetFigureCount() > 0)
  				{
  					PopulateArcFigure(IndexOfFirstFigure(shape), sink);
  				}
  				break;
  			case OpenGisType.CompoundCurve:
  				if (GetFigureCount() > 0)
  				{
  					firstSegment = PopulateCurveFigure(IndexOfFirstFigure(shape), sink, firstSegment);
  				}
  				break;
  			case OpenGisType.CurvePolygon:
  				if (GetFigureCount() > 0)
  				{
  					firstSegment = PopulateCurvePolygon(shape, sink, firstSegment);
  				}
  				break;
  			default:
  				PopulateLineFigures(shape, sink);
  				break;
  			}
  		}
  		return firstSegment;
  	}

  	private double? GetZ(int point)
  	{
  		double? result = null;
  		if (m_zValues != null && !double.IsNaN(m_zValues[point]))
  		{
  			result = m_zValues[point];
  		}
  		return result;
  	}

  	private double? GetM(int point)
  	{
  		double? result = null;
  		if (m_mValues != null && !double.IsNaN(m_mValues[point]))
  		{
  			result = m_mValues[point];
  		}
  		return result;
  	}

  	private void SinkBeginFigure(int point, GeoDataSink sink)
  	{
  		sink.BeginFigure(GetPoint(point).x, GetPoint(point).y, GetZ(point), GetM(point));
  	}

  	private void SinkAddLine(int point, GeoDataSink sink)
  	{
  		sink.AddLine(GetPoint(point).x, GetPoint(point).y, GetZ(point), GetM(point));
  	}

  	private void SinkAddCircularString(int point, GeoDataSink sink)
  	{
  		sink.AddCircularArc(GetPoint(point).x, GetPoint(point).y, GetZ(point), GetM(point), GetPoint(point + 1).x, GetPoint(point + 1).y, GetZ(point + 1), GetM(point + 1));
  	}
  }
  internal static class ManagedDataUtil
  {
  	internal static bool IsLineSegment(SegmentType t)
  	{
  		if (t != 0)
  		{
  			return t == SegmentType.FirstLine;
  		}
  		return true;
  	}

  	internal static bool IsOpenGisTypeCollection(OpenGisType t)
  	{
  		if (t != OpenGisType.GeometryCollection && t != OpenGisType.MultiPolygon && t != OpenGisType.MultiLineString)
  		{
  			return t == OpenGisType.MultiPoint;
  		}
  		return true;
  	}

  	internal static bool IsOn(SerializationProperties value, SerializationProperties flag)
  	{
  		return (value & flag) != 0;
  	}

  	internal static SerializationProperties Set(SerializationProperties value, SerializationProperties flag)
  	{
  		return value | flag;
  	}

  	internal static bool IsOff(SerializationProperties value, SerializationProperties flag)
  	{
  		return !IsOn(value, flag);
  	}
  }
  public enum ValidityState
  {
  	Valid,
  	InvalidUnknown,
  	InvalidIsolatedPoint,
  	InvalidRingOverlap,
  	InvalidSplitRing,
  	InvalidDegeneratesToPoint,
  	InvalidDegeneratePolygon,
  	InvalidOpenRing,
  	InvalidRedundantRing,
  	InvalidInconsistentOrientation,
  	InvalidExteriorRing,
  	InvalidRingOutOfPlace,
  	InvalidEdgeOverlap,
  	InvalidPolygon,
  	InvalidAntipodalEdge
  }
  [CLSCompliant(true)]
  public class SqlGeometryBuilder : IGeometrySink110, IGeometrySink
  {
  	private int _srid = -1;

  	private readonly GeoDataSink _validator = new GeometryValidator();

  	private readonly GeoDataBuilder _builder = new GeoDataBuilder();

  	public virtual SqlGeometry ConstructedGeometry
  	{
  		get
  		{
  			_validator.Finish();
  			return new SqlGeometry(_builder.ConstructedGeoData, _srid);
  		}
  	}

  	public virtual void SetSrid(int srid)
  	{
  		_validator.SetSrid(srid);
  		_srid = srid;
  	}

  	public virtual void BeginGeometry(OpenGisGeometryType type)
  	{
  		OpenGisType type2 = OpenGisTypes.AsOpenGisType(type);
  		_validator.BeginGeo(type2);
  		_builder.BeginGeo(type2);
  	}

  	public virtual void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_validator.BeginFigure(x, y, z, m);
  		_builder.BeginFigure(x, y, z, m);
  	}

  	public virtual void AddLine(double x, double y, double? z, double? m)
  	{
  		_validator.AddLine(x, y, z, m);
  		_builder.AddLine(x, y, z, m);
  	}

  	public virtual void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_validator.AddCircularArc(x1, y1, z1, m1, x2, y2, z2, m2);
  		_builder.AddCircularArc(x1, y1, z1, m1, x2, y2, z2, m2);
  	}

  	public virtual void EndFigure()
  	{
  		_validator.EndFigure();
  		_builder.EndFigure();
  	}

  	public virtual void EndGeometry()
  	{
  		_validator.EndGeo();
  		_builder.EndGeo();
  	}

  	public void BeginFigure(double x, double y)
  	{
  		BeginFigure(x, y, null, null);
  	}

  	public void AddLine(double x, double y)
  	{
  		AddLine(x, y, null, null);
  	}

  	public void AddCircularArc(double x1, double y1, double x2, double y2)
  	{
  		AddCircularArc(x1, y1, null, null, x2, y2, null, null);
  	}
  }
  [CLSCompliant(true)]
  public class SqlGeographyBuilder : IGeographySink110, IGeographySink
  {
  	private int _srid = -1;

  	private readonly GeoDataSink _validator = new GeographyValidator();

  	private readonly GeoDataBuilder _builder = new GeoDataBuilder();

  	public virtual SqlGeography ConstructedGeography
  	{
  		get
  		{
  			_validator.Finish();
  			return new SqlGeography(_builder.ConstructedGeoData, _srid);
  		}
  	}

  	public virtual void SetSrid(int srid)
  	{
  		_validator.SetSrid(srid);
  		_srid = srid;
  	}

  	public virtual void BeginGeography(OpenGisGeographyType type)
  	{
  		OpenGisType type2 = OpenGisTypes.AsOpenGisType(type);
  		_validator.BeginGeo(type2);
  		_builder.BeginGeo(type2);
  	}

  	public virtual void BeginFigure(double latitude, double longitude, double? z, double? m)
  	{
  		_validator.BeginFigure(latitude, longitude, z, m);
  		_builder.BeginFigure(latitude, longitude, z, m);
  	}

  	public virtual void AddLine(double latitude, double longitude, double? z, double? m)
  	{
  		_validator.AddLine(latitude, longitude, z, m);
  		_builder.AddLine(latitude, longitude, z, m);
  	}

  	public virtual void AddCircularArc(double latitude1, double longitude1, double? z1, double? m1, double latitude2, double longitude2, double? z2, double? m2)
  	{
  		_validator.AddCircularArc(latitude1, longitude1, z1, m1, latitude2, longitude2, z2, m2);
  		_builder.AddCircularArc(latitude1, longitude1, z1, m1, latitude2, longitude2, z2, m2);
  	}

  	public virtual void EndFigure()
  	{
  		_validator.EndFigure();
  		_builder.EndFigure();
  	}

  	public virtual void EndGeography()
  	{
  		_validator.EndGeo();
  		_builder.EndGeo();
  	}

  	public void BeginFigure(double latitude, double longitude)
  	{
  		BeginFigure(latitude, longitude, null, null);
  	}

  	public void AddLine(double latitude, double longitude)
  	{
  		AddLine(latitude, longitude, null, null);
  	}

  	public void AddCircularArc(double latitude1, double longitude1, double latitude2, double longitude2)
  	{
  		AddCircularArc(latitude1, longitude1, null, null, latitude2, longitude2, null, null);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [CLSCompliant(true)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeographyUnionAggregate : IBinarySerialize, IAggregate<SqlGeography>
  {
  	private CollectionAggregate _collection;

  	private bool _fullglobe;

  	public void Init()
  	{
  		_collection.Init(Flags.StripEmpty);
  		_fullglobe = false;
  	}

  	public void Accumulate(SqlGeography g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			if (g.GeoData.GetIsFullGlobe())
  			{
  				_collection.Init(Flags.StripEmpty);
  				_collection.Reset(g.Srid);
  				_fullglobe = true;
  			}
  			else
  			{
  				_collection.Accumulate(g.GeoData, g.Srid);
  			}
  		}
  	}

  	public void Merge(GeographyUnionAggregate group)
  	{
  		_collection.Merge(group._collection);
  		if (group._fullglobe)
  		{
  			_fullglobe = true;
  		}
  	}

  	public SqlGeography Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeography.Null;
  		}
  		if (_fullglobe)
  		{
  			return SqlGeography.Construct(GeoDataBuilder.FullGlobeGeoData, _collection.Srid);
  		}
  		return SqlGeography.Construct(GLNativeMethods.GeodeticUnion(_collection.Terminate(), GeoDataBuilder.EmptyGeoData, SridList.GetEllipsoidParameters(_collection.Srid).GetEccentricity()), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_fullglobe = r.ReadBoolean();
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		w.Write(_fullglobe);
  		_collection.Write(w);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [CLSCompliant(true)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeographyConvexHullAggregate : IBinarySerialize, IAggregate<SqlGeography>
  {
  	private CollectionAggregate _collection;

  	private bool _fullglobe;

  	public void Init()
  	{
  		_collection.Init(Flags.StripEmpty);
  		_fullglobe = false;
  	}

  	public void Accumulate(SqlGeography g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			if (g.GeoData.GetIsFullGlobe())
  			{
  				_collection.Init(Flags.StripEmpty);
  				_collection.Reset(g.Srid);
  				_fullglobe = true;
  			}
  			else
  			{
  				_collection.Accumulate(g.GeoData, g.Srid);
  			}
  		}
  	}

  	public void Merge(GeographyConvexHullAggregate group)
  	{
  		_collection.Merge(group._collection);
  		if (group._fullglobe)
  		{
  			_fullglobe = true;
  		}
  	}

  	public SqlGeography Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeography.Null;
  		}
  		if (_fullglobe)
  		{
  			return SqlGeography.Construct(GeoDataBuilder.FullGlobeGeoData, _collection.Srid);
  		}
  		GeoData g = _collection.Terminate();
  		if (g.IsEmpty())
  		{
  			return new SqlGeography(_collection.Srid);
  		}
  		return SqlGeography.Construct(GLNativeMethods.GeodeticConvexHull(g, _collection.Srid), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_fullglobe = r.ReadBoolean();
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		w.Write(_fullglobe);
  		_collection.Write(w);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeographyCollectionAggregate : IBinarySerialize, IAggregate<SqlGeography>
  {
  	private CollectionAggregate _collection;

  	public void Init()
  	{
  		_collection.Init(Flags.StripTopLevelCollection);
  	}

  	public void Accumulate(SqlGeography g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			if (g.GeoData.GetIsFullGlobe())
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrFullGlobeCannotBePartOfGeometryCollection));
  			}
  			_collection.Accumulate(g.GeoData, g.Srid);
  		}
  	}

  	public void Merge(GeographyCollectionAggregate group)
  	{
  		_collection.Merge(group._collection);
  	}

  	public SqlGeography Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeography.Null;
  		}
  		return SqlGeography.Construct(_collection.Terminate(), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		_collection.Write(w);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [SqlUserDefinedAggregate(Format.Native, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = true)]
  public class GeographyEnvelopeAggregate : IAggregate<SqlGeography>
  {
  	private const double MinimalBufferExtent = 3E-18;

  	private Sphere _sphere;

  	private int _srid;

  	private bool _failed;

  	private const double s_toDegrees = 180.0 / Math.PI;

  	public void Init()
  	{
  		_sphere.extent = -1.0;
  		_srid = SridList.Null;
  		_failed = false;
  	}

  	public void Accumulate(SqlGeography g)
  	{
  		if (g.IsNull)
  		{
  			return;
  		}
  		g.ThrowIfInvalid();
  		if (_failed)
  		{
  			return;
  		}
  		if (_srid != SridList.Null && _srid != g.Srid)
  		{
  			_failed = true;
  			return;
  		}
  		_srid = g.Srid;
  		if (g.GeoData.GetIsLargerThanAHemisphere())
  		{
  			_sphere.x = 0.0;
  			_sphere.y = 0.0;
  			_sphere.z = 1.0;
  			_sphere.extent = 4.0;
  		}
  		else if (g.GeoData.GetPointCount() > 0)
  		{
  			GLNativeMethods.UpdateGeodeticEnvelope(g.GeoData, g.Srid, ref _sphere);
  		}
  	}

  	public void Merge(GeographyEnvelopeAggregate group)
  	{
  		if (!_failed && group._srid != SridList.Null)
  		{
  			if (group._failed)
  			{
  				_failed = true;
  			}
  			else if (_srid == SridList.Null)
  			{
  				_srid = group._srid;
  				_sphere = group._sphere;
  			}
  			else if (_srid != group._srid)
  			{
  				_failed = true;
  			}
  			else
  			{
  				GLNativeMethods.GeodeticCapUnion(ref _sphere, group._sphere);
  			}
  		}
  	}

  	public SqlGeography Terminate()
  	{
  		if (_failed || _srid == SridList.Null)
  		{
  			return SqlGeography.Null;
  		}
  		if (_sphere.extent < 0.0)
  		{
  			return new SqlGeography(_srid);
  		}
  		if (_sphere.extent == 4.0)
  		{
  			return SqlGeography.Construct(GeoDataBuilder.FullGlobeGeoData, _srid);
  		}
  		if (_sphere.extent < 3E-18)
  		{
  			_sphere.extent = 3E-18;
  		}
  		EllipsoidParameters ellipsoidParameters = SridList.GetEllipsoidParameters(_srid);
  		double num = ellipsoidParameters.semi_major * ellipsoidParameters.semi_major / ellipsoidParameters.semi_minor;
  		double latitude = ((_sphere.z >= 1.0) ? 90.0 : ((_sphere.z <= -1.0) ? (-90.0) : (Math.Asin(_sphere.z) * (180.0 / Math.PI))));
  		double longitude = ((_sphere.x == 0.0 && _sphere.y == 0.0) ? 0.0 : (Math.Atan2(_sphere.y, _sphere.x) * (180.0 / Math.PI)));
  		return SqlGeography.Point(latitude, longitude, _srid).BufferWithCurves(num * 2.0 * Math.Asin(Math.Sqrt(_sphere.extent) / 2.0));
  	}
  }
  internal class GeographyMarkupLanguageWriter : GeoDataSink
  {
  	private XmlWriter _writer;

  	private const string _gmlNamespace = "http://www.opengis.net/gml";

  	private const string _fullGlobeNamespace = "http://schemas.microsoft.com/sqlserver/2011/geography";

  	private Context _context;

  	private double _lastX;

  	private double _lastY;

  	public GeographyMarkupLanguageWriter(XmlWriter writer)
  	{
  		_writer = writer;
  	}

  	public void SetSrid(int srid)
  	{
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_context.Begin(type);
  		switch (type)
  		{
  		case OpenGisType.Point:
  			StartElement("Point");
  			StartElement("pos");
  			break;
  		case OpenGisType.LineString:
  			StartElement("LineString");
  			StartElement("posList");
  			break;
  		case OpenGisType.Polygon:
  			StartElement("Polygon");
  			break;
  		case OpenGisType.MultiPoint:
  			StartElement("MultiPoint");
  			StartElement("pointMembers");
  			break;
  		case OpenGisType.MultiLineString:
  			StartElement("MultiCurve");
  			StartElement("curveMembers");
  			break;
  		case OpenGisType.MultiPolygon:
  			StartElement("MultiSurface");
  			StartElement("surfaceMembers");
  			break;
  		case OpenGisType.GeometryCollection:
  			StartElement("MultiGeometry");
  			StartElement("geometryMembers");
  			break;
  		case OpenGisType.FullGlobe:
  			_writer.WriteStartElement("FullGlobe", "http://schemas.microsoft.com/sqlserver/2011/geography");
  			break;
  		case OpenGisType.CircularString:
  			StartElement("ArcString");
  			StartElement("posList");
  			break;
  		case OpenGisType.CompoundCurve:
  			StartElement("CompositeCurve");
  			break;
  		case OpenGisType.CurvePolygon:
  			StartElement("PolygonPatch");
  			break;
  		}
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_context.BeginFigure();
  		if (_context.Type == OpenGisType.Polygon)
  		{
  			StartElement(_context.IsFirstFigure ? "exterior" : "interior");
  			StartElement("LinearRing");
  			StartElement("posList");
  		}
  		WritePoint(x, y);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_context.AddLine();
  		_writer.WriteValue(" ");
  		WritePoint(x, y);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_context.AddArc();
  		_writer.WriteValue(" ");
  		WritePoint(x1, y1);
  		_writer.WriteValue(" ");
  		WritePoint(x2, y2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		if (_context.HasFigureStarted)
  		{
  			EndElement();
  			EndElement();
  			EndElement();
  		}
  		if (type == SegmentType.FirstLine)
  		{
  			StartElement("curveMember");
  			StartElement("LineString");
  			StartElement("posList");
  		}
  		else
  		{
  			StartElement("curveMember");
  			StartElement("ArcString");
  			StartElement("posList");
  		}
  		if (_context.HasFigureStarted)
  		{
  			WritePoint(_lastX, _lastY);
  		}
  		_context.StartSegment();
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		StartElement((_context.Figures == 0) ? "exterior" : "interior");
  		StartElement("Ring");
  		StartElement("curveMember");
  		switch (type)
  		{
  		case FigureAttributes.Line:
  			StartElement("LineString");
  			StartElement("posList");
  			break;
  		case FigureAttributes.Arc:
  			StartElement("ArcString");
  			StartElement("posList");
  			break;
  		case FigureAttributes.Curve:
  			StartElement("CompositeCurve");
  			break;
  		}
  		_context.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		if (_context.Type == OpenGisType.Polygon)
  		{
  			EndElement();
  			EndElement();
  			EndElement();
  		}
  		else if (_context.Type == OpenGisType.CompoundCurve)
  		{
  			EndElement();
  			EndElement();
  			EndElement();
  		}
  		else if (_context.Type == OpenGisType.CurvePolygon)
  		{
  			EndElement();
  			if (_context.CurrentRing == FigureAttributes.Curve)
  			{
  				EndElement();
  				EndElement();
  			}
  			EndElement();
  			EndElement();
  			EndElement();
  			EndElement();
  		}
  		_context.EndFigure();
  	}

  	public void EndGeo()
  	{
  		if (_context.Type != OpenGisType.Polygon && _context.Type != OpenGisType.FullGlobe && _context.Type != OpenGisType.CurvePolygon && _context.Type != OpenGisType.CompoundCurve)
  		{
  			EndElement();
  		}
  		EndElement();
  		_context.End();
  	}

  	public void Finish()
  	{
  	}

  	private void WritePoint(double x, double y)
  	{
  		_writer.WriteValue(x);
  		_writer.WriteValue(" ");
  		_writer.WriteValue(y);
  		_lastX = x;
  		_lastY = y;
  	}

  	private void StartElement(string name)
  	{
  		_writer.WriteStartElement(name, "http://www.opengis.net/gml");
  	}

  	private void EndElement()
  	{
  		_writer.WriteEndElement();
  	}
  }
  internal class GeographyMarkupLanguageReader
  {
  	private delegate void ItemParserDelegate();

  	private const string _gmlNamespace = "http://www.opengis.net/gml";

  	private const string _fullGlobeNamespace = "http://schemas.microsoft.com/sqlserver/2011/geography";

  	private readonly GeoDataSink _sink;

  	private readonly XmlReader _reader;

  	private int points;

  	private int arcPoints;

  	private double firstX;

  	private double firstY;

  	private bool startSegment;

  	private double lastX;

  	private double lastY;

  	public GeographyMarkupLanguageReader(XmlReader reader, GeoDataSink sink)
  	{
  		_reader = reader;
  		_sink = sink;
  	}

  	public void Read(int srid)
  	{
  		_sink.SetSrid(srid);
  		ParseGmlGeometry();
  		if (!_reader.EOF)
  		{
  			throw new FormatException(SpatialRes.StrGmlMustHaveSingleTag);
  		}
  		_sink.Finish();
  	}

  	private bool ReadStartOrEmptyElement(string element)
  	{
  		if (_reader.HasAttributes)
  		{
  			if (_reader.AttributeCount != 1)
  			{
  				throw new FormatException(SpatialRes.StrGmlMayNotHaveAttributes);
  			}
  			_reader.MoveToFirstAttribute();
  			string text = _reader.Prefix;
  			if (string.IsNullOrEmpty(text))
  			{
  				text = _reader.Name;
  			}
  			if (string.Compare(text, "xmlns", StringComparison.OrdinalIgnoreCase) != 0)
  			{
  				throw new FormatException(SpatialRes.StrGmlMayNotHaveAttributes);
  			}
  			_reader.MoveToElement();
  		}
  		bool isEmptyElement = _reader.IsEmptyElement;
  		if (element != "FullGlobe")
  		{
  			_reader.ReadStartElement(element, "http://www.opengis.net/gml");
  		}
  		else
  		{
  			_reader.ReadStartElement(element, "http://schemas.microsoft.com/sqlserver/2011/geography");
  		}
  		return !isEmptyElement;
  	}

  	private bool IsStartElement(string element)
  	{
  		return _reader.IsStartElement(element, "http://www.opengis.net/gml");
  	}

  	private bool IsFullGlobeElement()
  	{
  		return _reader.IsStartElement("FullGlobe", "http://schemas.microsoft.com/sqlserver/2011/geography");
  	}

  	private bool IsEndElement(string element)
  	{
  		_reader.MoveToContent();
  		if (_reader.NodeType == XmlNodeType.EndElement)
  		{
  			return _reader.LocalName == element;
  		}
  		return false;
  	}

  	private void ReadEndElement()
  	{
  		_reader.ReadEndElement();
  	}

  	private void ParseGmlGeometry()
  	{
  		if (!_reader.IsStartElement())
  		{
  			throw new FormatException();
  		}
  		if (IsStartElement("Point"))
  		{
  			ParseGmlPointShape();
  			return;
  		}
  		if (IsStartElement("LineString"))
  		{
  			ParseGmlLineStringShape();
  			return;
  		}
  		if (IsStartElement("Polygon"))
  		{
  			ParseGmlPolygonShape();
  			return;
  		}
  		if (IsStartElement("MultiPoint"))
  		{
  			ParseGmlMultiPointShape();
  			return;
  		}
  		if (IsStartElement("MultiCurve"))
  		{
  			ParseGmlMultiCurveShape();
  			return;
  		}
  		if (IsStartElement("MultiSurface"))
  		{
  			ParseGmlMultiSurfaceShape();
  			return;
  		}
  		if (IsStartElement("MultiGeometry"))
  		{
  			ParseGmlMultiGeometryShape();
  			return;
  		}
  		if (IsStartElement("ArcString"))
  		{
  			ParseGmlArcStringShape();
  			return;
  		}
  		if (IsStartElement("Arc"))
  		{
  			ParseGmlArcShape();
  			return;
  		}
  		if (IsStartElement("CompositeCurve"))
  		{
  			ParseGmlCompositeCurveShape();
  			return;
  		}
  		if (IsStartElement("PolygonPatch"))
  		{
  			ParseGmlPolygonPatchShape();
  			return;
  		}
  		if (IsFullGlobeElement())
  		{
  			ParseGmlFullGlobeElement();
  			return;
  		}
  		throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGmlMustHaveValidTag, _reader.Name));
  	}

  	private void ParseGmlPointShape()
  	{
  		_sink.BeginGeo(OpenGisType.Point);
  		BeginFigure();
  		ParseGmlPointElement(allowEmpty: true);
  		EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseGmlPointPropertyElement(bool allowEmpty)
  	{
  		if (ReadStartOrEmptyElement("pointProperty"))
  		{
  			ParseGmlPointElement(allowEmpty);
  			ReadEndElement();
  		}
  	}

  	private void ParseGmlArcPointPropertyElement()
  	{
  		StartArc();
  		ParseGmlPointPropertyElement(allowEmpty: false);
  		ParseGmlPointPropertyElement(allowEmpty: false);
  		EndArc();
  	}

  	private void ParseGmlPointElement(bool allowEmpty)
  	{
  		if (ReadStartOrEmptyElement("Point"))
  		{
  			ParseGmlPosElement(allowEmpty);
  			ReadEndElement();
  		}
  	}

  	private void ParseGmlPosElement(bool allowEmpty)
  	{
  		if (ReadStartOrEmptyElement("pos"))
  		{
  			double[] array = (double[])_reader.ReadContentAs(typeof(double[]), null);
  			if (array.Length != 0)
  			{
  				if (array.Length != 2)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPosMustHaveTwoCoordinates, array.Length));
  				}
  				AddPoint(array[0], array[1]);
  			}
  			else if (!allowEmpty)
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPosMustHaveTwoCoordinates, array.Length));
  			}
  			ReadEndElement();
  		}
  		else if (!allowEmpty)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPosMustHaveTwoCoordinates, 0));
  		}
  	}

  	private void ParseArcGmlPosElement()
  	{
  		StartArc();
  		ParseGmlPosElement(allowEmpty: false);
  		ParseGmlPosElement(allowEmpty: false);
  		EndArc();
  	}

  	private void ParseGmlLineStringShape()
  	{
  		_sink.BeginGeo(OpenGisType.LineString);
  		BeginFigure();
  		ParseGmlLineString();
  		EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseGmlLineString()
  	{
  		if (ReadStartOrEmptyElement("LineString"))
  		{
  			if (IsPosListStart())
  			{
  				ParsePosList(allowEmpty: false);
  			}
  			else
  			{
  				ParseGmlPosListElement(allowEmpty: true);
  			}
  			ReadEndElement();
  		}
  	}

  	private void ParseGmlArcStringShape()
  	{
  		_sink.BeginGeo(OpenGisType.CircularString);
  		BeginFigure();
  		ParseGmlArcString();
  		EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseGmlArcString()
  	{
  		if (ReadStartOrEmptyElement("ArcString"))
  		{
  			if (IsPosListStart())
  			{
  				ParseArcPosList(allowEmpty: false);
  			}
  			else
  			{
  				StartArc();
  				ParseGmlPosListElement(allowEmpty: true);
  				EndArc();
  			}
  			ReadEndElement();
  		}
  	}

  	private void ParseGmlArcShape()
  	{
  		_sink.BeginGeo(OpenGisType.CircularString);
  		BeginFigure();
  		if (ReadStartOrEmptyElement("Arc"))
  		{
  			if (IsPosListStart())
  			{
  				if (IsStartElement("pos"))
  				{
  					ParseGmlPosElement(allowEmpty: false);
  				}
  				else
  				{
  					ParseGmlPointPropertyElement(allowEmpty: false);
  				}
  				if (IsStartElement("pos"))
  				{
  					ParseArcGmlPosElement();
  				}
  				else
  				{
  					ParseGmlArcPointPropertyElement();
  				}
  			}
  			else
  			{
  				StartArc();
  				if (ReadStartOrEmptyElement("posList"))
  				{
  					if (!IsEndElement("posList"))
  					{
  						double[] array = (double[])_reader.ReadContentAs(typeof(double[]), null);
  						if (array.Length != 6)
  						{
  							throw new FormatException(SpatialRes.StrGmlArcMustHaveExactlyThreePoints);
  						}
  						for (int i = 0; i < array.Length; i += 2)
  						{
  							AddPoint(array[i], array[i + 1]);
  						}
  					}
  					ReadEndElement();
  				}
  				EndArc();
  			}
  			ReadEndElement();
  		}
  		EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseGmlCompositeCurveShape()
  	{
  		_sink.BeginGeo(OpenGisType.CompoundCurve);
  		BeginFigure();
  		ParseGmlCompositeCurveFigure();
  		EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseGmlCompositeCurveFigure()
  	{
  		if (!ReadStartOrEmptyElement("CompositeCurve"))
  		{
  			return;
  		}
  		while (IsStartElement("curveMember"))
  		{
  			ReadStartOrEmptyElement("curveMember");
  			while (IsStartElement("LineString") || IsStartElement("ArcString"))
  			{
  				if (IsStartElement("LineString"))
  				{
  					StartSegment(SegmentType.FirstLine);
  					ParseGmlLineString();
  				}
  				else
  				{
  					StartSegment(SegmentType.FirstArc);
  					ParseGmlArcString();
  				}
  			}
  			ReadEndElement();
  		}
  		ReadEndElement();
  	}

  	private bool IsPosListStart()
  	{
  		if (!IsStartElement("pos"))
  		{
  			return IsStartElement("pointProperty");
  		}
  		return true;
  	}

  	private void ParsePosList(bool allowEmpty)
  	{
  		do
  		{
  			if (IsStartElement("pos"))
  			{
  				ParseGmlPosElement(allowEmpty);
  			}
  			else
  			{
  				ParseGmlPointPropertyElement(allowEmpty);
  			}
  		}
  		while (IsPosListStart());
  	}

  	private void ParseArcPosList(bool allowEmpty)
  	{
  		if (IsStartElement("pos"))
  		{
  			ParseGmlPosElement(allowEmpty);
  		}
  		else
  		{
  			ParseGmlPointPropertyElement(allowEmpty);
  		}
  		while (IsPosListStart())
  		{
  			if (IsStartElement("pos"))
  			{
  				ParseArcGmlPosElement();
  			}
  			else
  			{
  				ParseGmlArcPointPropertyElement();
  			}
  		}
  	}

  	private void ParseGmlPosListElement(bool allowEmpty)
  	{
  		if (ReadStartOrEmptyElement("posList"))
  		{
  			if (!IsEndElement("posList"))
  			{
  				double[] array = (double[])_reader.ReadContentAs(typeof(double[]), null);
  				if (array.Length == 0)
  				{
  					throw new FormatException(SpatialRes.StrPosListIsEmpty);
  				}
  				if (array.Length % 2 != 0)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPosListHasOddCoordinates, array.Length));
  				}
  				for (int i = 0; i < array.Length; i += 2)
  				{
  					AddPoint(array[i], array[i + 1]);
  				}
  			}
  			else if (!allowEmpty)
  			{
  				throw new FormatException(SpatialRes.StrPosListIsEmpty);
  			}
  			ReadEndElement();
  		}
  		else if (!allowEmpty)
  		{
  			throw new FormatException(SpatialRes.StrPosListIsEmpty);
  		}
  	}

  	private void ParseGmlPolygonShape()
  	{
  		_sink.BeginGeo(OpenGisType.Polygon);
  		if (ReadStartOrEmptyElement("Polygon"))
  		{
  			if (!IsEndElement("Polygon"))
  			{
  				BeginFigure();
  				ParseGmlExteriorLinearRingElement();
  				EndFigure();
  				int num = 1;
  				while (IsStartElement("interior"))
  				{
  					BeginFigure();
  					ParseGmlInteriorLinearRingElement(num);
  					EndFigure();
  					num++;
  				}
  			}
  			ReadEndElement();
  		}
  		_sink.EndGeo();
  	}

  	private void ParseGmlExteriorLinearRingElement()
  	{
  		if (ReadStartOrEmptyElement("exterior"))
  		{
  			if (!IsEndElement("exterior"))
  			{
  				ParseGmlLinearRingElement();
  			}
  			else
  			{
  				_sink.BeginFigure(0.0, 0.0, null, null);
  				_sink.EndFigure();
  			}
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseGmlInteriorLinearRingElement(int ringNumber)
  	{
  		if (ReadStartOrEmptyElement("interior"))
  		{
  			if (!IsEndElement("interior"))
  			{
  				ParseGmlLinearRingElement();
  			}
  			else
  			{
  				_sink.BeginFigure(0.0, 0.0, null, null);
  				_sink.EndFigure();
  			}
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseGmlLinearRingElement()
  	{
  		if (ReadStartOrEmptyElement("LinearRing"))
  		{
  			if (IsEndElement("LinearRing"))
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrLinearRingHasTooFewPoints, 0));
  			}
  			if (IsPosListStart())
  			{
  				ParsePosList(allowEmpty: false);
  			}
  			else
  			{
  				ParseGmlPosListElement(allowEmpty: false);
  			}
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseGmlPolygonPatchShape()
  	{
  		_sink.BeginGeo(OpenGisType.CurvePolygon);
  		if (ReadStartOrEmptyElement("PolygonPatch"))
  		{
  			if (!IsEndElement("PolygonPatch"))
  			{
  				BeginFigure();
  				ParseGmlExteriorRingElement();
  				EndFigure();
  				int num = 1;
  				while (IsStartElement("interior"))
  				{
  					BeginFigure();
  					ParseGmlInteriorRingElement(num);
  					EndFigure();
  					num++;
  				}
  			}
  			ReadEndElement();
  		}
  		_sink.EndGeo();
  	}

  	private void ParseGmlExteriorRingElement()
  	{
  		if (ReadStartOrEmptyElement("exterior"))
  		{
  			if (!IsEndElement("exterior"))
  			{
  				ParseGmlRingElement();
  			}
  			else
  			{
  				_sink.BeginFigure(0.0, 0.0, null, null);
  				_sink.EndFigure();
  			}
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseGmlInteriorRingElement(int ringNumber)
  	{
  		if (ReadStartOrEmptyElement("interior"))
  		{
  			if (!IsEndElement("interior"))
  			{
  				ParseGmlRingElement();
  			}
  			else
  			{
  				_sink.BeginFigure(0.0, 0.0, null, null);
  				_sink.EndFigure();
  			}
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseGmlRingElement()
  	{
  		if (ReadStartOrEmptyElement("Ring"))
  		{
  			if (IsEndElement("Ring"))
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrLinearRingHasTooFewPoints, 0));
  			}
  			ReadStartOrEmptyElement("curveMember");
  			if (IsStartElement("LineString") || IsStartElement("ArcString") || IsStartElement("CompositeCurve"))
  			{
  				if (IsStartElement("LineString"))
  				{
  					_sink.StartRing(FigureAttributes.Line);
  					ParseGmlLineString();
  				}
  				else if (IsStartElement("ArcString"))
  				{
  					_sink.StartRing(FigureAttributes.Arc);
  					ParseGmlArcString();
  				}
  				else
  				{
  					_sink.StartRing(FigureAttributes.Curve);
  					ParseGmlCompositeCurveFigure();
  				}
  			}
  			ReadEndElement();
  			ReadEndElement();
  		}
  		else
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  	}

  	private void ParseMultiItemElement(string header, string member, string members, ItemParserDelegate parseItem)
  	{
  		if (!ReadStartOrEmptyElement(header))
  		{
  			return;
  		}
  		if (!IsEndElement(header))
  		{
  			while (IsStartElement(member))
  			{
  				if (ReadStartOrEmptyElement(member) && !IsEndElement(member))
  				{
  					parseItem();
  					ReadEndElement();
  				}
  			}
  			if (IsStartElement(members) && ReadStartOrEmptyElement(members))
  			{
  				while (_reader.IsStartElement())
  				{
  					parseItem();
  				}
  				ReadEndElement();
  			}
  		}
  		ReadEndElement();
  	}

  	private void ParseGmlMultiPointShape()
  	{
  		_sink.BeginGeo(OpenGisType.MultiPoint);
  		ParseMultiItemElement("MultiPoint", "pointMember", "pointMembers", ParseGmlPointShape);
  		_sink.EndGeo();
  	}

  	private void ParseGmlMultiCurveShape()
  	{
  		_sink.BeginGeo(OpenGisType.MultiLineString);
  		ParseMultiItemElement("MultiCurve", "curveMember", "curveMembers", ParseGmlLineStringShape);
  		_sink.EndGeo();
  	}

  	private void ParseGmlMultiSurfaceShape()
  	{
  		_sink.BeginGeo(OpenGisType.MultiPolygon);
  		ParseMultiItemElement("MultiSurface", "surfaceMember", "surfaceMembers", ParseGmlPolygonShape);
  		_sink.EndGeo();
  	}

  	private void ParseGmlMultiGeometryShape()
  	{
  		_sink.BeginGeo(OpenGisType.GeometryCollection);
  		ParseMultiItemElement("MultiGeometry", "geometryMember", "geometryMembers", ParseGmlGeometry);
  		_sink.EndGeo();
  	}

  	private void ParseGmlFullGlobeElement()
  	{
  		_sink.BeginGeo(OpenGisType.FullGlobe);
  		if (ReadStartOrEmptyElement("FullGlobe") && IsEndElement("FullGlobe"))
  		{
  			ReadEndElement();
  		}
  		_sink.EndGeo();
  	}

  	private void BeginFigure()
  	{
  		points = 0;
  		arcPoints = -1;
  		startSegment = false;
  	}

  	private void StartArc()
  	{
  		arcPoints = 0;
  	}

  	private void StartSegment(SegmentType type)
  	{
  		_sink.AddSegment(type);
  		startSegment = true;
  	}

  	private void AddPoint(double x, double y)
  	{
  		if (points == 0)
  		{
  			_sink.BeginFigure(x, y, null, null);
  			startSegment = false;
  		}
  		else if (startSegment)
  		{
  			if (x != lastX || y != lastY)
  			{
  				throw new FormatException(SpatialRes.StrCompoundCurveMismatch);
  			}
  			startSegment = false;
  		}
  		else if (arcPoints == -1)
  		{
  			_sink.AddLine(x, y, null, null);
  		}
  		else if (arcPoints == 0)
  		{
  			firstX = x;
  			firstY = y;
  			arcPoints++;
  		}
  		else if (arcPoints == 1)
  		{
  			_sink.AddCircularArc(firstX, firstY, null, null, x, y, null, null);
  			arcPoints = 0;
  		}
  		lastX = x;
  		lastY = y;
  		points++;
  	}

  	private void EndArc()
  	{
  		arcPoints = -1;
  	}

  	private void EndFigure()
  	{
  		if (points > 0)
  		{
  			_sink.EndFigure();
  		}
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [CLSCompliant(true)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeometryUnionAggregate : IBinarySerialize, IAggregate<SqlGeometry>
  {
  	private CollectionAggregate _collection;

  	public void Init()
  	{
  		_collection.Init(Flags.StripEmpty);
  	}

  	public void Accumulate(SqlGeometry g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			_collection.Accumulate(g.GeoData, g.Srid);
  		}
  	}

  	public void Merge(GeometryUnionAggregate group)
  	{
  		_collection.Merge(group._collection);
  	}

  	public SqlGeometry Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeometry.Null;
  		}
  		return SqlGeometry.Construct(GLNativeMethods.Union(_collection.Terminate(), GeoDataBuilder.EmptyGeoData), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		_collection.Write(w);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [CLSCompliant(true)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeometryConvexHullAggregate : IBinarySerialize, IAggregate<SqlGeometry>
  {
  	private CollectionAggregate _collection;

  	public void Init()
  	{
  		_collection.Init(Flags.StripEmpty);
  	}

  	public void Accumulate(SqlGeometry g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			_collection.Accumulate(g.GeoData, g.Srid);
  		}
  	}

  	public void Merge(GeometryConvexHullAggregate group)
  	{
  		_collection.Merge(group._collection);
  	}

  	public SqlGeometry Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeometry.Null;
  		}
  		GeoData g = _collection.Terminate();
  		if (g.IsEmpty())
  		{
  			return new SqlGeometry(_collection.Srid);
  		}
  		return SqlGeometry.Construct(GLNativeMethods.ConvexHull(g), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		_collection.Write(w);
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [SqlUserDefinedAggregate(Format.UserDefined, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = false, MaxByteSize = -1)]
  public class GeometryCollectionAggregate : IBinarySerialize, IAggregate<SqlGeometry>
  {
  	private CollectionAggregate _collection;

  	public void Init()
  	{
  		_collection.Init(Flags.StripTopLevelCollection);
  	}

  	public void Accumulate(SqlGeometry g)
  	{
  		if (!g.IsNull)
  		{
  			g.ThrowIfInvalid();
  			_collection.Accumulate(g.GeoData, g.Srid);
  		}
  	}

  	public void Merge(GeometryCollectionAggregate group)
  	{
  		_collection.Merge(group._collection);
  	}

  	public SqlGeometry Terminate()
  	{
  		if (_collection.IsNull)
  		{
  			return SqlGeometry.Null;
  		}
  		return SqlGeometry.Construct(_collection.Terminate(), _collection.Srid);
  	}

  	public void Read(BinaryReader r)
  	{
  		_collection.Read(r);
  	}

  	public void Write(BinaryWriter w)
  	{
  		_collection.Write(w);
  	}
  }
  [Flags]
  internal enum Flags
  {
  	None = 0,
  	StripZM = 1,
  	StripTopLevelCollection = 2,
  	StripEmpty = 3
  }
  internal struct CollectionAggregate
  {
  	private const int NO_SRID = -1;

  	private const int ERROR = -2;

  	private int _srid;

  	private GeoDataBuilder _builder;

  	private bool _stripZM;

  	private bool _stripTopLevelCollection;

  	private bool _stripEmpty;

  	public int Srid => _srid;

  	public bool IsNull => _srid < 0;

  	public void Init(Flags flags)
  	{
  		_srid = -1;
  		_builder = null;
  		_stripZM = (flags & Flags.StripZM) == Flags.StripZM;
  		_stripTopLevelCollection = (flags & Flags.StripTopLevelCollection) == Flags.StripTopLevelCollection;
  		_stripEmpty = (flags & Flags.StripEmpty) == Flags.StripEmpty;
  	}

  	public void Accumulate(GeoData g, int srid)
  	{
  		Reset(srid);
  		if (_srid != -2 && (!_stripEmpty || !g.IsEmpty()))
  		{
  			if (_stripTopLevelCollection && g.GetGType() == OpenGisType.GeometryCollection)
  			{
  				g.PopulateRaw(_builder);
  			}
  			else
  			{
  				g.Populate(_builder);
  			}
  		}
  	}

  	public void AccumulateForGeometryConvexHull(GeoData g, int srid)
  	{
  		if (_srid == -2)
  		{
  			return;
  		}
  		Reset(srid);
  		int pointCount = g.GetPointCount();
  		if (pointCount > 1 && !g.ContainsCurvedShapes())
  		{
  			_builder.BeginGeo(OpenGisType.LineString);
  			_builder.BeginFigure();
  			for (int i = 0; i < pointCount; i++)
  			{
  				_builder.AddLine(g.GetPoint(i));
  			}
  			_builder.EndFigure();
  			_builder.EndGeo();
  		}
  		else if (!g.IsEmpty())
  		{
  			g.Populate(_builder);
  		}
  	}

  	public void AccumulateForGeographyConvexHull(GeoData g, int srid)
  	{
  		if (_srid == -2)
  		{
  			return;
  		}
  		Reset(srid);
  		int pointCount = g.GetPointCount();
  		if (pointCount > 1 && !g.ContainsCurvedShapes())
  		{
  			_builder.BeginGeo(OpenGisType.LineString);
  			_builder.BeginFigure();
  			for (int i = 0; i < pointCount; i++)
  			{
  				_builder.AddLine(g.GetPoint(i));
  			}
  			_builder.EndFigure();
  			_builder.EndGeo();
  		}
  		else if (!g.IsEmpty())
  		{
  			g.Populate(_builder);
  		}
  	}

  	public void Reset(int srid)
  	{
  		if (_srid == -1 && srid >= 0)
  		{
  			_srid = srid;
  			_builder = new GeoDataBuilder(_stripZM);
  			_builder.BeginGeo(OpenGisType.GeometryCollection);
  		}
  		else if (srid != _srid)
  		{
  			_srid = -2;
  			_builder = null;
  		}
  	}

  	public void Merge(CollectionAggregate group)
  	{
  		if (_srid != -2 && group._srid != -1)
  		{
  			if (group._srid == -2)
  			{
  				_srid = -2;
  				return;
  			}
  			Reset(group._srid);
  			group.Terminate().PopulateRaw(_builder);
  		}
  	}

  	public GeoData Terminate()
  	{
  		_builder.EndGeo();
  		GeoData constructedGeoData = _builder.ConstructedGeoData;
  		constructedGeoData.SetIsValid(fValid: true);
  		return constructedGeoData;
  	}

  	public void Read(BinaryReader r)
  	{
  		_srid = r.ReadInt32();
  		if (_srid >= 0)
  		{
  			_builder = new GeoDataBuilder();
  			_builder.BeginGeo(OpenGisType.GeometryCollection);
  			GeoData geoData = default(GeoData);
  			geoData.Read(r, SerializationVersion.SQL11_Fullglobe, null, isGeography: false);
  			geoData.PopulateRaw(_builder);
  		}
  		else
  		{
  			_builder = null;
  		}
  	}

  	public void Write(BinaryWriter w)
  	{
  		w.Write(_srid);
  		if (_srid >= 0)
  		{
  			_builder.EndGeo();
  			GeoData constructedGeoData = _builder.ConstructedGeoData;
  			constructedGeoData.SetIsKatmaiCompatible(value: false);
  			constructedGeoData.Write(w);
  			_srid = -1;
  			_builder = null;
  		}
  	}
  }
  [Serializable]
  [StructLayout(LayoutKind.Sequential)]
  [SqlUserDefinedAggregate(Format.Native, IsInvariantToDuplicates = true, IsInvariantToNulls = true, IsInvariantToOrder = true, IsNullIfEmpty = true)]
  public class GeometryEnvelopeAggregate : IAggregate<SqlGeometry>
  {
  	private const int NO_SRID = -1;

  	private double _minX;

  	private double _maxX;

  	private double _minY;

  	private double _maxY;

  	private int _srid;

  	private bool _failed;

  	public void Init()
  	{
  		_minX = (_minY = double.PositiveInfinity);
  		_maxX = (_maxY = double.NegativeInfinity);
  		_srid = -1;
  		_failed = false;
  	}

  	public void Accumulate(SqlGeometry g)
  	{
  		if (g.IsNull)
  		{
  			return;
  		}
  		g.ThrowIfInvalid();
  		if (_failed)
  		{
  			return;
  		}
  		if (_srid != -1 && _srid != g.Srid)
  		{
  			_failed = true;
  			return;
  		}
  		_srid = g.Srid;
  		if (g.GeoData.GetPointCount() > 0)
  		{
  			GLNativeMethods.GetBounds(g.GeoData, out var minX, out var minY, out var maxX, out var maxY);
  			Update(minX, minY, maxX, maxY);
  		}
  	}

  	private void Update(double minX, double minY, double maxX, double maxY)
  	{
  		_minX = Math.Min(_minX, minX);
  		_maxX = Math.Max(_maxX, maxX);
  		_minY = Math.Min(_minY, minY);
  		_maxY = Math.Max(_maxY, maxY);
  	}

  	public void Merge(GeometryEnvelopeAggregate group)
  	{
  		if (!_failed && group._srid != -1)
  		{
  			if (group._failed)
  			{
  				_failed = true;
  			}
  			else if (_srid == -1)
  			{
  				_srid = group._srid;
  				_minX = group._minX;
  				_maxX = group._maxX;
  				_minY = group._minY;
  				_maxY = group._maxY;
  			}
  			else if (_srid != group._srid)
  			{
  				_failed = true;
  			}
  			else
  			{
  				Update(group._minX, group._minY, group._maxX, group._maxY);
  			}
  		}
  	}

  	public SqlGeometry Terminate()
  	{
  		if (_failed || _srid == -1)
  		{
  			return SqlGeometry.Null;
  		}
  		if (_minX == double.PositiveInfinity)
  		{
  			return new SqlGeometry(_srid);
  		}
  		GeoData.SeparateBounds(ref _minX, ref _minY, ref _maxX, ref _maxY);
  		return SqlGeometry.Construct(GeoData.ConstructRectangle(_minX, _minY, _maxX, _maxY), _srid);
  	}
  }
  internal interface IAggregate<T>
  {
  	void Init();

  	void Accumulate(T operand);

  	T Terminate();
  }
  internal static class Aggregates
  {
  	public static T Execute<T>(IAggregate<T> aggregate, IEnumerable<T> operands) where T : INullable
  	{
  		aggregate.Init();
  		foreach (T operand in operands)
  		{
  			if (operand != null)
  			{
  				aggregate.Accumulate(operand);
  			}
  		}
  		return aggregate.Terminate();
  	}
  }
  internal class GeoDataBuilder : GeoDataSink
  {
  	private enum BuilderState
  	{
  		Start,
  		BuildingFigure,
  		StartingSegment,
  		End
  	}

  	private static readonly GeoData ms_emptyGeoData;

  	private static readonly GeoData ms_fullGlobeGeoData;

  	private readonly List<Point> m_points = new List<Point>();

  	private readonly bool m_ignoreZM;

  	private List<double> m_zValues;

  	private List<double> m_mValues;

  	private List<Segment> m_segments;

  	private readonly List<Figure> m_figures = new List<Figure>();

  	private readonly List<Shape> m_shapes = new List<Shape>();

  	private readonly Stack<int> m_stackParents = new Stack<int>();

  	private BuilderState m_state;

  	private SegmentType m_nextSegment;

  	private FigureAttributes m_nextFigureAttribute;

  	public static GeoData EmptyGeoData => ms_emptyGeoData;

  	public static GeoData FullGlobeGeoData => ms_fullGlobeGeoData;

  	public GeoData ConstructedGeoData
  	{
  		get
  		{
  			m_state = BuilderState.End;
  			if (m_points.Count <= 0)
  			{
  				return new GeoData(null, null, m_shapes.ToArray());
  			}
  			double[] zValues = ((m_zValues == null) ? null : m_zValues.ToArray());
  			double[] mValues = ((m_mValues == null) ? null : m_mValues.ToArray());
  			Segment[] mSegments = ((m_segments == null || m_segments.Count == 0) ? null : m_segments.ToArray());
  			return new GeoData(m_points.ToArray(), m_figures.ToArray(), m_shapes.ToArray(), zValues, mValues, mSegments);
  		}
  	}

  	static GeoDataBuilder()
  	{
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		geoDataBuilder.BeginGeo(OpenGisType.GeometryCollection);
  		geoDataBuilder.EndGeo();
  		ms_emptyGeoData = geoDataBuilder.ConstructedGeoData;
  		ms_emptyGeoData.SetIsValid(fValid: true);
  		GeoDataBuilder geoDataBuilder2 = new GeoDataBuilder();
  		geoDataBuilder2.BeginGeo(OpenGisType.FullGlobe);
  		geoDataBuilder2.EndGeo();
  		ms_fullGlobeGeoData = geoDataBuilder2.ConstructedGeoData;
  		ms_fullGlobeGeoData.SetIsValid(fValid: true);
  		ms_fullGlobeGeoData.SetIsKatmaiCompatible(value: false);
  	}

  	public GeoDataBuilder()
  	{
  		m_stackParents.Push(-1);
  	}

  	public GeoDataBuilder(bool ignoreZM)
  	{
  		m_stackParents.Push(-1);
  		m_ignoreZM = ignoreZM;
  	}

  	public void SetSrid(int srid)
  	{
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		Shape obj = default(Shape);
  		obj.parentOffset = m_stackParents.Peek();
  		obj.figureOffset = -1;
  		obj.type = type;
  		if (type == OpenGisType.CompoundCurve && m_segments == null)
  		{
  			m_segments = new List<Segment>();
  		}
  		else if (type == OpenGisType.CurvePolygon)
  		{
  			m_nextFigureAttribute = FigureAttributes.None;
  		}
  		m_stackParents.Push(m_shapes.Count);
  		m_shapes.AddSafe(obj);
  	}

  	public void BeginFigure()
  	{
  		FigureAttributes figureAttributes = FigureAttributes.Line;
  		if (m_shapes[m_shapes.Count - 1].type == OpenGisType.CircularString)
  		{
  			figureAttributes = FigureAttributes.Arc;
  		}
  		else if (m_shapes[m_shapes.Count - 1].type == OpenGisType.CompoundCurve)
  		{
  			figureAttributes = FigureAttributes.Curve;
  		}
  		else if (m_shapes[m_shapes.Count - 1].type == OpenGisType.CurvePolygon)
  		{
  			figureAttributes = m_nextFigureAttribute;
  			if (figureAttributes == FigureAttributes.Curve && m_segments == null)
  			{
  				m_segments = new List<Segment>();
  			}
  		}
  		Figure obj = default(Figure);
  		obj.figureAttribute = figureAttributes;
  		obj.pointOffset = m_points.Count;
  		if (figureAttributes == FigureAttributes.Curve)
  		{
  			if (m_state != BuilderState.StartingSegment)
  			{
  				m_nextSegment = SegmentType.FirstLine;
  				m_state = BuilderState.StartingSegment;
  			}
  		}
  		else
  		{
  			TransitionState(BuilderState.Start, BuilderState.BuildingFigure);
  		}
  		m_figures.AddSafe(obj);
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		BeginFigure();
  		AddPoint(x, y, z, m);
  	}

  	public void AddLine(Point point)
  	{
  		m_points.AddSafe(point);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		if (m_state == BuilderState.StartingSegment)
  		{
  			TransitionState(BuilderState.StartingSegment, BuilderState.BuildingFigure);
  			m_segments.AddSafe(new Segment(m_nextSegment));
  		}
  		else if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.Curve)
  		{
  			if (m_segments[m_segments.Count - 1].type == SegmentType.Arc || m_segments[m_segments.Count - 1].type == SegmentType.FirstArc)
  			{
  				m_segments.AddSafe(new Segment(SegmentType.FirstLine));
  			}
  			else
  			{
  				m_segments.AddSafe(new Segment(SegmentType.Line));
  			}
  		}
  		else if (m_shapes[m_shapes.Count - 1].type == OpenGisType.CurvePolygon)
  		{
  			if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.None)
  			{
  				Figure value = m_figures[m_figures.Count - 1];
  				value.figureAttribute = FigureAttributes.Line;
  				m_figures[m_figures.Count - 1] = value;
  			}
  			else if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.Arc)
  			{
  				Figure value2 = m_figures[m_figures.Count - 1];
  				value2.figureAttribute = FigureAttributes.Curve;
  				if (m_segments == null)
  				{
  					m_segments = new List<Segment>();
  				}
  				m_figures[m_figures.Count - 1] = value2;
  				m_segments.AddSafe(new Segment(SegmentType.FirstArc));
  				for (int i = value2.pointOffset + 3; i < m_points.Count; i += 2)
  				{
  					m_segments.AddSafe(new Segment(SegmentType.Arc));
  				}
  				m_segments.AddSafe(new Segment(SegmentType.FirstLine));
  			}
  		}
  		EnsureState(BuilderState.BuildingFigure);
  		AddPoint(x, y, z, m);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		if (m_state == BuilderState.StartingSegment)
  		{
  			TransitionState(BuilderState.StartingSegment, BuilderState.BuildingFigure);
  			if (m_nextSegment == SegmentType.FirstLine)
  			{
  				m_nextSegment = SegmentType.FirstArc;
  			}
  			m_segments.AddSafe(new Segment(m_nextSegment));
  		}
  		else if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.Curve)
  		{
  			if (m_segments[m_segments.Count - 1].type == SegmentType.Line || m_segments[m_segments.Count - 1].type == SegmentType.FirstLine)
  			{
  				m_segments.AddSafe(new Segment(SegmentType.FirstArc));
  			}
  			else
  			{
  				m_segments.AddSafe(new Segment(SegmentType.Arc));
  			}
  		}
  		else if (m_shapes[m_shapes.Count - 1].type == OpenGisType.CurvePolygon)
  		{
  			if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.None)
  			{
  				Figure value = m_figures[m_figures.Count - 1];
  				value.figureAttribute = FigureAttributes.Arc;
  				m_figures[m_figures.Count - 1] = value;
  			}
  			else if (m_figures[m_figures.Count - 1].figureAttribute == FigureAttributes.Line)
  			{
  				Figure value2 = m_figures[m_figures.Count - 1];
  				value2.figureAttribute = FigureAttributes.Curve;
  				if (m_segments == null)
  				{
  					m_segments = new List<Segment>();
  				}
  				m_figures[m_figures.Count - 1] = value2;
  				m_segments.AddSafe(new Segment(SegmentType.FirstLine));
  				for (int i = value2.pointOffset + 2; i < m_points.Count; i++)
  				{
  					m_segments.AddSafe(new Segment(SegmentType.Line));
  				}
  				m_segments.AddSafe(new Segment(SegmentType.FirstArc));
  			}
  		}
  		EnsureState(BuilderState.BuildingFigure);
  		AddPoint(x1, y1, z1, m1);
  		AddPoint(x2, y2, z2, m2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		TransitionState(BuilderState.Start, BuilderState.BuildingFigure, BuilderState.StartingSegment);
  		m_nextSegment = type;
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		m_nextFigureAttribute = type;
  	}

  	public void EndFigure()
  	{
  		AssignFigureToShape(m_figures.Count - 1, m_shapes.Count - 1);
  		if (m_shapes[m_shapes.Count - 1].type == OpenGisType.Polygon)
  		{
  			m_points[m_points.Count - 1] = m_points[m_figures[m_figures.Count - 1].pointOffset];
  		}
  		TransitionState(BuilderState.BuildingFigure, BuilderState.Start);
  	}

  	public void EndGeo()
  	{
  		m_stackParents.Pop();
  	}

  	public void Finish()
  	{
  	}

  	private void AssignFigureToShape(int iFigureIndex, int iShapeIndex)
  	{
  		do
  		{
  			if (m_shapes[iShapeIndex].figureOffset == -1)
  			{
  				Shape value = m_shapes[iShapeIndex];
  				value.figureOffset = iFigureIndex;
  				m_shapes[iShapeIndex] = value;
  			}
  			iShapeIndex = m_shapes[iShapeIndex].parentOffset;
  		}
  		while (iShapeIndex != -1);
  	}

  	private void AddPoint(double x, double y, double? z, double? m)
  	{
  		m_points.AddSafe(new Point(x, y));
  		if (!m_ignoreZM)
  		{
  			AddPointProperty(ref m_zValues, z);
  			AddPointProperty(ref m_mValues, m);
  		}
  	}

  	private void AddPointProperty(ref List<double> list, double? d)
  	{
  		if (d.HasValue && list == null)
  		{
  			list = new List<double>(m_points.Count);
  			for (int i = 0; i < m_points.Count - 1; i++)
  			{
  				list.Add(double.NaN);
  			}
  		}
  		if (list != null)
  		{
  			list.Add(d.HasValue ? d.Value : double.NaN);
  		}
  	}

  	private void EnsureState(BuilderState state)
  	{
  	}

  	private void TransitionState(BuilderState from, BuilderState to)
  	{
  		m_state = to;
  	}

  	private void TransitionState(BuilderState from1, BuilderState from2, BuilderState to)
  	{
  		m_state = to;
  	}
  }
  internal struct GeoMarshalData
  {
  	public IntPtr points;

  	public int cPoints;

  	public IntPtr zValues;

  	public IntPtr mValues;

  	public IntPtr figures;

  	public int cFigures;

  	public IntPtr shapes;

  	public int cShapes;

  	public IntPtr segments;

  	public int cSegments;

  	public byte isValid;

  	public byte isLargerThanAHemisphere;
  }
  [StructLayout(LayoutKind.Sequential)]
  [SecurityTreatAsSafe]
  [SecurityCritical(SecurityCriticalScope.Everything)]
  internal class GeoDataPinningAllocator : IDisposable
  {
  	public delegate void AllocAndPinGeometryDelegate(int cPoints, int cFigures, int cShapes, int cSegments, GeoDataPinningAllocator self, out GeoMarshalData allocatedGeometry);

  	public delegate void SetIsLargerThanAHemisphereDelegate(byte isLargerThanAHemisphere, GeoDataPinningAllocator self);

  	private AllocAndPinGeometryDelegate _allocDelegate;

  	private SetIsLargerThanAHemisphereDelegate _largeThanAHemisphereDelegate;

  	private GCHandle _gchGeoDataPinner;

  	private bool _disposed;

  	public GeoData Geometry => ((GeoDataPinner)_gchGeoDataPinner.Target).GetGeoData();

  	public GeoDataPinningAllocator()
  	{
  		_allocDelegate = AllocAndPinGeometry;
  		_largeThanAHemisphereDelegate = SetIsLargerThanAHemisphere;
  		_gchGeoDataPinner = GCHandle.Alloc(new GeoDataPinner());
  	}

  	public void Dispose()
  	{
  		if (!_disposed)
  		{
  			((GeoDataPinner)_gchGeoDataPinner.Target).Dispose();
  			_gchGeoDataPinner.Free();
  			_disposed = true;
  		}
  	}

  	public static void AllocAndPinGeometry(int cPoints, int cFigures, int cShapes, int cSegments, GeoDataPinningAllocator self, out GeoMarshalData allocatedGeometry)
  	{
  		allocatedGeometry = self.AllocAndPinGeometry(cPoints, cFigures, cShapes, cSegments);
  	}

  	private GeoMarshalData AllocAndPinGeometry(int cPoints, int cFigures, int cShapes, int cSegments)
  	{
  		GeoDataPinner obj = (GeoDataPinner)_gchGeoDataPinner.Target;
  		obj.Release();
  		GeoData geo = new GeoData(cPoints, cFigures, cShapes, cSegments);
  		geo.SetIsValid(fValid: true);
  		geo.SetIsLargerThanAHemisphere(value: false);
  		return obj.Pin(geo);
  	}

  	public static void SetIsLargerThanAHemisphere(byte isLargerThanAHemisphere, GeoDataPinningAllocator self)
  	{
  		self.SetIsLargerThanAHemisphere(isLargerThanAHemisphere);
  	}

  	private void SetIsLargerThanAHemisphere(byte isLargerThanAHemisphere)
  	{
  		((GeoDataPinner)_gchGeoDataPinner.Target).SetIsLargerThanAHemisphere(isLargerThanAHemisphere);
  	}
  }
  [SecurityTreatAsSafe]
  [SecurityCritical(SecurityCriticalScope.Everything)]
  internal class ArrayPinner : IDisposable
  {
  	private bool _disposed;

  	private GCHandle _gchArray;

  	public Array PinnedArray => (Array)_gchArray.Target;

  	public ArrayPinner(Array a)
  	{
  		_gchArray = GCHandle.Alloc(a, GCHandleType.Pinned);
  	}

  	public IntPtr AddressOfPinnedArray()
  	{
  		return Marshal.UnsafeAddrOfPinnedArrayElement(PinnedArray, 0);
  	}

  	public void Dispose()
  	{
  		if (!_disposed)
  		{
  			if (_gchArray.IsAllocated)
  			{
  				_gchArray.Free();
  			}
  			_disposed = true;
  		}
  	}
  }
  [StructLayout(LayoutKind.Sequential)]
  [SecurityTreatAsSafe]
  [SecurityCritical(SecurityCriticalScope.Everything)]
  internal class GeoDataPinner : IDisposable
  {
  	private ArrayPinner _pointsPinner;

  	private ArrayPinner _zvaluesPinner;

  	private ArrayPinner _mvaluesPinner;

  	private ArrayPinner _figuresPinner;

  	private ArrayPinner _shapesPinner;

  	private ArrayPinner _segmentsPinner;

  	private byte _isValid;

  	private byte _isLargerThanAHemisphere;

  	private bool _disposed;

  	public GeoMarshalData Pin(GeoData geo)
  	{
  		GeoMarshalData result = default(GeoMarshalData);
  		if (geo.GetPoints() != null)
  		{
  			result.cPoints = geo.GetPoints().Length;
  			_pointsPinner = new ArrayPinner(geo.GetPoints());
  			result.points = _pointsPinner.AddressOfPinnedArray();
  		}
  		if (geo.GetZValues() != null)
  		{
  			_zvaluesPinner = new ArrayPinner(geo.GetZValues());
  			result.zValues = _zvaluesPinner.AddressOfPinnedArray();
  		}
  		if (geo.GetMValues() != null)
  		{
  			_mvaluesPinner = new ArrayPinner(geo.GetMValues());
  			result.mValues = _mvaluesPinner.AddressOfPinnedArray();
  		}
  		if (geo.GetFigures() != null)
  		{
  			result.cFigures = geo.GetFigures().Length;
  			_figuresPinner = new ArrayPinner(geo.GetFigures());
  			result.figures = _figuresPinner.AddressOfPinnedArray();
  		}
  		result.cShapes = geo.GetShapes().Length;
  		_shapesPinner = new ArrayPinner(geo.GetShapes());
  		result.shapes = _shapesPinner.AddressOfPinnedArray();
  		if (geo.GetSegments() != null)
  		{
  			result.cSegments = geo.GetSegments().Length;
  			_segmentsPinner = new ArrayPinner(geo.GetSegments());
  			result.segments = _segmentsPinner.AddressOfPinnedArray();
  		}
  		result.isValid = (_isValid = (byte)(geo.GetIsValid() ? 1 : 0));
  		result.isLargerThanAHemisphere = (_isLargerThanAHemisphere = (byte)(geo.GetIsLargerThanAHemisphere() ? 1 : 0));
  		return result;
  	}

  	public void SetIsLargerThanAHemisphere(byte isLargerThanAHemisphere)
  	{
  		_isLargerThanAHemisphere = isLargerThanAHemisphere;
  	}

  	public GeoData GetGeoData()
  	{
  		Point[] points = ((_pointsPinner != null) ? ((Point[])_pointsPinner.PinnedArray) : null);
  		Figure[] figures = ((_figuresPinner != null) ? ((Figure[])_figuresPinner.PinnedArray) : null);
  		Shape[] shapes = ((_shapesPinner != null) ? ((Shape[])_shapesPinner.PinnedArray) : null);
  		double[] zValues = ((_zvaluesPinner != null) ? ((double[])_zvaluesPinner.PinnedArray) : null);
  		double[] mValues = ((_mvaluesPinner != null) ? ((double[])_mvaluesPinner.PinnedArray) : null);
  		Segment[] mSegments = ((_segmentsPinner != null) ? ((Segment[])_segmentsPinner.PinnedArray) : null);
  		GeoData result = new GeoData(points, figures, shapes, zValues, mValues, mSegments);
  		result.SetIsValid(_isValid == 1);
  		result.SetIsLargerThanAHemisphere(_isLargerThanAHemisphere == 1);
  		return result;
  	}

  	public void Release()
  	{
  		if (_pointsPinner != null)
  		{
  			_pointsPinner.Dispose();
  			_pointsPinner = null;
  		}
  		if (_zvaluesPinner != null)
  		{
  			_zvaluesPinner.Dispose();
  			_zvaluesPinner = null;
  		}
  		if (_mvaluesPinner != null)
  		{
  			_mvaluesPinner.Dispose();
  			_mvaluesPinner = null;
  		}
  		if (_segmentsPinner != null)
  		{
  			_segmentsPinner.Dispose();
  			_segmentsPinner = null;
  		}
  		if (_figuresPinner != null)
  		{
  			_figuresPinner.Dispose();
  			_figuresPinner = null;
  		}
  		if (_shapesPinner != null)
  		{
  			_shapesPinner.Dispose();
  			_shapesPinner = null;
  		}
  	}

  	public void Dispose()
  	{
  		if (!_disposed)
  		{
  			Release();
  			_disposed = true;
  		}
  	}
  }
  internal class ErrorMessageProvider
  {
  	[DllImport("kernel32.dll")]
  	public static extern void CopyMemory(IntPtr dest, IntPtr src, int count);

  	private static string GetResourceFormatString(string resourceName)
  	{
  		return (string)typeof(SpatialRes).GetProperty(resourceName, BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetProperty).GetValue(null, null);
  	}

  	private unsafe static void CopyOutputMessage(string message, IntPtr pMessage, IntPtr pcbMessage)
  	{
  		*(int*)(void*)pcbMessage = Math.Min(message.Length * 2, *(int*)(void*)pcbMessage);
  		IntPtr intPtr = Marshal.StringToCoTaskMemUni(message);
  		CopyMemory(pMessage, intPtr, *(int*)(void*)pcbMessage);
  		Marshal.FreeCoTaskMem(intPtr);
  	}

  	internal unsafe static void FormatErrorMessage(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage)
  	{
  		CopyOutputMessage(GetResourceFormatString(Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName)), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatErrorMessageDoubleArg(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage, IntPtr pArg1)
  	{
  		double num = *(double*)(void*)pArg1;
  		string resourceName = Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName);
  		CopyOutputMessage(string.Format(CultureInfo.InvariantCulture, GetResourceFormatString(resourceName), num), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatErrorMessageDoubleStringArg(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage, IntPtr pArg1, IntPtr pcwsArg2, IntPtr cwsArg2)
  	{
  		double num = *(double*)(void*)pArg1;
  		string arg = Marshal.PtrToStringUni(pcwsArg2, *(int*)(void*)cwsArg2);
  		string resourceName = Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName);
  		CopyOutputMessage(string.Format(CultureInfo.InvariantCulture, GetResourceFormatString(resourceName), num, arg), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatErrorMessageIntArg(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage, IntPtr pArg1)
  	{
  		int num = *(int*)(void*)pArg1;
  		string resourceName = Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName);
  		CopyOutputMessage(string.Format(CultureInfo.InvariantCulture, GetResourceFormatString(resourceName), num), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatErrorMessageStringIntIntArg(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage, IntPtr pcwsArg1, IntPtr cwsArg1, IntPtr pArg2, IntPtr pArg3)
  	{
  		string arg = Marshal.PtrToStringUni(pcwsArg1, *(int*)(void*)cwsArg1);
  		int num = *(int*)(void*)pArg2;
  		int num2 = *(int*)(void*)pArg3;
  		string resourceName = Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName);
  		CopyOutputMessage(string.Format(CultureInfo.InvariantCulture, GetResourceFormatString(resourceName), arg, num, num2), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatErrorMessageIntWCharArg(IntPtr pcwsResourceName, IntPtr cwsResourceName, IntPtr pMessage, IntPtr pcbMessage, IntPtr pArg1, IntPtr pArg2)
  	{
  		int num = *(int*)(void*)pArg1;
  		char c = *(char*)(void*)pArg2;
  		string resourceName = Marshal.PtrToStringUni(pcwsResourceName, *(int*)(void*)cwsResourceName);
  		CopyOutputMessage(string.Format(CultureInfo.InvariantCulture, GetResourceFormatString(resourceName), num, c), pMessage, pcbMessage);
  	}

  	internal unsafe static void FormatExceptionMessage(IntPtr pcwsExceptionType, IntPtr cwsExceptionType, IntPtr pMessage, IntPtr pcbMessage)
  	{
  		Type type = Type.GetType(Marshal.PtrToStringUni(pcwsExceptionType, *(int*)(void*)cwsExceptionType), throwOnError: false);
  		Exception ex = null;
  		if (type != null)
  		{
  			ex = Activator.CreateInstance(type) as Exception;
  		}
  		if (ex == null)
  		{
  			ex = new ArgumentException();
  		}
  		CopyOutputMessage(ex.Message, pMessage, pcbMessage);
  	}
  }
  internal class GLArgumentException : ArgumentException
  {
  	private GL_HResult _errorCode;

  	public GL_HResult Result => _errorCode;

  	public GLArgumentException(GL_HResult errorCode, string message)
  		: base(message)
  	{
  		_errorCode = errorCode;
  	}
  }
  [SecurityTreatAsSafe]
  [SecurityCritical(SecurityCriticalScope.Everything)]
  [SuppressUnmanagedCodeSecurity]
  internal class GLNativeMethods
  {
  	private enum GLLibraryState
  	{
  		Loaded,
  		NotFound,
  		NotSupported
  	}

  	private enum CombineMode
  	{
  		Union,
  		Intersect,
  		XOr,
  		Exclude
  	}

  	private const string GlLibraryName = "SqlServerSpatial160.dll";

  	private const int IntersectionPatternMatrixLength = 9;

  	private const int DefaultClrFeatureSwitches = 0;

  	private static readonly (GLLibraryState GLState, string ErrorMsg) State;

  	[DllImport("kernel32", SetLastError = true)]
  	private static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, uint dwFlags);

  	static GLNativeMethods()
  	{
  		if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
  		{
  			State = (GLState: GLLibraryState.NotSupported, ErrorMsg: string.Empty);
  			return;
  		}
  		try
  		{
  			SetClrFeatureSwitchMap(0);
  			State = (GLState: GLLibraryState.Loaded, ErrorMsg: string.Empty);
  		}
  		catch (Exception ex)
  		{
  			State = ((LoadLibraryEx(Path.Combine(Environment.Is64BitProcess ? "x64" : "x86", "SqlServerSpatial160.dll"), IntPtr.Zero, 0u) != IntPtr.Zero) ? (GLState: GLLibraryState.Loaded, ErrorMsg: string.Empty) : (GLState: GLLibraryState.NotFound, ErrorMsg: CombineErrorCodes(Marshal.GetLastWin32Error(), ex.HResult)));
  		}
  	}

  	private static string CombineErrorCodes(int lastWin32Error, int previousHResult)
  	{
  		return $"{lastWin32Error} (HResult: 0x{previousHResult:x8})";
  	}

  	private static void ThowIfGLNativeLibraryNotLoaded()
  	{
  		switch (State.GLState)
  		{
  		case GLLibraryState.Loaded:
  			break;
  		case GLLibraryState.NotFound:
  			throw new FileNotFoundException(string.Format(SpatialRes.StrGLLibraryNotLoaded, State.ErrorMsg));
  		case GLLibraryState.NotSupported:
  		{
  			string arg = $"{RuntimeInformation.OSDescription} - {RuntimeInformation.OSArchitecture}";
  			throw new PlatformNotSupportedException(string.Format(SpatialRes.StrPlatformNotSupported, arg));
  		}
  		}
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern void SetClrFeatureSwitchMap([In] int clrFeatureSwitchMap);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Combine(CombineMode combineMode, [In] GeoMarshalData g1, [In] GeoMarshalData g2, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult ConvexHull([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Equals([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Intersects([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Touches([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Crosses([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Contains([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Overlaps([In] GeoMarshalData g1, [In] GeoMarshalData g2, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Relate([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] int[] intersectionPatternMatrix);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Length([In] GeoMarshalData g, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Area([In] GeoMarshalData g, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Centroid([In] GeoMarshalData g, out Point result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult PointOnSurface([In] GeoMarshalData g, out Point result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult IsSimple([In] GeoMarshalData g, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Buffer([In] GeoMarshalData g, [In] double distance, [In] double tolerance, [In][MarshalAs(UnmanagedType.U1)] bool returnCurves, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult SimpleBuffer([In] GeoMarshalData g, [In] double distance, [In] double tolerance, [In] bool fPerfromMakeValid, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Distance([In] GeoMarshalData g1, [In] GeoMarshalData g2, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult IsValid([In] GeoMarshalData g, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult IsValidDetailed([In] GeoMarshalData g, out ValidityState state, out uint detail1, out uint detail2, out uint entry);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult MakeValid([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Boundary([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult PlanarReduce([In] GeoMarshalData g, [In] double tolerance, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult CurveToLineWithTolerance([In] GeoMarshalData g, [In] double tolerance, [In] bool relative, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Envelope([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GetBounds([In] GeoMarshalData g, out double minX, out double minY, out double maxX, out double maxY);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticIsValid([In] GeoMarshalData g, [In] double eccentricity, [In] bool forceKatmai, [MarshalAs(UnmanagedType.U1)] out bool result, [MarshalAs(UnmanagedType.U1)] out bool isSmallerThanAHemisphere);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticIsValidDetailed([In] GeoMarshalData g, [In] double eccentricity, out ValidityState state, out uint detail1, out uint detail2, out uint entry);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticMakeValid([In] GeoMarshalData g, [In] double eccentricity, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticArea([In] GeoMarshalData g, [In] EllipsoidParameters ellipsoidParameters, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticLength([In] GeoMarshalData g, [In] EllipsoidParameters ellipsoidParameters, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticDistance([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] EllipsoidParameters ellipsoidParameters, [In] double tolerance, [In] bool relative, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticCombine(CombineMode combineMode, [In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] double eccentricity, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticEquals([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] double eccentricity, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticIntersects([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] double eccentricity, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticContains([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] double eccentricity, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticOverlaps([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] double eccentricity, [MarshalAs(UnmanagedType.U1)] out bool result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticBuffer([In] GeoMarshalData g, [In] EllipsoidParameters ellipsoidParameters, [In] double distance, [In] double tolerance, [In][MarshalAs(UnmanagedType.U1)] bool returnCurves, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticReduce([In] GeoMarshalData g, [In] EllipsoidParameters ellipsoidParameters, [In] double tolerance, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticAngleExtent([In] GeoMarshalData g, [In] double eccentricity, out double result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticCapCenter([In] GeoMarshalData g, [In] double eccentricity, out Point result);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticConvexHull([In] GeoMarshalData g, [In] double eccentricity, [In][Out] GeoDataPinningAllocator resultAllocator);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticCurveToLineWithTolerance([In] GeoMarshalData g, [In] EllipsoidParameters ellipsoidParameters, [In] double tolerance, [In] bool relative, [In][Out] GeoDataPinningAllocator resultAllocator);

  	private static void ThrowExceptionForHr(GL_HResult errorCode)
  	{
  		switch (errorCode)
  		{
  		case GL_HResult.GL_E_GEODETIC_RESULT_EXCEEDS_HEMISPHERE:
  			throw new GLArgumentException(errorCode, SpatialRes.StrInvalidGeographyInputHemisphere);
  		case GL_HResult.GL_E_GEODETIC_ANTIPODAL_ARGUMENTS:
  			throw new GLArgumentException(errorCode, SpatialRes.StrAntipodalEdge);
  		case GL_HResult.GL_E_GEODETIC_BUFFER_WRAPS_AROUND:
  			throw new GLArgumentException(errorCode, SpatialRes.StrBufferWouldWrapAround);
  		}
  		Marshal.ThrowExceptionForHR((int)errorCode);
  	}

  	public static void SetClrFeatureSwitches(int clrFeatureSwitchMap)
  	{
  		if (State.GLState == GLLibraryState.Loaded)
  		{
  			SetClrFeatureSwitchMap(clrFeatureSwitchMap);
  		}
  	}

  	private static GeoData Combine(CombineMode combineMode, GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Combine(combineMode, geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData Buffer(GeoData g, double distance, double tolerance, bool returnCurves)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Buffer(geoDataPinner.Pin(g), distance, tolerance, returnCurves, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData SimpleBuffer(GeoData g, double distance, double tolerance)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(SimpleBuffer(geoDataPinner.Pin(g), distance, tolerance, fPerfromMakeValid: true, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData ConvexHull(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(ConvexHull(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData Intersection(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return Combine(CombineMode.Intersect, g1, g2);
  	}

  	public static GeoData Union(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return Combine(CombineMode.Union, g1, g2);
  	}

  	public static GeoData Difference(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return Combine(CombineMode.Exclude, g1, g2);
  	}

  	public static GeoData SymDifference(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return Combine(CombineMode.XOr, g1, g2);
  	}

  	public static bool Equals(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Equals(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Intersects(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Intersects(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Touches(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Touches(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Crosses(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Crosses(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Contains(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Contains(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Overlaps(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Overlaps(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	public static bool Relate(GeoData g1, GeoData g2, string intersectionPatternMatrix)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		int[] intersectionPatternMatrix2 = GetIntersectionPatternMatrix(g1, g2);
  		char[] array = new char[4] { 'F', '0', '1', '2' };
  		bool flag = true;
  		for (int i = 0; i < 9 && flag; i++)
  		{
  			char c = array[intersectionPatternMatrix2[i] + 1];
  			flag = '*' == intersectionPatternMatrix[i] || ('T' == intersectionPatternMatrix[i] && c != 'F') || c == intersectionPatternMatrix[i];
  		}
  		return flag;
  	}

  	public static int[] GetIntersectionPatternMatrix(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		int[] array = new int[9];
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		using (new ArrayPinner(array))
  		{
  			ThrowExceptionForHr(Relate(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), array));
  			return array;
  		}
  	}

  	public static double Length(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(Length(geoDataPinner.Pin(g), out var result));
  		return result;
  	}

  	public static double Area(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(Area(geoDataPinner.Pin(g), out var result));
  		return result;
  	}

  	public static GeoData Centroid(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		Point result;
  		using (GeoDataPinner geoDataPinner = new GeoDataPinner())
  		{
  			ThrowExceptionForHr(Centroid(geoDataPinner.Pin(g), out result));
  		}
  		return new GeoData(result);
  	}

  	public static GeoData PointOnSurface(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		Point result;
  		using (GeoDataPinner geoDataPinner = new GeoDataPinner())
  		{
  			ThrowExceptionForHr(PointOnSurface(geoDataPinner.Pin(g), out result));
  		}
  		return new GeoData(result);
  	}

  	public static bool IsSimple(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(IsSimple(geoDataPinner.Pin(g), out var result));
  		return result;
  	}

  	public static double Distance(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(Distance(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), out var result));
  		return result;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GetGridCoverage([In] GeoMarshalData g, [In] double rGridMinX, [In] double rGridMinY, [In] double rGridWidth, [In] double rGridHeight, [In] double rFuzzX, [In] double rFuzzY, [In] int cGridRows, [In] int cGridColumns, [In] IntPtr ptrBoolAmbiguouslyTouched, [In] IntPtr ptrBoolTouched, [In] IntPtr ptrBoolContained, [MarshalAs(UnmanagedType.U1)] out bool fGeometryExceedsGrid);

  	public unsafe static void GetGridCoverage(GeoData g, double rGridMinX, double rGridMinY, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, bool[,] ambiguouslyTouched, bool[,] touched, bool[,] contained, out bool fGeometryExceedsGrid)
  	{
  		fixed (bool* value = ambiguouslyTouched)
  		{
  			fixed (bool* value2 = touched)
  			{
  				fixed (bool* value3 = contained)
  				{
  					fixed (Point* points = g.GetPoints())
  					{
  						fixed (double* zValues = g.GetZValues())
  						{
  							fixed (double* mValues = g.GetMValues())
  							{
  								fixed (Figure* figures = g.GetFigures())
  								{
  									fixed (Shape* shapes = g.GetShapes())
  									{
  										fixed (Segment* segments = g.GetSegments())
  										{
  											ThowIfGLNativeLibraryNotLoaded();
  											ThrowExceptionForHr(GetGridCoverage(MakeUnsafeGeoMarshalData(g, points, zValues, mValues, figures, shapes, segments), rGridMinX, rGridMinY, rGridWidth, rGridHeight, rFuzzX, rFuzzY, touched.GetLength(0), touched.GetLength(1), new IntPtr(value), new IntPtr(value2), new IntPtr(value3), out fGeometryExceedsGrid));
  										}
  									}
  								}
  							}
  						}
  					}
  				}
  			}
  		}
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticGridCoverage([In] GeoMarshalData g, [In] double eccentricity, [In] double rGridMinXNorth, [In] double rGridMinYNorth, [In] double rGridMinXSouth, [In] double rGridMinYSouth, [In] double rGridWidth, [In] double rGridHeight, [In] double rFuzzX, [In] double rFuzzY, [In] int cGridRows, [In] int cGridColumns, [In] bool fStitchNorthernMinRow, [In] bool fStitchNorthernMaxRow, [In] bool fStitchNorthernMinCol, [In] bool fStitchNorthernMaxCol, [In] IntPtr ptrBoolAmbiguouslyTouchedNorth, [In] IntPtr ptrBoolTouchedNorth, [In] IntPtr ptrBoolContainedNorth, [In] IntPtr ptrBoolAmbiguouslyTouchedSouth, [In] IntPtr ptrBoolTouchedSouth, [In] IntPtr ptrBoolContainedSouth);

  	public unsafe static void GeodeticGridCoverage(GeoData g, double eccentricity, double rGridMinXNorth, double rGridMinYNorth, double rGridMinXSouth, double rGridMinYSouth, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, bool fStitchNorthernMinRow, bool fStitchNorthernMaxRow, bool fStitchNorthernMinCol, bool fStitchNorthernMaxCol, bool* pointer_ambiguouslyTouchedNorth, bool* pointer_touchedNorth, bool* pointer_containedNorth, bool* pointer_ambiguouslyTouchedSouth, bool* pointer_touchedSouth, bool* pointer_containedSouth, int gridRows, int gridColumns)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		fixed (Point* points = g.GetPoints())
  		{
  			fixed (double* zValues = g.GetZValues())
  			{
  				fixed (double* mValues = g.GetMValues())
  				{
  					fixed (Figure* figures = g.GetFigures())
  					{
  						fixed (Shape* shapes = g.GetShapes())
  						{
  							fixed (Segment* segments = g.GetSegments())
  							{
  								ThrowExceptionForHr(GeodeticGridCoverage(MakeUnsafeGeoMarshalData(g, points, zValues, mValues, figures, shapes, segments), eccentricity, rGridMinXNorth, rGridMinYNorth, rGridMinXSouth, rGridMinYSouth, rGridWidth, rGridHeight, rFuzzX, rFuzzY, gridRows, gridColumns, fStitchNorthernMinRow, fStitchNorthernMaxRow, fStitchNorthernMinCol, fStitchNorthernMaxCol, new IntPtr(pointer_ambiguouslyTouchedNorth), new IntPtr(pointer_touchedNorth), new IntPtr(pointer_containedNorth), new IntPtr(pointer_ambiguouslyTouchedSouth), new IntPtr(pointer_touchedSouth), new IntPtr(pointer_containedSouth)));
  							}
  						}
  					}
  				}
  			}
  		}
  	}

  	public static bool IsValid(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(IsValid(geoDataPinner.Pin(g), out var result));
  		return result;
  	}

  	public static void IsValidDetailed(GeoData g, out ValidityState state, out uint detail1, out uint detail2, out uint entry)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(IsValidDetailed(geoDataPinner.Pin(g), out state, out detail1, out detail2, out entry));
  	}

  	public static GeoData MakeValid(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(MakeValid(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData Boundary(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Boundary(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData Reduce(GeoData g, double tolerance)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(PlanarReduce(geoDataPinner.Pin(g), tolerance, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData CurveToLineWithTolerance(GeoData g, double tolerance, bool relative)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(CurveToLineWithTolerance(geoDataPinner.Pin(g), tolerance, relative, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData Envelope(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Envelope(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static void GetBounds(GeoData g, out double minX, out double minY, out double maxX, out double maxY)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GetBounds(geoDataPinner.Pin(g), out minX, out minY, out maxX, out maxY));
  	}

  	public static bool GeodeticIsValid(ref GeoData g, double eccentricity, bool forceKatmai)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticIsValid(geoDataPinner.Pin(g), eccentricity, forceKatmai, out var result, out var isSmallerThanAHemisphere));
  		g.SetIsLargerThanAHemisphere(!isSmallerThanAHemisphere);
  		return result;
  	}

  	public static void GeodeticIsValidDetailed(GeoData g, double eccentricity, out ValidityState state, out uint detail1, out uint detail2, out uint entry)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticIsValidDetailed(geoDataPinner.Pin(g), eccentricity, out state, out detail1, out detail2, out entry));
  	}

  	public static GeoData GeodeticMakeValid(GeoData g, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticMakeValid(geoDataPinner.Pin(g), eccentricity, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static double GeodeticArea(GeoData g, EllipsoidParameters ellipsoidParameters)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticArea(geoDataPinner.Pin(g), ellipsoidParameters, out var result));
  		return result;
  	}

  	public static double GeodeticLength(GeoData g, EllipsoidParameters ellipsoidParameters)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticLength(geoDataPinner.Pin(g), ellipsoidParameters, out var result));
  		return result;
  	}

  	public static double GeodeticDistance(GeoData g1, GeoData g2, EllipsoidParameters ellipsoidParameters, double tolerance, bool relative)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticDistance(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), ellipsoidParameters, tolerance, relative, out var result));
  		return result;
  	}

  	private static GeoData GeodeticCombine(CombineMode combineMode, GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		using (new GeoDataPinner())
  		{
  			using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  			ThrowExceptionForHr(GeodeticCombine(combineMode, geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), eccentricity, geoDataPinningAllocator));
  			return geoDataPinningAllocator.Geometry;
  		}
  	}

  	public static GeoData GeodeticIntersection(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return GeodeticCombine(CombineMode.Intersect, g1, g2, eccentricity);
  	}

  	public static GeoData GeodeticUnion(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return GeodeticCombine(CombineMode.Union, g1, g2, eccentricity);
  	}

  	public static GeoData GeodeticDifference(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return GeodeticCombine(CombineMode.Exclude, g1, g2, eccentricity);
  	}

  	public static GeoData GeodeticSymDifference(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		return GeodeticCombine(CombineMode.XOr, g1, g2, eccentricity);
  	}

  	public static bool GeodeticEquals(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticEquals(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), eccentricity, out var result));
  		return result;
  	}

  	public static bool GeodeticIntersects(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticIntersects(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), eccentricity, out var result));
  		return result;
  	}

  	public static bool GeodeticContains(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticContains(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), eccentricity, out var result));
  		return result;
  	}

  	public static bool GeodeticOverlaps(GeoData g1, GeoData g2, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticOverlaps(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), eccentricity, out var result));
  		return result;
  	}

  	public static GeoData GeodeticReduce(GeoData g, EllipsoidParameters ellipsoidParameters, double tolerance)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticReduce(geoDataPinner.Pin(g), ellipsoidParameters, tolerance, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData GeodeticBuffer(GeoData g, EllipsoidParameters ellipsoidParameters, double distance, double tolerance, bool returnCurves)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticBuffer(geoDataPinner.Pin(g), ellipsoidParameters, distance, tolerance, returnCurves, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static double GeodeticAngleExtent(GeoData g, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticAngleExtent(geoDataPinner.Pin(g), eccentricity, out var result));
  		return result;
  	}

  	public static Point GeodeticCapCenter(GeoData g, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(GeodeticCapCenter(geoDataPinner.Pin(g), eccentricity, out var result));
  		return result;
  	}

  	public static GeoData GeodeticConvexHull(GeoData g, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticConvexHull(geoDataPinner.Pin(g), eccentricity, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	public static GeoData GeodeticCurveToLineWithTolerance(GeoData g, EllipsoidParameters ellipsoidParameters, double tolerance, bool relative)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticCurveToLineWithTolerance(geoDataPinner.Pin(g), ellipsoidParameters, tolerance, relative, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult ShortestLine([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData ShortestLineTo(GeoData g1, GeoData g2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(ShortestLine(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticShortestLine([In] GeoMarshalData g1, [In] GeoMarshalData g2, [In] EllipsoidParameters ellipsoidParameters, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData GeodeticShortestLineTo(GeoData g1, GeoData g2, EllipsoidParameters ellipsoidParameters)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinner geoDataPinner2 = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticShortestLine(geoDataPinner.Pin(g1), geoDataPinner2.Pin(g2), ellipsoidParameters, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult UpdateGeodeticEnvelope([In] GeoMarshalData g, [In] double eccentricity, [In][Out] ref Sphere sphere);

  	public static void UpdateGeodeticEnvelope(GeoData g, double eccentricity, ref Sphere sphere)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		ThrowExceptionForHr(UpdateGeodeticEnvelope(geoDataPinner.Pin(g), eccentricity, ref sphere));
  	}

  	[DllImport("SqlServerSpatial160.dll", EntryPoint = "GeodeticCapUnion")]
  	private static extern GL_HResult GeodeticCapUnionPriv([In][Out] ref Sphere sphere, Sphere sphere2);

  	public static void GeodeticCapUnion(ref Sphere sphere, Sphere sphere2)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		ThrowExceptionForHr(GeodeticCapUnionPriv(ref sphere, sphere2));
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticTile([In] GeoMarshalData g, [In] double eccentricity, [In] double scale, [In] bool north, [In] bool south, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData GeodeticTile(GeoData g, double eccentricity, double scale, bool north, bool south)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticTile(geoDataPinner.Pin(g), eccentricity, scale, north, south, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Tessellate([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData Tessellate(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Tessellate(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult GeodeticTessellate([In] GeoMarshalData g, [In] double eccentricity, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData GeodeticTessellate(GeoData g, double eccentricity)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(GeodeticTessellate(geoDataPinner.Pin(g), eccentricity, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Identity([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData Identity(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Identity(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult SingleSideReduce([In] GeoMarshalData g, [In] double relativeAreaDelta, [In] bool fPerfromMakeValid, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData SingleSideReduce(GeoData g, double relativeAreaDelta)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(SingleSideReduce(geoDataPinner.Pin(g), relativeAreaDelta, fPerfromMakeValid: true, geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	[DllImport("SqlServerSpatial160.dll")]
  	public static extern double GeodeticPointDistance([In] Point p1, [In] Point p2, [In] EllipsoidParameters ep);

  	[DllImport("SqlServerSpatial160.dll")]
  	private static extern GL_HResult Outline([In] GeoMarshalData g, [In][Out] GeoDataPinningAllocator resultAllocator);

  	public static GeoData Outline(GeoData g)
  	{
  		ThowIfGLNativeLibraryNotLoaded();
  		using GeoDataPinner geoDataPinner = new GeoDataPinner();
  		using GeoDataPinningAllocator geoDataPinningAllocator = new GeoDataPinningAllocator();
  		ThrowExceptionForHr(Outline(geoDataPinner.Pin(g), geoDataPinningAllocator));
  		return geoDataPinningAllocator.Geometry;
  	}

  	private unsafe static GeoMarshalData MakeUnsafeGeoMarshalData(GeoData g, Point* p_points, double* p_zValues, double* p_mValues, Figure* p_figures, Shape* p_shapes, Segment* p_segments)
  	{
  		GeoMarshalData result = default(GeoMarshalData);
  		if (p_points != null)
  		{
  			result.cPoints = g.GetPoints().Length;
  			result.points = new IntPtr(p_points);
  		}
  		if (p_zValues != null)
  		{
  			result.zValues = new IntPtr(p_zValues);
  		}
  		if (p_mValues != null)
  		{
  			result.mValues = new IntPtr(p_mValues);
  		}
  		if (p_figures != null)
  		{
  			result.cFigures = g.GetFigures().Length;
  			result.figures = new IntPtr(p_figures);
  		}
  		result.cShapes = g.GetShapes().Length;
  		result.shapes = new IntPtr(p_shapes);
  		if (p_segments != null)
  		{
  			result.cSegments = g.GetSegments().Length;
  			result.segments = new IntPtr(p_segments);
  		}
  		result.isValid = (byte)(g.GetIsValid() ? 1 : 0);
  		result.isLargerThanAHemisphere = (byte)(g.GetIsLargerThanAHemisphere() ? 1 : 0);
  		return result;
  	}
  }
  internal class ReorientSink : GeoDataSink
  {
  	private GeoDataBuilder _builder = new GeoDataBuilder();

  	private GeoDataBuilder _sink;

  	private bool _invertGeography;

  	private bool _inMultiPolygon;

  	private bool _postponeCurrent;

  	private int _srid;

  	private double GetEccentricity()
  	{
  		return SridList.GetEllipsoidParameters(_srid).GetEccentricity();
  	}

  	public ReorientSink()
  	{
  		_sink = _builder;
  		_srid = SridList.Null;
  	}

  	public void SetSrid(int srid)
  	{
  		_srid = srid;
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_invertGeography = type == OpenGisType.MultiPolygon || type == OpenGisType.Polygon || type == OpenGisType.CurvePolygon;
  		if (_invertGeography)
  		{
  			_postponeCurrent = type == OpenGisType.Polygon && _inMultiPolygon;
  			if (!_postponeCurrent)
  			{
  				_inMultiPolygon = type == OpenGisType.MultiPolygon;
  				_sink = new GeoDataBuilder();
  			}
  		}
  		else
  		{
  			_sink = _builder;
  		}
  		_sink.BeginGeo(type);
  	}

  	public void BeginFigure(double latitude, double longitude, double? z, double? m)
  	{
  		_sink.BeginFigure(latitude, longitude, z, m);
  	}

  	public void AddLine(double latitude, double longitude, double? z, double? m)
  	{
  		_sink.AddLine(latitude, longitude, z, m);
  	}

  	public void AddCircularArc(double latitude1, double longitude1, double? z1, double? m1, double latitude2, double longitude2, double? z2, double? m2)
  	{
  		_sink.AddCircularArc(latitude1, longitude1, z1, m1, latitude2, longitude2, z2, m2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		_sink.AddSegment(type);
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		_sink.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		_sink.EndFigure();
  	}

  	public void EndGeo()
  	{
  		_sink.EndGeo();
  		if (_invertGeography && !_postponeCurrent)
  		{
  			GeoData geoData = GLNativeMethods.GeodeticSymDifference(GeoDataBuilder.FullGlobeGeoData, _sink.ConstructedGeoData, GetEccentricity());
  			if (geoData.GetPointCount() > 0)
  			{
  				geoData.Populate(_builder);
  			}
  			_sink = _builder;
  			_invertGeography = false;
  			_inMultiPolygon = false;
  		}
  		_postponeCurrent = false;
  	}

  	public void Finish()
  	{
  	}

  	public GeoData ConstructedGeoData()
  	{
  		return _builder.ConstructedGeoData;
  	}
  }
  [CLSCompliant(true)]
  public enum OpenGisGeometryType
  {
  	Point = 1,
  	LineString,
  	Polygon,
  	MultiPoint,
  	MultiLineString,
  	MultiPolygon,
  	GeometryCollection,
  	CircularString,
  	CompoundCurve,
  	CurvePolygon
  }
  [CLSCompliant(true)]
  public enum OpenGisGeographyType
  {
  	Point = 1,
  	LineString,
  	Polygon,
  	MultiPoint,
  	MultiLineString,
  	MultiPolygon,
  	GeometryCollection,
  	CircularString,
  	CompoundCurve,
  	CurvePolygon,
  	FullGlobe
  }
  [CLSCompliant(true)]
  [Obsolete("IGeometrySink is obsolete, use IGeometrySink110 instead.")]
  public interface IGeometrySink
  {
  	void SetSrid(int srid);

  	void BeginGeometry(OpenGisGeometryType type);

  	void BeginFigure(double x, double y, double? z, double? m);

  	void AddLine(double x, double y, double? z, double? m);

  	void EndFigure();

  	void EndGeometry();
  }
  [CLSCompliant(true)]
  public interface IGeometrySink110 : IGeometrySink
  {
  	void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2);
  }
  [CLSCompliant(true)]
  [Obsolete("IGeographySink is obsolete, use IGeographySink110 instead.")]
  public interface IGeographySink
  {
  	void SetSrid(int srid);

  	void BeginGeography(OpenGisGeographyType type);

  	void BeginFigure(double latitude, double longitude, double? z, double? m);

  	void AddLine(double latitude, double longitude, double? z, double? m);

  	void EndFigure();

  	void EndGeography();
  }
  [CLSCompliant(true)]
  public interface IGeographySink110 : IGeographySink
  {
  	void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2);
  }
  internal static class OpenGisTypes
  {
  	private static string[] labels = new string[12]
  	{
  		null, "POINT", "LINESTRING", "POLYGON", "MULTIPOINT", "MULTILINESTRING", "MULTIPOLYGON", "GEOMETRYCOLLECTION", "CIRCULARSTRING", "COMPOUNDCURVE",
  		"CURVEPOLYGON", "FULLGLOBE"
  	};

  	public static string ToString(OpenGisType type)
  	{
  		return labels[(uint)type];
  	}

  	public static OpenGisType ParseLabel(string input)
  	{
  		for (int i = 1; i < labels.Length; i++)
  		{
  			string text = labels[i];
  			if (input.StartsWith(text, StringComparison.OrdinalIgnoreCase) && (input.Length == text.Length || !char.IsLetter(input[text.Length])))
  			{
  				return (OpenGisType)i;
  			}
  		}
  		throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnknownLabelInWKT, input.Replace('\0', ' ').Trim()));
  	}

  	public static OpenGisGeometryType AsOpenGisGeometryType(OpenGisType type)
  	{
  		return (OpenGisGeometryType)type;
  	}

  	public static OpenGisType AsOpenGisType(OpenGisGeometryType type)
  	{
  		return (OpenGisType)type;
  	}

  	public static OpenGisGeographyType AsOpenGisGeographyType(OpenGisType type)
  	{
  		return (OpenGisGeographyType)type;
  	}

  	public static OpenGisType AsOpenGisType(OpenGisGeographyType type)
  	{
  		return (OpenGisType)type;
  	}

  	public static bool IsMultiType(OpenGisType type)
  	{
  		if (type != OpenGisType.MultiPoint && type != OpenGisType.MultiLineString)
  		{
  			return type == OpenGisType.MultiPolygon;
  		}
  		return true;
  	}

  	public static OpenGisType GetMultiType(OpenGisType type)
  	{
  		return type switch
  		{
  			OpenGisType.Point => OpenGisType.MultiPoint, 
  			OpenGisType.LineString => OpenGisType.MultiLineString, 
  			OpenGisType.Polygon => OpenGisType.MultiPolygon, 
  			_ => OpenGisType.Unknown, 
  		};
  	}

  	public static bool IsCollection(OpenGisType type)
  	{
  		if (type != OpenGisType.GeometryCollection)
  		{
  			return IsMultiType(type);
  		}
  		return true;
  	}

  	public static bool IsPolygon(OpenGisType type)
  	{
  		if (type != OpenGisType.Polygon)
  		{
  			return type == OpenGisType.CurvePolygon;
  		}
  		return true;
  	}
  }
  internal class ForwardingGeoDataSink : GeoDataSink
  {
  	private readonly GeoDataSink _sink1;

  	private readonly GeoDataSink _sink2;

  	public ForwardingGeoDataSink(GeoDataSink sink1, GeoDataSink sink2)
  	{
  		_sink1 = sink1;
  		_sink2 = sink2;
  	}

  	public void SetSrid(int srid)
  	{
  		_sink1.SetSrid(srid);
  		_sink2.SetSrid(srid);
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_sink1.BeginGeo(type);
  		_sink2.BeginGeo(type);
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_sink1.BeginFigure(x, y, z, m);
  		_sink2.BeginFigure(x, y, z, m);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_sink1.AddLine(x, y, z, m);
  		_sink2.AddLine(x, y, z, m);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_sink1.AddCircularArc(x1, y1, z1, m1, x2, y2, z2, m2);
  		_sink2.AddCircularArc(x1, y1, z1, m1, x2, y2, z2, m2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		_sink1.AddSegment(type);
  		_sink2.AddSegment(type);
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		_sink1.StartRing(type);
  		_sink2.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		_sink1.EndFigure();
  		_sink2.EndFigure();
  	}

  	public void EndGeo()
  	{
  		_sink1.EndGeo();
  		_sink2.EndGeo();
  	}

  	public void Finish()
  	{
  		_sink1.Finish();
  		_sink2.Finish();
  	}
  }
  internal class CoordinateReversingGeoDataSink : GeoDataSink
  {
  	private readonly GeoDataSink _sink;

  	public CoordinateReversingGeoDataSink(GeoDataSink sink)
  	{
  		_sink = sink;
  	}

  	public void SetSrid(int srid)
  	{
  		_sink.SetSrid(srid);
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_sink.BeginGeo(type);
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_sink.BeginFigure(y, x, z, m);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_sink.AddLine(y, x, z, m);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_sink.AddCircularArc(y1, x1, z1, m1, y2, x2, z2, m2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		_sink.AddSegment(type);
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		_sink.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		_sink.EndFigure();
  	}

  	public void EndGeo()
  	{
  		_sink.EndGeo();
  	}

  	public void Finish()
  	{
  		_sink.Finish();
  	}
  }
  internal struct GeometryOutputSink : GeoDataSink
  {
  	private IGeometrySink _sink;

  	private IGeometrySink110 _sink110;

  	public GeometryOutputSink(IGeometrySink sink)
  	{
  		_sink = sink;
  		_sink110 = null;
  	}

  	public GeometryOutputSink(IGeometrySink110 sink)
  	{
  		_sink = sink;
  		_sink110 = sink;
  	}

  	public void SetSrid(int srid)
  	{
  		_sink.SetSrid(srid);
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_sink.BeginGeometry(OpenGisTypes.AsOpenGisGeometryType(type));
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_sink.BeginFigure(x, y, z, m);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_sink.AddLine(x, y, z, m);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		if (_sink110 != null)
  		{
  			_sink110.AddCircularArc(x1, y1, z1, m1, x2, y2, z2, m2);
  			return;
  		}
  		throw new ArgumentException(SpatialRes.StrIncompatibleGeometrySinks);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		if (_sink110 == null)
  		{
  			throw new ArgumentException(SpatialRes.StrIncompatibleGeometrySinks);
  		}
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		if (_sink110 == null)
  		{
  			throw new ArgumentException(SpatialRes.StrIncompatibleGeometrySinks);
  		}
  	}

  	public void EndFigure()
  	{
  		_sink.EndFigure();
  	}

  	public void EndGeo()
  	{
  		_sink.EndGeometry();
  	}

  	public void Finish()
  	{
  	}
  }
  internal struct GeographyOutputSink : GeoDataSink
  {
  	private IGeographySink _sink;

  	private IGeographySink110 _sink110;

  	public GeographyOutputSink(IGeographySink sink)
  	{
  		_sink = sink;
  		_sink110 = null;
  	}

  	public GeographyOutputSink(IGeographySink110 sink)
  	{
  		_sink = sink;
  		_sink110 = sink;
  	}

  	public void SetSrid(int srid)
  	{
  		_sink.SetSrid(srid);
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_sink.BeginGeography(OpenGisTypes.AsOpenGisGeographyType(type));
  	}

  	public void BeginFigure(double latitude, double longitude, double? z, double? m)
  	{
  		_sink.BeginFigure(latitude, longitude, z, m);
  	}

  	public void AddLine(double latitude, double longitude, double? z, double? m)
  	{
  		_sink.AddLine(latitude, longitude, z, m);
  	}

  	public void AddCircularArc(double latitude1, double longitude1, double? z1, double? m1, double latitude2, double longitude2, double? z2, double? m2)
  	{
  		if (_sink110 != null)
  		{
  			_sink110.AddCircularArc(latitude1, longitude1, z1, m1, latitude2, longitude2, z2, m2);
  			return;
  		}
  		throw new ArgumentException(SpatialRes.StrIncompatibleGeographySinks);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		if (_sink110 == null)
  		{
  			throw new ArgumentException(SpatialRes.StrIncompatibleGeographySinks);
  		}
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		if (_sink110 == null)
  		{
  			throw new ArgumentException(SpatialRes.StrIncompatibleGeographySinks);
  		}
  	}

  	public void EndFigure()
  	{
  		_sink.EndFigure();
  	}

  	public void EndGeo()
  	{
  		_sink.EndGeography();
  	}

  	public void Finish()
  	{
  	}
  }
  internal struct Context
  {
  	private OpenGisType _type;

  	private OpenGisType _container;

  	private int _depth;

  	private int _figures;

  	private bool _figureStarted;

  	private FigureAttributes _currentRing;

  	public OpenGisType Type => _type;

  	public OpenGisType Container => _container;

  	public bool IsFirstFigure => _figures == 1;

  	public bool HasFigureStarted => _figureStarted;

  	public int Figures => _figures;

  	public FigureAttributes CurrentRing => _currentRing;

  	public void Begin(OpenGisType type)
  	{
  		_container = _type;
  		_type = type;
  		_depth++;
  		_figures = 0;
  		_figureStarted = false;
  	}

  	public void BeginFigure()
  	{
  		_figures++;
  		_figureStarted = true;
  	}

  	public void AddLine()
  	{
  	}

  	public void EndFigure()
  	{
  		_figureStarted = false;
  		_currentRing = FigureAttributes.None;
  	}

  	public void AddArc()
  	{
  	}

  	public void StartSegment()
  	{
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		_currentRing = type;
  	}

  	public void End()
  	{
  		_depth--;
  		_type = _container;
  		_container = ((_depth > 1) ? OpenGisType.GeometryCollection : OpenGisType.Unknown);
  	}
  }
  internal class SpatialAdaptiveGridSettings
  {
  	public enum ECellLabellingScheme
  	{
  		eVarBinaryEncoding
  	}

  	public enum EGridDensity : byte
  	{
  		eCellLabelIndexArrayDi,
  		eCellLabelIndexArrayQuad,
  		eCellLabelIndexArrayOcta,
  		eCellLabelIndexArrayHexa,
  		cValidGridConfigs
  	}

  	public const int cGridDepth = 4;

  	public static readonly ushort[] s_GridSizes = new ushort[4] { 2, 4, 8, 16 };

  	public static readonly int cMaxTessellationCard = 8192;

  	public static readonly uint cCandidateTessellationCard = 1024u;

  	public const double MethodOpToIndexOpPrecisionFactor = 68719476736.0;

  	public static readonly byte[,] s_LabelForHexaGrid = new byte[16, 16]
  	{
  		{
  			0, 1, 14, 15, 16, 19, 20, 21, 234, 235,
  			236, 239, 240, 241, 254, 255
  		},
  		{
  			3, 2, 13, 12, 17, 18, 23, 22, 233, 232,
  			237, 238, 243, 242, 253, 252
  		},
  		{
  			4, 7, 8, 11, 30, 29, 24, 25, 230, 231,
  			226, 225, 244, 247, 248, 251
  		},
  		{
  			5, 6, 9, 10, 31, 28, 27, 26, 229, 228,
  			227, 224, 245, 246, 249, 250
  		},
  		{
  			58, 57, 54, 53, 32, 35, 36, 37, 218, 219,
  			220, 223, 202, 201, 198, 197
  		},
  		{
  			59, 56, 55, 52, 33, 34, 39, 38, 217, 216,
  			221, 222, 203, 200, 199, 196
  		},
  		{
  			60, 61, 50, 51, 46, 45, 40, 41, 214, 215,
  			210, 209, 204, 205, 194, 195
  		},
  		{
  			63, 62, 49, 48, 47, 44, 43, 42, 213, 212,
  			211, 208, 207, 206, 193, 192
  		},
  		{
  			64, 67, 68, 69, 122, 123, 124, 127, 128, 131,
  			132, 133, 186, 187, 188, 191
  		},
  		{
  			65, 66, 71, 70, 121, 120, 125, 126, 129, 130,
  			135, 134, 185, 184, 189, 190
  		},
  		{
  			78, 77, 72, 73, 118, 119, 114, 113, 142, 141,
  			136, 137, 182, 183, 178, 177
  		},
  		{
  			79, 76, 75, 74, 117, 116, 115, 112, 143, 140,
  			139, 138, 181, 180, 179, 176
  		},
  		{
  			80, 81, 94, 95, 96, 97, 110, 111, 144, 145,
  			158, 159, 160, 161, 174, 175
  		},
  		{
  			83, 82, 93, 92, 99, 98, 109, 108, 147, 146,
  			157, 156, 163, 162, 173, 172
  		},
  		{
  			84, 87, 88, 91, 100, 103, 104, 107, 148, 151,
  			152, 155, 164, 167, 168, 171
  		},
  		{
  			85, 86, 89, 90, 101, 102, 105, 106, 149, 150,
  			153, 154, 165, 166, 169, 170
  		}
  	};

  	public static readonly byte[,] s_LabelForOctaGrid = new byte[8, 8]
  	{
  		{ 0, 3, 4, 5, 58, 59, 60, 63 },
  		{ 1, 2, 7, 6, 57, 56, 61, 62 },
  		{ 14, 13, 8, 9, 54, 55, 50, 49 },
  		{ 15, 12, 11, 10, 53, 52, 51, 48 },
  		{ 16, 17, 30, 31, 32, 33, 46, 47 },
  		{ 19, 18, 29, 28, 35, 34, 45, 44 },
  		{ 20, 23, 24, 27, 36, 39, 40, 43 },
  		{ 21, 22, 25, 26, 37, 38, 41, 42 }
  	};

  	public static readonly byte[,] s_LabelForQuadGrid = new byte[4, 4]
  	{
  		{ 0, 1, 14, 15 },
  		{ 3, 2, 13, 12 },
  		{ 4, 7, 8, 11 },
  		{ 5, 6, 9, 10 }
  	};

  	public static readonly byte[,] s_LabelForDiGrid = new byte[2, 2]
  	{
  		{ 0, 3 },
  		{ 1, 2 }
  	};

  	public static readonly bool[,] s_ValidityConfigs = new bool[5, 4]
  	{
  		{ false, false, false, false },
  		{ true, true, false, false },
  		{ true, true, true, true },
  		{ true, true, true, true },
  		{ true, true, true, true }
  	};

  	public const int LowWatermark = 4;

  	public const int HighWaterMark = 64;

  	public static byte BLabel(ushort gridDensity, ushort row, ushort col)
  	{
  		return gridDensity switch
  		{
  			0 => s_LabelForDiGrid[row, col], 
  			1 => s_LabelForQuadGrid[row, col], 
  			2 => s_LabelForHexaGrid[row, col], 
  			_ => s_LabelForHexaGrid[row, col], 
  		};
  	}

  	private SpatialAdaptiveGridSettings()
  	{
  	}
  }
  internal class SpatialTessellationConfiguration
  {
  	private ushort[] m_GridDensityForEachLevel;

  	public SpatialAdaptiveGridSettings.ECellLabellingScheme m_LabellingScheme;

  	public SpatialTessellationConfiguration(SpatialAdaptiveGridSettings.ECellLabellingScheme labellingScheme, ushort[] densityOfGrids)
  	{
  		m_LabellingScheme = labellingScheme;
  		m_GridDensityForEachLevel = new ushort[5];
  		m_GridDensityForEachLevel[0] = 0;
  		for (int i = 1; i <= 4; i++)
  		{
  			m_GridDensityForEachLevel[i] = densityOfGrids[i - 1];
  		}
  	}

  	public ushort UsGridSize(ushort depth)
  	{
  		return SpatialAdaptiveGridSettings.s_GridSizes[m_GridDensityForEachLevel[depth]];
  	}

  	public ushort UsGridDensity(ushort depth)
  	{
  		return m_GridDensityForEachLevel[depth];
  	}
  }
  internal class SpatialTessellationRange
  {
  	public enum ECellCoverageAttr : ushort
  	{
  		InteriorCell = 2,
  		PartiallyCoveredCell = 1,
  		TouchedCell = 0
  	}

  	public static readonly ECellCoverageAttr[] s_CandidateModeChildCellAttr = new ECellCoverageAttr[3]
  	{
  		ECellCoverageAttr.TouchedCell,
  		ECellCoverageAttr.TouchedCell,
  		ECellCoverageAttr.InteriorCell
  	};

  	public uint m_CellStartRange;

  	public uint m_CellEndRange;

  	public SqlBytes m_VarBinaryCellLabel;

  	public ECellCoverageAttr m_ECellCoverageAttr;

  	public int m_SpatialReferenceId;

  	public SpatialTessellationRange(uint cellStartRange, uint cellEndRange, ECellCoverageAttr cellCoverage, int SpatialReferenceId)
  	{
  		m_CellStartRange = cellStartRange;
  		m_CellEndRange = cellEndRange;
  		m_ECellCoverageAttr = cellCoverage;
  		m_SpatialReferenceId = SpatialReferenceId;
  	}

  	public SpatialTessellationRange(SqlBytes cellLabel, ECellCoverageAttr cellCoverage, int SpatialReferenceId)
  	{
  		m_VarBinaryCellLabel = cellLabel;
  		m_ECellCoverageAttr = cellCoverage;
  		m_SpatialReferenceId = SpatialReferenceId;
  	}

  	public static bool operator ==(SpatialTessellationRange a, SpatialTessellationRange b)
  	{
  		if (a.m_CellStartRange == b.m_CellStartRange)
  		{
  			return a.m_CellEndRange == b.m_CellEndRange;
  		}
  		return false;
  	}

  	public static bool operator !=(SpatialTessellationRange a, SpatialTessellationRange b)
  	{
  		if (a.m_CellStartRange == b.m_CellStartRange)
  		{
  			return a.m_CellEndRange != b.m_CellEndRange;
  		}
  		return true;
  	}

  	public override bool Equals(object obj)
  	{
  		if (obj == null)
  		{
  			return false;
  		}
  		if (!(obj is SpatialTessellationRange spatialTessellationRange))
  		{
  			return false;
  		}
  		if (spatialTessellationRange.m_CellStartRange == m_CellStartRange)
  		{
  			return spatialTessellationRange.m_CellStartRange == m_CellStartRange;
  		}
  		return false;
  	}

  	public override int GetHashCode()
  	{
  		return (int)m_CellStartRange;
  	}
  }
  internal class SpatialTessellationRangeCollection : IEnumerable
  {
  	private SpatialTessellationEnumerator m_enumerator;

  	public SpatialTessellationRangeCollection(ISqlSpatialGridIndexable sourceObj, bool isValid, bool isSafeRootCellObject, bool isIncludeRootCellAlways, int srid, double rootOfGridX, double rootOfGridY, double gridWidth, double gridHeight, ushort[] gridDensityArray, SpatialAdaptiveGridSettings.ECellLabellingScheme labellingScheme, int maxCellsInTessellationOutput, SqlDouble distanceBuffer, bool useFuzz)
  	{
  		m_enumerator = new SpatialTessellationEnumerator(sourceObj, isValid, isSafeRootCellObject, isIncludeRootCellAlways, srid, rootOfGridX, rootOfGridY, gridWidth, gridHeight, gridDensityArray, labellingScheme, maxCellsInTessellationOutput, distanceBuffer, useFuzz);
  	}

  	public IEnumerator GetEnumerator()
  	{
  		return m_enumerator;
  	}
  }
  internal class SpatialTessellationEnumerator : IEnumerator
  {
  	private class CCellId
  	{
  		private CCellId m_ParentCellId;

  		private byte m_CellRow;

  		private byte m_CellCol;

  		private byte m_CellDepth;

  		private static CCellId s_RootCellId = new CCellId();

  		public CCellId(CCellId cidParent, ushort row, ushort column)
  		{
  			m_ParentCellId = cidParent;
  			m_CellRow = (byte)row;
  			m_CellCol = (byte)column;
  			m_CellDepth = (byte)(cidParent.Depth() + 1);
  		}

  		private CCellId()
  		{
  		}

  		public static CCellId GetRootCellId()
  		{
  			return s_RootCellId;
  		}

  		public SqlBytes GetCellLabelVarBinary(SpatialTessellationConfiguration planarTessConfig)
  		{
  			CCellId cCellId = this;
  			byte[] array = new byte[5] { 0, 0, 0, 0, m_CellDepth };
  			for (byte b = m_CellDepth; b > 0; b--)
  			{
  				ushort cellRow = cCellId.m_CellRow;
  				ushort cellCol = cCellId.m_CellCol;
  				ushort cellDepth = cCellId.m_CellDepth;
  				array[b - 1] = SpatialAdaptiveGridSettings.BLabel(planarTessConfig.UsGridDensity(cellDepth), cellRow, cellCol);
  				cCellId = cCellId.GetParent();
  			}
  			return new SqlBytes(array);
  		}

  		public SqlBytes GetCellLabelVarBinaryForChildCell(SpatialTessellationConfiguration planarTessConfig, ushort rowChild, ushort colChild)
  		{
  			CCellId cCellId = this;
  			byte[] array = new byte[5];
  			array[4] = (byte)(m_CellDepth + 1);
  			array[m_CellDepth] = SpatialAdaptiveGridSettings.BLabel(planarTessConfig.UsGridDensity((ushort)(m_CellDepth + 1)), rowChild, colChild);
  			for (byte b = m_CellDepth; b > 0; b--)
  			{
  				ushort cellRow = cCellId.m_CellRow;
  				ushort cellCol = cCellId.m_CellCol;
  				ushort cellDepth = cCellId.m_CellDepth;
  				array[b - 1] = SpatialAdaptiveGridSettings.BLabel(planarTessConfig.UsGridDensity(cellDepth), cellRow, cellCol);
  				cCellId = cCellId.GetParent();
  			}
  			return new SqlBytes(array);
  		}

  		public byte Depth()
  		{
  			return m_CellDepth;
  		}

  		public CCellId GetParent()
  		{
  			return m_ParentCellId;
  		}
  	}

  	private struct PartiallyCoveredCell
  	{
  		public ushort m_Depth;

  		public CCellId m_Cell;

  		public double m_RootX;

  		public double m_RootY;

  		public double m_Width;

  		public double m_GridHeight;

  		public PartiallyCoveredCell(double gridRootX, double gridRootY, double gridWidth, double gridHeight, CCellId parentCellId, ushort row, ushort column)
  		{
  			m_Cell = new CCellId(parentCellId, row, column);
  			m_RootX = gridRootX;
  			m_RootY = gridRootY;
  			m_Width = gridWidth;
  			m_GridHeight = gridHeight;
  			m_Depth = (ushort)(parentCellId.Depth() + 1);
  		}

  		public PartiallyCoveredCell(double gridRootX, double gridRootY, double gridWidth, double gridHeight)
  		{
  			m_Cell = CCellId.GetRootCellId();
  			m_RootX = gridRootX;
  			m_RootY = gridRootY;
  			m_Width = gridWidth;
  			m_GridHeight = gridHeight;
  			m_Depth = 0;
  		}
  	}

  	private class SpatialTessellationOutputCellStream
  	{
  		public enum EStreamStatus
  		{
  			ESSAboveHighWatermark,
  			ESSBelowLowWatermark,
  			ESSProcessSteady
  		}

  		private uint m_MaxCells;

  		private Queue<SpatialTessellationRange> m_OutQueue;

  		private SpatialTessellationConfiguration m_TessellationConfig;

  		private int m_SpatialReferenceId;

  		public bool IsEmpty => m_OutQueue.Count == 0;

  		public SpatialTessellationOutputCellStream(uint maxCells, SpatialTessellationConfiguration tessellationConfig, int SpatialReferenceId)
  		{
  			m_MaxCells = maxCells;
  			m_OutQueue = new Queue<SpatialTessellationRange>();
  			m_TessellationConfig = tessellationConfig;
  			m_SpatialReferenceId = SpatialReferenceId;
  		}

  		public SpatialTessellationRange GetNext()
  		{
  			return m_OutQueue.Dequeue();
  		}

  		public void Insert(CCellId cellId, SpatialTessellationRange.ECellCoverageAttr cellAttr)
  		{
  			SqlBytes cellLabelVarBinary = cellId.GetCellLabelVarBinary(m_TessellationConfig);
  			m_OutQueue.Enqueue(new SpatialTessellationRange(cellLabelVarBinary, cellAttr, m_SpatialReferenceId));
  		}

  		public void InsertChildCell(CCellId cellIdParent, ushort childRow, ushort childCol, SpatialTessellationRange.ECellCoverageAttr cellAttr)
  		{
  			SqlBytes cellLabelVarBinaryForChildCell = cellIdParent.GetCellLabelVarBinaryForChildCell(m_TessellationConfig, childRow, childCol);
  			m_OutQueue.Enqueue(new SpatialTessellationRange(cellLabelVarBinaryForChildCell, cellAttr, m_SpatialReferenceId));
  		}

  		public EStreamStatus EStatus()
  		{
  			if (m_OutQueue.Count > 64)
  			{
  				return EStreamStatus.ESSAboveHighWatermark;
  			}
  			if (m_OutQueue.Count < 4)
  			{
  				return EStreamStatus.ESSBelowLowWatermark;
  			}
  			return EStreamStatus.ESSProcessSteady;
  		}

  		public uint Cardinality()
  		{
  			return m_MaxCells;
  		}
  	}

  	private enum EProcessState
  	{
  		Init,
  		FillOutStream,
  		DrainOutStream,
  		CompletedTessellation,
  		EOS
  	}

  	private ISqlSpatialGridIndexable m_SourceObject;

  	private ISqlSpatialGridIndexable m_RegionForInternalFiltering;

  	private SpatialTessellationConfiguration m_TessellationConfig;

  	private Queue m_PartialCellCoverageQueue;

  	private SpatialTessellationRange m_CurrentSpatialTessellationRange;

  	private SpatialTessellationOutputCellStream m_OutStream;

  	private uint m_CurrentCandidateCount;

  	private EProcessState m_ProcessingState;

  	private bool m_IsUnsafeObject;

  	private bool m_TreatRootCellAsParentOfTopGrid;

  	private bool m_fDisableInternalFiltering;

  	private bool[,] m_TouchedCells;

  	private bool[,] m_PartiallyCoveredCells;

  	private bool[,] m_ContainedCells;

  	private bool[][,] m_TouchedCellsForAllGrids;

  	private bool[][,] m_PartiallyCoveredCellsForAllGrids;

  	private bool[][,] m_ContainedCellsForAllGrids;

  	private readonly double m_FuzzX;

  	private readonly double m_FuzzY;

  	public object Current => m_CurrentSpatialTessellationRange;

  	public SpatialTessellationEnumerator(ISqlSpatialGridIndexable sourceObject, bool isValid, bool isSafeRootCellObject, bool isIncludeRootCellAlways, int srid, double gridRootX, double gridRootY, double gridWidth, double gridHeight, ushort[] densityForEachGridLevel, SpatialAdaptiveGridSettings.ECellLabellingScheme labellingScheme, int maxCellsInTessellationOutput, SqlDouble distanceBuffer, bool enableFuzz)
  	{
  		m_PartialCellCoverageQueue = new Queue();
  		m_TessellationConfig = new SpatialTessellationConfiguration(labellingScheme, densityForEachGridLevel);
  		m_IsUnsafeObject = false;
  		m_TreatRootCellAsParentOfTopGrid = isIncludeRootCellAlways;
  		m_fDisableInternalFiltering = false;
  		maxCellsInTessellationOutput = Math.Max(1, Math.Min(SpatialAdaptiveGridSettings.cMaxTessellationCard, maxCellsInTessellationOutput));
  		int num = 1;
  		for (int i = 0; i < 4; i++)
  		{
  			num *= SpatialAdaptiveGridSettings.s_GridSizes[densityForEachGridLevel[i]];
  		}
  		m_FuzzX = (enableFuzz ? (gridWidth * 0.001 / (double)num) : 0.0);
  		m_FuzzY = (enableFuzz ? (gridHeight * 0.001 / (double)num) : 0.0);
  		if (isSafeRootCellObject)
  		{
  			m_OutStream = new SpatialTessellationOutputCellStream((uint)maxCellsInTessellationOutput, m_TessellationConfig, srid);
  			m_OutStream.Insert(CCellId.GetRootCellId(), SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  			m_ProcessingState = EProcessState.CompletedTessellation;
  		}
  		else
  		{
  			if (!isValid)
  			{
  				m_IsUnsafeObject = true;
  			}
  			m_OutStream = new SpatialTessellationOutputCellStream((uint)maxCellsInTessellationOutput, m_TessellationConfig, srid);
  			m_ProcessingState = EProcessState.FillOutStream;
  			if (isIncludeRootCellAlways)
  			{
  				m_OutStream.Insert(CCellId.GetRootCellId(), SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  			}
  			PartiallyCoveredCell partiallyCoveredCell = new PartiallyCoveredCell(gridRootX, gridRootY, gridWidth, gridHeight);
  			m_CurrentCandidateCount = 1u;
  			m_PartialCellCoverageQueue.Enqueue(partiallyCoveredCell);
  		}
  		if (m_ProcessingState != EProcessState.CompletedTessellation)
  		{
  			if (distanceBuffer.IsNull)
  			{
  				m_SourceObject = sourceObject;
  			}
  			else if (distanceBuffer.Value == double.MaxValue)
  			{
  				m_OutStream.Insert(CCellId.GetRootCellId(), SpatialTessellationRange.ECellCoverageAttr.InteriorCell);
  				ushort num2 = SpatialAdaptiveGridSettings.s_GridSizes[densityForEachGridLevel[0]];
  				for (ushort num3 = 0; num3 < num2; num3++)
  				{
  					for (ushort num4 = 0; num4 < num2; num4++)
  					{
  						m_OutStream.InsertChildCell(CCellId.GetRootCellId(), num3, num4, SpatialTessellationRange.ECellCoverageAttr.InteriorCell);
  					}
  				}
  				m_ProcessingState = EProcessState.CompletedTessellation;
  			}
  			else if (distanceBuffer.Value < 0.0)
  			{
  				if (isIncludeRootCellAlways)
  				{
  					m_OutStream.Insert(CCellId.GetRootCellId(), SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  				}
  				m_ProcessingState = EProcessState.CompletedTessellation;
  			}
  			else
  			{
  				m_SourceObject = sourceObject.BufferForDistanceQuery(distanceBuffer.Value, out m_fDisableInternalFiltering);
  				double num5 = 0.999999 * distanceBuffer.Value;
  				if (num5 > 0.0 && !m_fDisableInternalFiltering)
  				{
  					m_RegionForInternalFiltering = sourceObject.InteriorBufferForDistanceQuery(num5);
  				}
  				else
  				{
  					m_fDisableInternalFiltering = true;
  				}
  			}
  		}
  		if (m_ProcessingState != EProcessState.CompletedTessellation)
  		{
  			m_TouchedCellsForAllGrids = new bool[4][,];
  			m_PartiallyCoveredCellsForAllGrids = new bool[4][,];
  			m_ContainedCellsForAllGrids = new bool[4][,];
  			for (ushort num6 = 1; num6 <= 4; num6++)
  			{
  				ushort num7 = m_TessellationConfig.UsGridSize(num6);
  				m_TouchedCellsForAllGrids[num6 - 1] = new bool[num7, num7];
  				m_PartiallyCoveredCellsForAllGrids[num6 - 1] = new bool[num7, num7];
  				m_ContainedCellsForAllGrids[num6 - 1] = new bool[num7, num7];
  			}
  		}
  	}

  	public bool MoveNext()
  	{
  		Process();
  		if (!m_OutStream.IsEmpty)
  		{
  			m_CurrentSpatialTessellationRange = m_OutStream.GetNext();
  			return true;
  		}
  		return false;
  	}

  	public void Reset()
  	{
  		throw new NotImplementedException();
  	}

  	private bool IsTooLargeUnsafeObject(PartiallyCoveredCell partiallyCoveredCandidateCell)
  	{
  		if (m_IsUnsafeObject)
  		{
  			return true;
  		}
  		m_SourceObject.GetBoundingBoxCorners(out var minX, out var minY, out var maxX, out var maxY);
  		if (partiallyCoveredCandidateCell.m_RootX < minX)
  		{
  			minX = partiallyCoveredCandidateCell.m_RootX;
  		}
  		else if (partiallyCoveredCandidateCell.m_RootX > maxX)
  		{
  			maxX = partiallyCoveredCandidateCell.m_RootX;
  		}
  		if (partiallyCoveredCandidateCell.m_RootY < minY)
  		{
  			minY = partiallyCoveredCandidateCell.m_RootY;
  		}
  		else if (partiallyCoveredCandidateCell.m_RootY > maxY)
  		{
  			maxY = partiallyCoveredCandidateCell.m_RootY;
  		}
  		double num = partiallyCoveredCandidateCell.m_RootX + partiallyCoveredCandidateCell.m_Width;
  		double num2 = partiallyCoveredCandidateCell.m_RootY + partiallyCoveredCandidateCell.m_GridHeight;
  		if (num < minX)
  		{
  			minX = num;
  		}
  		else if (num > maxX)
  		{
  			maxX = num;
  		}
  		if (num2 < minY)
  		{
  			minY = num2;
  		}
  		else if (num2 > maxY)
  		{
  			maxY = num2;
  		}
  		if (!(maxX > minX + 68719476736.0 * partiallyCoveredCandidateCell.m_Width))
  		{
  			return maxY > minY + 68719476736.0 * partiallyCoveredCandidateCell.m_GridHeight;
  		}
  		return true;
  	}

  	public void Process()
  	{
  		if (m_ProcessingState == EProcessState.DrainOutStream && m_OutStream.EStatus() == SpatialTessellationOutputCellStream.EStreamStatus.ESSBelowLowWatermark)
  		{
  			m_ProcessingState = EProcessState.FillOutStream;
  		}
  		while (m_ProcessingState == EProcessState.FillOutStream)
  		{
  			if (m_PartialCellCoverageQueue.Count == 0)
  			{
  				m_ProcessingState = EProcessState.CompletedTessellation;
  				continue;
  			}
  			PartiallyCoveredCell partiallyCoveredCandidateCell = (PartiallyCoveredCell)m_PartialCellCoverageQueue.Dequeue();
  			bool flag = false;
  			bool flag2 = false;
  			int num = 0;
  			SpatialTessellationRange.ECellCoverageAttr cellAttr = SpatialTessellationRange.ECellCoverageAttr.TouchedCell;
  			ushort num2 = m_TessellationConfig.UsGridSize((ushort)(partiallyCoveredCandidateCell.m_Depth + 1));
  			GetGridCoverage(partiallyCoveredCandidateCell, num2, out var totalCellsTouched, out var totalCellsPartiallyCovered, out var totalCellsContained, out var geometryExceedsGrid);
  			if (totalCellsContained > 0 || totalCellsPartiallyCovered > 0)
  			{
  				cellAttr = SpatialTessellationRange.ECellCoverageAttr.PartiallyCoveredCell;
  			}
  			if (geometryExceedsGrid && partiallyCoveredCandidateCell.m_Depth == 0)
  			{
  				flag2 = true;
  				if (m_TreatRootCellAsParentOfTopGrid)
  				{
  					m_IsUnsafeObject = true;
  					totalCellsTouched = num2 * num2;
  					for (ushort num3 = 0; num3 < num2; num3++)
  					{
  						for (ushort num4 = 0; num4 < num2; num4++)
  						{
  							m_TouchedCells[num3, num4] = true;
  						}
  					}
  				}
  				else if ((totalCellsTouched > 0 || totalCellsContained > 0) && IsTooLargeUnsafeObject(partiallyCoveredCandidateCell))
  				{
  					m_IsUnsafeObject = true;
  				}
  			}
  			if (partiallyCoveredCandidateCell.m_Depth == 0)
  			{
  				num = totalCellsTouched + totalCellsContained + totalCellsPartiallyCovered;
  			}
  			else if (m_CurrentCandidateCount > m_OutStream.Cardinality())
  			{
  				flag = true;
  			}
  			else
  			{
  				int num5 = totalCellsTouched + totalCellsContained + totalCellsPartiallyCovered;
  				if (num5 + m_CurrentCandidateCount > m_OutStream.Cardinality() + 1)
  				{
  					flag = true;
  				}
  				else
  				{
  					num = num5;
  				}
  			}
  			if (num > 0)
  			{
  				if (flag)
  				{
  					m_CurrentCandidateCount += (uint)num;
  				}
  				else
  				{
  					m_CurrentCandidateCount += (uint)(num - 1);
  				}
  				bool isLeafGrid = partiallyCoveredCandidateCell.m_Depth + 1 == 4;
  				double cellWidth = partiallyCoveredCandidateCell.m_Width / (double)(int)num2;
  				double cellHeight = partiallyCoveredCandidateCell.m_GridHeight / (double)(int)num2;
  				if (totalCellsContained > 0)
  				{
  					ProcessContainedCells(partiallyCoveredCandidateCell, num2, totalCellsContained);
  				}
  				if (totalCellsPartiallyCovered > 0)
  				{
  					ProcessPartiallyCoveredCells(partiallyCoveredCandidateCell, num2, totalCellsPartiallyCovered, isLeafGrid, flag || (m_IsUnsafeObject && num == 1), cellWidth, cellHeight);
  				}
  				if (totalCellsTouched > 0)
  				{
  					ProcessTouchedCells(partiallyCoveredCandidateCell, num2, totalCellsTouched, isLeafGrid, cellWidth, cellHeight);
  				}
  			}
  			if (flag2)
  			{
  				m_OutStream.Insert(partiallyCoveredCandidateCell.m_Cell, SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  			}
  			if (flag)
  			{
  				m_OutStream.Insert(partiallyCoveredCandidateCell.m_Cell, cellAttr);
  			}
  		}
  	}

  	private void GetGridCoverage(PartiallyCoveredCell partiallyCoveredCandidateCell, ushort gridSize, out int totalCellsTouched, out int totalCellsPartiallyCovered, out int totalCellsContained, out bool geometryExceedsGrid)
  	{
  		bool flag = m_RegionForInternalFiltering != null;
  		totalCellsContained = 0;
  		totalCellsPartiallyCovered = 0;
  		totalCellsTouched = 0;
  		m_PartiallyCoveredCells = m_PartiallyCoveredCellsForAllGrids[partiallyCoveredCandidateCell.m_Depth];
  		m_ContainedCells = m_ContainedCellsForAllGrids[partiallyCoveredCandidateCell.m_Depth];
  		m_TouchedCells = m_TouchedCellsForAllGrids[partiallyCoveredCandidateCell.m_Depth];
  		Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  		Array.Clear(m_ContainedCells, 0, gridSize * gridSize);
  		Array.Clear(m_TouchedCells, 0, gridSize * gridSize);
  		m_SourceObject.GetGridCoverage(partiallyCoveredCandidateCell.m_Depth == 0, partiallyCoveredCandidateCell.m_RootX, partiallyCoveredCandidateCell.m_RootY, partiallyCoveredCandidateCell.m_Width, partiallyCoveredCandidateCell.m_GridHeight, m_FuzzX, m_FuzzY, gridSize, gridSize, m_PartiallyCoveredCells, m_ContainedCells, out totalCellsPartiallyCovered, out totalCellsContained, out geometryExceedsGrid, out var fHasAmbiguousTouchedCells);
  		if (fHasAmbiguousTouchedCells || flag || m_fDisableInternalFiltering)
  		{
  			if (totalCellsContained < 1 && totalCellsPartiallyCovered < 2)
  			{
  				flag = false;
  			}
  			Array.Copy(m_PartiallyCoveredCells, m_TouchedCells, gridSize * gridSize);
  			totalCellsTouched = totalCellsPartiallyCovered;
  			totalCellsPartiallyCovered = 0;
  		}
  		if (!flag && !m_fDisableInternalFiltering)
  		{
  			return;
  		}
  		ushort num = 0;
  		while (num < gridSize && totalCellsContained > 0)
  		{
  			ushort num2 = 0;
  			while (num2 < gridSize && totalCellsContained > 0)
  			{
  				if (m_ContainedCells[num, num2])
  				{
  					m_TouchedCells[num, num2] = true;
  					m_ContainedCells[num, num2] = false;
  					totalCellsContained--;
  					totalCellsTouched++;
  				}
  				num2++;
  			}
  			num++;
  		}
  		if (!flag)
  		{
  			return;
  		}
  		Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  		m_RegionForInternalFiltering.GetGridCoverage(partiallyCoveredCandidateCell.m_Depth == 0, partiallyCoveredCandidateCell.m_RootX, partiallyCoveredCandidateCell.m_RootY, partiallyCoveredCandidateCell.m_Width, partiallyCoveredCandidateCell.m_GridHeight, m_FuzzX, m_FuzzY, gridSize, gridSize, m_PartiallyCoveredCells, m_ContainedCells, out totalCellsPartiallyCovered, out totalCellsContained, out var _, out fHasAmbiguousTouchedCells);
  		if (fHasAmbiguousTouchedCells)
  		{
  			Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  			totalCellsPartiallyCovered = 0;
  		}
  		if (totalCellsPartiallyCovered <= 0 && totalCellsContained <= 0)
  		{
  			return;
  		}
  		num = 0;
  		while (num < gridSize && totalCellsTouched > 0)
  		{
  			ushort num2 = 0;
  			while (num2 < gridSize && totalCellsTouched > 0)
  			{
  				if (m_TouchedCells[num, num2] && (m_ContainedCells[num, num2] || m_PartiallyCoveredCells[num, num2]))
  				{
  					m_TouchedCells[num, num2] = false;
  					totalCellsTouched--;
  				}
  				num2++;
  			}
  			num++;
  		}
  	}

  	private void ProcessContainedCells(PartiallyCoveredCell partiallyCoveredCandidateCell, ushort gridSize, int totalCells)
  	{
  		ushort num = 0;
  		while (num < gridSize && totalCells > 0)
  		{
  			ushort num2 = 0;
  			while (num2 < gridSize && totalCells > 0)
  			{
  				if (m_ContainedCells[num, num2])
  				{
  					SpatialTessellationRange.ECellCoverageAttr cellAttr = (m_IsUnsafeObject ? SpatialTessellationRange.ECellCoverageAttr.PartiallyCoveredCell : SpatialTessellationRange.ECellCoverageAttr.InteriorCell);
  					totalCells--;
  					m_OutStream.InsertChildCell(partiallyCoveredCandidateCell.m_Cell, num, num2, cellAttr);
  					if (m_OutStream.EStatus() == SpatialTessellationOutputCellStream.EStreamStatus.ESSAboveHighWatermark)
  					{
  						m_ProcessingState = EProcessState.DrainOutStream;
  					}
  				}
  				num2++;
  			}
  			num++;
  		}
  	}

  	private void ProcessPartiallyCoveredCells(PartiallyCoveredCell partiallyCoveredCandidateCell, ushort gridSize, int totalCells, bool isLeafGrid, bool disableIntermediateFiltering, double cellWidth, double cellHeight)
  	{
  		ushort num = 0;
  		while (num < gridSize && totalCells > 0)
  		{
  			ushort num2 = 0;
  			while (num2 < gridSize && totalCells > 0)
  			{
  				if (m_PartiallyCoveredCells[num, num2])
  				{
  					totalCells--;
  					if (isLeafGrid || m_IsUnsafeObject)
  					{
  						SpatialTessellationRange.ECellCoverageAttr cellAttr = ((!disableIntermediateFiltering) ? SpatialTessellationRange.ECellCoverageAttr.PartiallyCoveredCell : SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  						m_OutStream.InsertChildCell(partiallyCoveredCandidateCell.m_Cell, num, num2, cellAttr);
  						if (m_OutStream.EStatus() == SpatialTessellationOutputCellStream.EStreamStatus.ESSAboveHighWatermark)
  						{
  							m_ProcessingState = EProcessState.DrainOutStream;
  						}
  					}
  					else
  					{
  						PartiallyCoveredCell partiallyCoveredCell = new PartiallyCoveredCell(partiallyCoveredCandidateCell.m_RootX + (double)(int)num2 * cellWidth, partiallyCoveredCandidateCell.m_RootY + (double)(int)num * cellHeight, cellWidth, cellHeight, partiallyCoveredCandidateCell.m_Cell, num, num2);
  						m_PartialCellCoverageQueue.Enqueue(partiallyCoveredCell);
  					}
  				}
  				num2++;
  			}
  			num++;
  		}
  	}

  	private void ProcessTouchedCells(PartiallyCoveredCell partiallyCoveredCandidateCell, ushort gridSize, int totalCells, bool isLeafGrid, double cellWidth, double cellHeight)
  	{
  		ushort num = 0;
  		while (num < gridSize && totalCells > 0)
  		{
  			ushort num2 = 0;
  			while (num2 < gridSize && totalCells > 0)
  			{
  				if (m_TouchedCells[num, num2])
  				{
  					totalCells--;
  					if (isLeafGrid || m_IsUnsafeObject)
  					{
  						m_OutStream.InsertChildCell(partiallyCoveredCandidateCell.m_Cell, num, num2, SpatialTessellationRange.ECellCoverageAttr.TouchedCell);
  						if (m_OutStream.EStatus() == SpatialTessellationOutputCellStream.EStreamStatus.ESSAboveHighWatermark)
  						{
  							m_ProcessingState = EProcessState.DrainOutStream;
  						}
  					}
  					else
  					{
  						PartiallyCoveredCell partiallyCoveredCell = new PartiallyCoveredCell(partiallyCoveredCandidateCell.m_RootX + (double)(int)num2 * cellWidth, partiallyCoveredCandidateCell.m_RootY + (double)(int)num * cellHeight, cellWidth, cellHeight, partiallyCoveredCandidateCell.m_Cell, num, num2);
  						m_PartialCellCoverageQueue.Enqueue(partiallyCoveredCell);
  					}
  				}
  				num2++;
  			}
  			num++;
  		}
  	}
  }
  public class GeometryTessellationFunction
  {
  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable InitMethod(SqlGeometry geometryObject, double rootX, double rootY, double maxX, double maxY, int densityGrid0, int densityGrid1, int densityGrid2, int densityGrid3, int cardinality, int tessellationMode, SqlDouble distanceBuffer)
  	{
  		ushort[] gridDensityArray = new ushort[4]
  		{
  			(ushort)(densityGrid0 - 1),
  			(ushort)(densityGrid1 - 1),
  			(ushort)(densityGrid2 - 1),
  			(ushort)(densityGrid3 - 1)
  		};
  		bool flag = geometryObject == null || geometryObject.IsNull || geometryObject.STIsEmpty().IsTrue;
  		bool flag2 = !flag && geometryObject.STIsValid().IsTrue;
  		int srid = (flag2 ? geometryObject.STSrid.Value : 0);
  		if (!flag && distanceBuffer.IsNull && geometryObject.GeoData.GetGType() == OpenGisType.GeometryCollection && geometryObject.GeoData.IsFillable())
  		{
  			geometryObject = SqlGeometry.Construct(GLNativeMethods.Outline(geometryObject.GeoData), geometryObject.Srid);
  		}
  		return new SpatialTessellationRangeCollection(geometryObject, flag2, flag, isIncludeRootCellAlways: false, srid, rootX, rootY, maxX - rootX, maxY - rootY, gridDensityArray, SpatialAdaptiveGridSettings.ECellLabellingScheme.eVarBinaryEncoding, cardinality, distanceBuffer, tessellationMode != 0);
  	}

  	public static void FillRow(object obj, out SqlBytes cellId, out short cellAttributes, out int spatialReferenceId)
  	{
  		SpatialTessellationRange spatialTessellationRange = (SpatialTessellationRange)obj;
  		cellId = spatialTessellationRange.m_VarBinaryCellLabel;
  		cellAttributes = (short)spatialTessellationRange.m_ECellCoverageAttr;
  		spatialReferenceId = spatialTessellationRange.m_SpatialReferenceId;
  	}

  	private GeometryTessellationFunction()
  	{
  	}
  }
  public class GeographyTessellationFunction
  {
  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable InitMethod(SqlGeography geographyObject, int densityGrid0, int densityGrid1, int densityGrid2, int densityGrid3, int cardinality, int tessellationMode, SqlDouble distanceBuffer)
  	{
  		ushort[] gridDensityArray = new ushort[4]
  		{
  			(ushort)(densityGrid0 - 1),
  			(ushort)(densityGrid1 - 1),
  			(ushort)(densityGrid2 - 1),
  			(ushort)(densityGrid3 - 1)
  		};
  		bool flag = geographyObject == null || geographyObject.IsNull || geographyObject.STIsEmpty().IsTrue;
  		bool flag2 = !flag && geographyObject.STIsValid().IsTrue;
  		int srid = (flag2 ? geographyObject.STSrid.Value : 0);
  		return new SpatialTessellationRangeCollection(geographyObject, flag2, flag, (tessellationMode != 0) ? true : false, srid, -281474976710656.0, -562949953421312.0, 562949953421312.0, 1125899906842624.0, gridDensityArray, SpatialAdaptiveGridSettings.ECellLabellingScheme.eVarBinaryEncoding, cardinality, distanceBuffer, tessellationMode != 0);
  	}

  	public static void FillRow(object obj, out SqlBytes cellId, out short cellAttributes, out int spatialReferenceId)
  	{
  		SpatialTessellationRange spatialTessellationRange = (SpatialTessellationRange)obj;
  		cellId = spatialTessellationRange.m_VarBinaryCellLabel;
  		cellAttributes = (short)spatialTessellationRange.m_ECellCoverageAttr;
  		spatialReferenceId = spatialTessellationRange.m_SpatialReferenceId;
  	}

  	private GeographyTessellationFunction()
  	{
  	}
  }
  public static class SpaceFillingCurve
  {
  	[CLSCompliant(false)]
  	public static ulong Hilbert(int order, uint x, uint y)
  	{
  		ulong num = 0uL;
  		for (uint num2 = (uint)(1 << order - 1); num2 != 0; num2 >>= 1)
  		{
  			num <<= 2;
  			if ((x & num2) == 0)
  			{
  				if ((y & num2) == 0)
  				{
  					uint num3 = x;
  					x = y;
  					y = num3;
  				}
  				else
  				{
  					num |= 1;
  				}
  			}
  			else if ((y & num2) == 0)
  			{
  				num |= 3;
  				uint num4 = x;
  				x = ~y;
  				y = ~num4;
  			}
  			else
  			{
  				num |= 2;
  			}
  		}
  		return num;
  	}

  	[CLSCompliant(false)]
  	public static void ReverseHilbert(int order, ulong hilbert, out uint ox, out uint oy)
  	{
  		uint num = 0u;
  		uint num2 = 0u;
  		for (uint num3 = 1u; num3 < (uint)(1 << order); num3 <<= 1)
  		{
  			ulong num4 = hilbert & 3;
  			if (num4 <= 3)
  			{
  				switch (num4)
  				{
  				case 0uL:
  				{
  					uint num6 = num;
  					num = num2;
  					num2 = num6;
  					break;
  				}
  				case 1uL:
  					num2 |= num3;
  					break;
  				case 2uL:
  					num |= num3;
  					num2 |= num3;
  					break;
  				case 3uL:
  				{
  					uint num5 = num;
  					num = num2 ^ ((num3 << 1) - 1);
  					num2 = num5 ^ ((num3 << 1) - 1) ^ num3;
  					break;
  				}
  				}
  			}
  			hilbert >>= 2;
  		}
  		ox = num;
  		oy = num2;
  	}
  }
  internal static class SpatialGridSettings
  {
  	public const int cCellIdBytes = 5;

  	public const int cBitsPerGrid = 4;

  	private const int cBitsForDepth = 4;

  	public const int cGridDepth = 9;

  	public const int cMinGridDepth = 3;

  	public const int cGridSize = 4;

  	public const int cGridSizeSquared = 16;

  	public const int cIndexResolutionBits = 18;

  	public const int cIndexResolution = 262144;

  	public const int cMaxTessellationCard = 8192;

  	public const double MethodOpToIndexOpPrecisionFactor = 17179869184.0;

  	public const int LowWatermark = 4;

  	public const int HighWaterMark = 64;

  	public static ulong AddDepthToLabel(ulong label, int depth)
  	{
  		if (depth == 0)
  		{
  			return 0uL;
  		}
  		int num = (9 - depth) * 4 + 4;
  		return (label << num) | (uint)depth;
  	}

  	public static ulong AddDepthToLabelLimit(ulong label, int depth)
  	{
  		if (depth == 0)
  		{
  			return 0uL;
  		}
  		int num = (9 - depth) * 4 + 4;
  		return (label + 1 << num) - 1;
  	}

  	public static int RemoveGridFromLabel(ref ulong label)
  	{
  		int result = (int)(label & 0xF);
  		label >>= 4;
  		return result;
  	}

  	public static int RemoveDepthFromLabel(ref ulong label)
  	{
  		int num = (int)(label & 0xF);
  		label >>= 4 + 4 * (9 - num);
  		return num;
  	}
  }
  internal enum ECellAttribute : byte
  {
  	InteriorCell = 2,
  	PartiallyCoveredCell = 1,
  	TouchedCell = 0
  }
  internal class TessellationRange
  {
  	public readonly ulong m_CellLabel;

  	public readonly ulong m_CellLabelLimit;

  	public readonly ECellAttribute m_ECellAttribute;

  	public readonly SqlGeometry m_Coverage;

  	public readonly bool m_IsAncestor;

  	public TessellationRange(ulong cellLabel, ulong cellLabelLimit, ECellAttribute cellCoverage, SqlGeometry coverage, bool isAncestor)
  	{
  		m_CellLabel = cellLabel;
  		m_CellLabelLimit = cellLabelLimit;
  		m_ECellAttribute = cellCoverage;
  		m_Coverage = coverage;
  		m_IsAncestor = isAncestor;
  	}
  }
  internal class TessellationEnumerator : IEnumerator
  {
  	private class CCellId
  	{
  		private byte m_CellDepth;

  		private ulong m_Label;

  		private uint m_Row;

  		private uint m_Column;

  		public CCellId()
  		{
  		}

  		public CCellId(CCellId cidParent, uint row, uint column)
  		{
  			if (cidParent.Depth() == 0)
  			{
  				m_CellDepth = 2;
  				m_Row = row;
  				m_Column = column;
  			}
  			else
  			{
  				m_CellDepth = (byte)(cidParent.Depth() + 1);
  				m_Row = (cidParent.m_Row << 2) | row;
  				m_Column = (cidParent.m_Column << 2) | column;
  			}
  			m_Label = SpaceFillingCurve.Hilbert(m_CellDepth * 2, m_Column, m_Row);
  		}

  		public ulong GetCellLabel()
  		{
  			return SpatialGridSettings.AddDepthToLabel(m_Label, m_CellDepth);
  		}

  		public ulong GetCellLabelLimit()
  		{
  			return SpatialGridSettings.AddDepthToLabelLimit(m_Label, m_CellDepth);
  		}

  		public ulong GetChildCellLabel(uint row, uint column)
  		{
  			int num;
  			if (Depth() == 0)
  			{
  				num = 2;
  			}
  			else
  			{
  				row |= m_Row << 2;
  				column |= m_Column << 2;
  				num = m_CellDepth + 1;
  			}
  			return SpatialGridSettings.AddDepthToLabel(SpaceFillingCurve.Hilbert(num * 2, column, row), num);
  		}

  		public ulong GetChildCellLabelLimit(uint row, uint column)
  		{
  			int num;
  			if (Depth() == 0)
  			{
  				num = 2;
  			}
  			else
  			{
  				row |= m_Row << 2;
  				column |= m_Column << 2;
  				num = m_CellDepth + 1;
  			}
  			return SpatialGridSettings.AddDepthToLabelLimit(SpaceFillingCurve.Hilbert(num * 2, column, row), num);
  		}

  		public byte Depth()
  		{
  			return m_CellDepth;
  		}
  	}

  	private class PartiallyCoveredCell : CCellId
  	{
  		public readonly double m_RootX;

  		public readonly double m_RootY;

  		public readonly double m_Width;

  		public readonly double m_Height;

  		public PartiallyCoveredCell(double gridWidth, double gridHeight, PartiallyCoveredCell parentCell, uint row, uint column)
  			: base(parentCell, row, column)
  		{
  			m_RootX = parentCell.m_RootX + (double)column * gridWidth;
  			m_RootY = parentCell.m_RootY + (double)row * gridHeight;
  			m_Width = gridWidth;
  			m_Height = gridHeight;
  		}

  		public PartiallyCoveredCell(double gridRootX, double gridRootY, double gridWidth, double gridHeight)
  		{
  			m_RootX = gridRootX;
  			m_RootY = gridRootY;
  			m_Width = gridWidth;
  			m_Height = gridHeight;
  		}

  		private static SqlGeometry CreateBox(double xmin, double ymin, double width, double height)
  		{
  			SqlGeometryBuilder sqlGeometryBuilder = new SqlGeometryBuilder();
  			sqlGeometryBuilder.SetSrid(0);
  			sqlGeometryBuilder.BeginGeometry(OpenGisGeometryType.Polygon);
  			sqlGeometryBuilder.BeginFigure(xmin, ymin);
  			sqlGeometryBuilder.AddLine(xmin + width, ymin);
  			sqlGeometryBuilder.AddLine(xmin + width, ymin + height);
  			sqlGeometryBuilder.AddLine(xmin, ymin + height);
  			sqlGeometryBuilder.AddLine(xmin, ymin);
  			sqlGeometryBuilder.EndFigure();
  			sqlGeometryBuilder.EndGeometry();
  			return sqlGeometryBuilder.ConstructedGeometry;
  		}

  		public SqlGeometry AsGeometry()
  		{
  			return CreateBox(m_RootX, m_RootY, m_Width, m_Height);
  		}

  		public SqlGeometry AsChildGeometry(uint row, uint column)
  		{
  			int num = ((Depth() == 0) ? 16 : 4);
  			double num2 = m_Width / (double)num;
  			double num3 = m_Height / (double)num;
  			return CreateBox(m_RootX + (double)column * num2, m_RootY + (double)row * num3, num2, num3);
  		}
  	}

  	private class SpatialTessellationOutputCellStream
  	{
  		private bool m_GenerateCoverage;

  		private bool m_IncludeDescendants;

  		private int m_MaxLevel;

  		private Queue<TessellationRange> m_OutQueue = new Queue<TessellationRange>();

  		public bool IsEmpty => m_OutQueue.Count == 0;

  		public SpatialTessellationOutputCellStream(bool GenerateCoverage, bool includeDescendants, int maxLevel)
  		{
  			m_GenerateCoverage = GenerateCoverage;
  			m_IncludeDescendants = includeDescendants;
  			m_MaxLevel = maxLevel;
  		}

  		public TessellationRange GetNext()
  		{
  			return m_OutQueue.Dequeue();
  		}

  		public void Insert(PartiallyCoveredCell cell, ECellAttribute cellAttr, bool isAncestor)
  		{
  			ulong cellLabel = cell.GetCellLabel();
  			SqlGeometry coverage = (m_GenerateCoverage ? cell.AsGeometry() : null);
  			if (isAncestor || !m_IncludeDescendants)
  			{
  				m_OutQueue.Enqueue(new TessellationRange(cellLabel, cellLabel, cellAttr, coverage, isAncestor));
  				return;
  			}
  			ulong cellLabelLimit = cell.GetCellLabelLimit();
  			if (cell.Depth() < 9 && cellAttr == ECellAttribute.PartiallyCoveredCell)
  			{
  				m_OutQueue.Enqueue(new TessellationRange(cellLabel, cellLabel, ECellAttribute.PartiallyCoveredCell, coverage, isAncestor: false));
  				m_OutQueue.Enqueue(new TessellationRange(cellLabel + 1, cellLabelLimit, ECellAttribute.TouchedCell, coverage, isAncestor: false));
  			}
  			else
  			{
  				m_OutQueue.Enqueue(new TessellationRange(cellLabel, cellLabelLimit, cellAttr, coverage, isAncestor: false));
  			}
  		}

  		public void InsertChildCell(PartiallyCoveredCell cell, uint childRow, uint childCol, ECellAttribute cellAttr, bool isAncestor)
  		{
  			ulong childCellLabel = cell.GetChildCellLabel(childRow, childCol);
  			SqlGeometry coverage = (m_GenerateCoverage ? cell.AsChildGeometry(childRow, childCol) : null);
  			if (isAncestor || !m_IncludeDescendants)
  			{
  				m_OutQueue.Enqueue(new TessellationRange(childCellLabel, childCellLabel, cellAttr, coverage, isAncestor));
  				return;
  			}
  			ulong childCellLabelLimit = cell.GetChildCellLabelLimit(childRow, childCol);
  			if (cell.Depth() + 1 < 9 && cellAttr == ECellAttribute.PartiallyCoveredCell)
  			{
  				m_OutQueue.Enqueue(new TessellationRange(childCellLabel, childCellLabel, ECellAttribute.PartiallyCoveredCell, coverage, isAncestor: false));
  				m_OutQueue.Enqueue(new TessellationRange(childCellLabel + 1, childCellLabelLimit, ECellAttribute.TouchedCell, coverage, isAncestor: false));
  			}
  			else
  			{
  				m_OutQueue.Enqueue(new TessellationRange(childCellLabel, childCellLabelLimit, cellAttr, coverage, isAncestor: false));
  			}
  		}

  		public void InsertAll()
  		{
  			m_OutQueue.Enqueue(new TessellationRange(0uL, ulong.MaxValue, ECellAttribute.InteriorCell, null, isAncestor: false));
  		}

  		public bool FAboveHighWaterMark()
  		{
  			return m_OutQueue.Count > 64;
  		}

  		public bool FBelowLowWaterMark()
  		{
  			return m_OutQueue.Count < 4;
  		}
  	}

  	private enum EProcessState
  	{
  		Init,
  		FillOutStream,
  		DrainOutStream,
  		CompletedTessellation,
  		EOS
  	}

  	private readonly ISqlSpatialGridIndexable m_SourceObject;

  	private readonly ISqlSpatialGridIndexable m_RegionForInternalFiltering;

  	private readonly Queue m_PartialCellCoverageQueue = new Queue();

  	private TessellationRange m_CurrentTessellationRange;

  	private readonly SpatialTessellationOutputCellStream m_OutStream;

  	private int m_CurrentCandidateCount;

  	private EProcessState m_ProcessingState;

  	private bool m_IsUnsafeObject;

  	private bool m_fDisableInternalFiltering;

  	private bool[,] m_TouchedCells;

  	private bool[,] m_PartiallyCoveredCells;

  	private bool[,] m_ContainedCells;

  	private readonly double m_FuzzX;

  	private readonly double m_FuzzY;

  	private readonly bool m_IntervalMode;

  	private readonly int m_MaxLevel;

  	private readonly int m_MaxOutputCells;

  	public object Current => m_CurrentTessellationRange;

  	public TessellationEnumerator(ISqlSpatialGridIndexable sourceObject, double gridRootX, double gridRootY, double gridWidth, double gridHeight, int maxOutputCells, SqlDouble distanceBuffer, bool intervalMode, int maxLevel, bool generateCoverage, bool useFuzz, bool enableReduce)
  	{
  		m_FuzzX = (useFuzz ? (gridWidth * 0.001 / 262144.0) : 0.0);
  		m_FuzzY = (useFuzz ? (gridHeight * 0.001 / 262144.0) : 0.0);
  		m_IntervalMode = intervalMode;
  		m_MaxLevel = Math.Max(3, Math.Min(9, maxLevel));
  		m_OutStream = new SpatialTessellationOutputCellStream(generateCoverage, intervalMode, m_MaxLevel);
  		m_MaxOutputCells = Math.Max(1, Math.Min(8192, maxOutputCells));
  		m_ProcessingState = EProcessState.FillOutStream;
  		if (distanceBuffer.IsNull)
  		{
  			m_SourceObject = sourceObject;
  		}
  		else
  		{
  			if (distanceBuffer.Value == double.MaxValue)
  			{
  				m_OutStream.InsertAll();
  				m_ProcessingState = EProcessState.CompletedTessellation;
  				return;
  			}
  			if (distanceBuffer.Value < 0.0)
  			{
  				m_ProcessingState = EProcessState.CompletedTessellation;
  				return;
  			}
  			m_SourceObject = sourceObject.BufferForDistanceQuery(distanceBuffer.Value, out m_fDisableInternalFiltering);
  			double num = 0.999999 * distanceBuffer.Value;
  			if (num > 0.0 && !m_fDisableInternalFiltering)
  			{
  				m_RegionForInternalFiltering = sourceObject.InteriorBufferForDistanceQuery(num);
  			}
  			else
  			{
  				m_fDisableInternalFiltering = true;
  			}
  		}
  		PartiallyCoveredCell partiallyCoveredCell = new PartiallyCoveredCell(gridRootX, gridRootY, gridWidth, gridHeight);
  		if (enableReduce)
  		{
  			partiallyCoveredCell = ReduceCell(partiallyCoveredCell);
  		}
  		if (partiallyCoveredCell.Depth() >= m_MaxLevel)
  		{
  			m_OutStream.Insert(partiallyCoveredCell, ECellAttribute.PartiallyCoveredCell, isAncestor: false);
  			m_ProcessingState = EProcessState.CompletedTessellation;
  		}
  		else
  		{
  			m_CurrentCandidateCount = 1;
  			m_PartialCellCoverageQueue.Enqueue(partiallyCoveredCell);
  		}
  	}

  	private PartiallyCoveredCell ReduceCell(PartiallyCoveredCell cell)
  	{
  		m_SourceObject.GetBoundingBoxCorners(out var minX, out var minY, out var maxX, out var maxY);
  		while (cell.Depth() < m_MaxLevel)
  		{
  			int num = ((cell.Depth() == 0) ? 16 : 4);
  			double num2 = cell.m_Width / (double)num;
  			double num3 = Math.Floor((minX - cell.m_RootX - m_FuzzX) / num2);
  			if (num3 < 0.0)
  			{
  				break;
  			}
  			double num4 = Math.Floor((maxX - cell.m_RootX + m_FuzzX) / num2);
  			if (num4 >= (double)num || num3 != num4)
  			{
  				break;
  			}
  			double num5 = cell.m_Height / (double)num;
  			double num6 = Math.Floor((minY - cell.m_RootY - m_FuzzY) / num5);
  			if (num6 < 0.0)
  			{
  				break;
  			}
  			double num7 = Math.Floor((maxY - cell.m_RootY + m_FuzzY) / num5);
  			if (num7 >= (double)num || num6 != num7)
  			{
  				break;
  			}
  			if (m_IntervalMode && cell.Depth() > 0)
  			{
  				m_OutStream.Insert(cell, ECellAttribute.PartiallyCoveredCell, isAncestor: true);
  			}
  			cell = new PartiallyCoveredCell(num2, num5, cell, (uint)num6, (uint)num3);
  		}
  		return cell;
  	}

  	public static ulong GetLabelForPoint(double gridRootX, double gridRootY, double gridWidth, double gridHeight, double x, double y)
  	{
  		int num = (int)Math.Floor((x - gridRootX) / gridWidth * 262144.0);
  		if (num < 0 || num >= 262144)
  		{
  			return 0uL;
  		}
  		int num2 = (int)Math.Floor((y - gridRootY) / gridHeight * 262144.0);
  		if (num2 < 0 || num2 >= 262144)
  		{
  			return 0uL;
  		}
  		return SpatialGridSettings.AddDepthToLabel(SpaceFillingCurve.Hilbert(18, (uint)num, (uint)num2), 9);
  	}

  	public bool MoveNext()
  	{
  		Process();
  		if (!m_OutStream.IsEmpty)
  		{
  			m_CurrentTessellationRange = m_OutStream.GetNext();
  			return true;
  		}
  		return false;
  	}

  	public void Reset()
  	{
  		throw new NotImplementedException();
  	}

  	private bool IsTooLargeUnsafeObject(PartiallyCoveredCell candidateCell)
  	{
  		if (m_IsUnsafeObject)
  		{
  			return true;
  		}
  		m_SourceObject.GetBoundingBoxCorners(out var minX, out var minY, out var maxX, out var maxY);
  		if (candidateCell.m_RootX < minX)
  		{
  			minX = candidateCell.m_RootX;
  		}
  		else if (candidateCell.m_RootX > maxX)
  		{
  			maxX = candidateCell.m_RootX;
  		}
  		if (candidateCell.m_RootY < minY)
  		{
  			minY = candidateCell.m_RootY;
  		}
  		else if (candidateCell.m_RootY > maxY)
  		{
  			maxY = candidateCell.m_RootY;
  		}
  		double num = candidateCell.m_RootX + candidateCell.m_Width;
  		double num2 = candidateCell.m_RootY + candidateCell.m_Height;
  		if (num < minX)
  		{
  			minX = num;
  		}
  		else if (num > maxX)
  		{
  			maxX = num;
  		}
  		if (num2 < minY)
  		{
  			minY = num2;
  		}
  		else if (num2 > maxY)
  		{
  			maxY = num2;
  		}
  		if (!(maxX > minX + 17179869184.0 * candidateCell.m_Width))
  		{
  			return maxY > minY + 17179869184.0 * candidateCell.m_Height;
  		}
  		return true;
  	}

  	public void Process()
  	{
  		if (m_ProcessingState == EProcessState.DrainOutStream && m_OutStream.FBelowLowWaterMark())
  		{
  			m_ProcessingState = EProcessState.FillOutStream;
  		}
  		while (m_ProcessingState == EProcessState.FillOutStream)
  		{
  			if (m_PartialCellCoverageQueue.Count == 0)
  			{
  				m_ProcessingState = EProcessState.CompletedTessellation;
  				break;
  			}
  			PartiallyCoveredCell partiallyCoveredCell = (PartiallyCoveredCell)m_PartialCellCoverageQueue.Dequeue();
  			int num = ((partiallyCoveredCell.Depth() == 0) ? 16 : 4);
  			GetGridCoverage(partiallyCoveredCell, num, out var totalCellsTouched, out var totalCellsPartiallyCovered, out var totalCellsContained, out var geometryExceedsGrid);
  			if (geometryExceedsGrid && partiallyCoveredCell.Depth() == 0)
  			{
  				if ((totalCellsTouched > 0 || totalCellsContained > 0) && IsTooLargeUnsafeObject(partiallyCoveredCell))
  				{
  					m_IsUnsafeObject = true;
  				}
  				m_OutStream.Insert(partiallyCoveredCell, ECellAttribute.TouchedCell, isAncestor: false);
  			}
  			if (totalCellsTouched + totalCellsContained + totalCellsPartiallyCovered == 0)
  			{
  				if (!geometryExceedsGrid || partiallyCoveredCell.Depth() > 0)
  				{
  					m_OutStream.Insert(partiallyCoveredCell, ECellAttribute.TouchedCell, isAncestor: false);
  				}
  				continue;
  			}
  			int num2 = m_CurrentCandidateCount + totalCellsTouched + totalCellsContained + totalCellsPartiallyCovered - 1;
  			if (partiallyCoveredCell.Depth() > 0)
  			{
  				ECellAttribute cellAttr = ((totalCellsContained + totalCellsPartiallyCovered > 0) ? ECellAttribute.PartiallyCoveredCell : ECellAttribute.TouchedCell);
  				if (num2 > m_MaxOutputCells)
  				{
  					m_OutStream.Insert(partiallyCoveredCell, cellAttr, isAncestor: false);
  					continue;
  				}
  				if (m_IntervalMode)
  				{
  					m_OutStream.Insert(partiallyCoveredCell, cellAttr, isAncestor: true);
  				}
  			}
  			m_CurrentCandidateCount = num2;
  			bool outputCells = m_IsUnsafeObject || partiallyCoveredCell.Depth() + 1 >= m_MaxLevel || (partiallyCoveredCell.Depth() == 0 && num2 > m_MaxOutputCells);
  			double cellWidth = partiallyCoveredCell.m_Width / (double)num;
  			double cellHeight = partiallyCoveredCell.m_Height / (double)num;
  			if (totalCellsContained > 0)
  			{
  				ProcessContainedCells(partiallyCoveredCell, num, totalCellsContained);
  			}
  			if (totalCellsPartiallyCovered > 0)
  			{
  				ProcessPartiallyCoveredCells(partiallyCoveredCell, num, totalCellsPartiallyCovered, outputCells, cellWidth, cellHeight);
  			}
  			if (totalCellsTouched > 0)
  			{
  				ProcessTouchedCells(partiallyCoveredCell, num, totalCellsTouched, outputCells, cellWidth, cellHeight);
  			}
  			if (m_OutStream.FAboveHighWaterMark())
  			{
  				m_ProcessingState = EProcessState.DrainOutStream;
  			}
  		}
  	}

  	private void GetGridCoverage(PartiallyCoveredCell candidateCell, int gridSize, out int totalCellsTouched, out int totalCellsPartiallyCovered, out int totalCellsContained, out bool geometryExceedsGrid)
  	{
  		bool flag = m_RegionForInternalFiltering != null;
  		totalCellsContained = 0;
  		totalCellsPartiallyCovered = 0;
  		totalCellsTouched = 0;
  		if (m_PartiallyCoveredCells == null || m_PartiallyCoveredCells.GetLength(0) != gridSize)
  		{
  			m_PartiallyCoveredCells = new bool[gridSize, gridSize];
  			m_ContainedCells = new bool[gridSize, gridSize];
  			m_TouchedCells = new bool[gridSize, gridSize];
  		}
  		else
  		{
  			Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  			Array.Clear(m_ContainedCells, 0, gridSize * gridSize);
  			Array.Clear(m_TouchedCells, 0, gridSize * gridSize);
  		}
  		m_SourceObject.GetGridCoverage(candidateCell.Depth() == 0, candidateCell.m_RootX, candidateCell.m_RootY, candidateCell.m_Width, candidateCell.m_Height, m_FuzzX, m_FuzzY, gridSize, gridSize, m_PartiallyCoveredCells, m_ContainedCells, out totalCellsPartiallyCovered, out totalCellsContained, out geometryExceedsGrid, out var fHasAmbiguousTouchedCells);
  		if (fHasAmbiguousTouchedCells || flag || m_fDisableInternalFiltering)
  		{
  			if (totalCellsContained < 1 && totalCellsPartiallyCovered < 2)
  			{
  				flag = false;
  			}
  			Array.Copy(m_PartiallyCoveredCells, m_TouchedCells, m_PartiallyCoveredCells.Length);
  			totalCellsTouched = totalCellsPartiallyCovered;
  			totalCellsPartiallyCovered = 0;
  		}
  		if (!flag && !m_fDisableInternalFiltering)
  		{
  			return;
  		}
  		ushort num = 0;
  		while (num < gridSize && totalCellsContained > 0)
  		{
  			for (ushort num2 = 0; num2 < gridSize; num2++)
  			{
  				if (m_ContainedCells[num, num2])
  				{
  					m_TouchedCells[num, num2] = true;
  					m_ContainedCells[num, num2] = false;
  					totalCellsContained--;
  					totalCellsTouched++;
  					if (totalCellsContained == 0)
  					{
  						break;
  					}
  				}
  			}
  			num++;
  		}
  		if (!flag)
  		{
  			return;
  		}
  		Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  		m_RegionForInternalFiltering.GetGridCoverage(candidateCell.Depth() == 0, candidateCell.m_RootX, candidateCell.m_RootY, candidateCell.m_Width, candidateCell.m_Height, m_FuzzX, m_FuzzY, gridSize, gridSize, m_PartiallyCoveredCells, m_ContainedCells, out totalCellsPartiallyCovered, out totalCellsContained, out var _, out fHasAmbiguousTouchedCells);
  		if (fHasAmbiguousTouchedCells)
  		{
  			Array.Clear(m_PartiallyCoveredCells, 0, gridSize * gridSize);
  			totalCellsPartiallyCovered = 0;
  		}
  		if (totalCellsTouched <= 0 || (totalCellsPartiallyCovered <= 0 && totalCellsContained <= 0))
  		{
  			return;
  		}
  		for (ushort num3 = 0; num3 < gridSize; num3++)
  		{
  			for (ushort num4 = 0; num4 < gridSize; num4++)
  			{
  				if (m_TouchedCells[num3, num4] && (m_ContainedCells[num3, num4] || m_PartiallyCoveredCells[num3, num4]))
  				{
  					m_TouchedCells[num3, num4] = false;
  					if (--totalCellsTouched == 0)
  					{
  						return;
  					}
  				}
  			}
  		}
  	}

  	private void ProcessContainedCells(PartiallyCoveredCell candidateCell, int gridSize, int totalCells)
  	{
  		for (uint num = 0u; num < gridSize; num++)
  		{
  			for (uint num2 = 0u; num2 < gridSize; num2++)
  			{
  				if (m_ContainedCells[num, num2])
  				{
  					ECellAttribute cellAttr = (m_IsUnsafeObject ? ECellAttribute.PartiallyCoveredCell : ECellAttribute.InteriorCell);
  					m_OutStream.InsertChildCell(candidateCell, num, num2, cellAttr, isAncestor: false);
  					if (--totalCells == 0)
  					{
  						return;
  					}
  				}
  			}
  		}
  	}

  	private void ProcessPartiallyCoveredCells(PartiallyCoveredCell candidateCell, int gridSize, int totalCells, bool outputCells, double cellWidth, double cellHeight)
  	{
  		for (uint num = 0u; num < gridSize; num++)
  		{
  			for (uint num2 = 0u; num2 < gridSize; num2++)
  			{
  				if (m_PartiallyCoveredCells[num, num2])
  				{
  					if (outputCells)
  					{
  						m_OutStream.InsertChildCell(candidateCell, num, num2, ECellAttribute.PartiallyCoveredCell, isAncestor: false);
  					}
  					else
  					{
  						m_PartialCellCoverageQueue.Enqueue(new PartiallyCoveredCell(cellWidth, cellHeight, candidateCell, num, num2));
  					}
  					if (--totalCells == 0)
  					{
  						return;
  					}
  				}
  			}
  		}
  	}

  	private void ProcessTouchedCells(PartiallyCoveredCell candidateCell, int gridSize, int totalCells, bool outputCells, double cellWidth, double cellHeight)
  	{
  		for (uint num = 0u; num < gridSize; num++)
  		{
  			for (uint num2 = 0u; num2 < gridSize; num2++)
  			{
  				if (m_TouchedCells[num, num2])
  				{
  					if (outputCells)
  					{
  						m_OutStream.InsertChildCell(candidateCell, num, num2, ECellAttribute.TouchedCell, isAncestor: false);
  					}
  					else
  					{
  						m_PartialCellCoverageQueue.Enqueue(new PartiallyCoveredCell(cellWidth, cellHeight, candidateCell, num, num2));
  					}
  					if (--totalCells == 0)
  					{
  						return;
  					}
  				}
  			}
  		}
  	}
  }
  internal class Enumerable : IEnumerable
  {
  	private readonly IEnumerator m_enumerator;

  	public Enumerable(IEnumerator enumerator)
  	{
  		m_enumerator = enumerator;
  	}

  	public IEnumerator GetEnumerator()
  	{
  		return m_enumerator;
  	}
  }
  public class SpatialTessellationFunction
  {
  	private static bool FQueryWindow(int options)
  	{
  		return (options & 1) != 0;
  	}

  	private static bool FGenerateCoverage(int options)
  	{
  		return (options & 2) != 0;
  	}

  	private static bool FUseFuzz(int options)
  	{
  		return (options & 5) != 0;
  	}

  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable Planar(SqlGeometry geometry, double rootX, double rootY, double maxX, double maxY, int cardinality, int maxDepth, int options, SqlDouble distanceBuffer)
  	{
  		if (geometry == null || geometry.IsNull || !geometry.GeoData.GetIsValid())
  		{
  			return new object[0];
  		}
  		if (geometry.STIsEmpty().Value)
  		{
  			return new object[1]
  			{
  				new TessellationRange(0uL, 0uL, ECellAttribute.TouchedCell, null, isAncestor: false)
  			};
  		}
  		if (geometry.GeoData.IsRealPoint() && !FQueryWindow(options))
  		{
  			ulong labelForPoint = TessellationEnumerator.GetLabelForPoint(rootX, rootY, maxX - rootX, maxY - rootY, geometry.GeoData.X, geometry.GeoData.Y);
  			return new object[1]
  			{
  				new TessellationRange(labelForPoint, 0uL, ECellAttribute.PartiallyCoveredCell, null, isAncestor: false)
  			};
  		}
  		if (distanceBuffer.IsNull && geometry.GeoData.GetGType() == OpenGisType.GeometryCollection && geometry.GeoData.IsFillable())
  		{
  			geometry = SqlGeometry.Construct(GLNativeMethods.Outline(geometry.GeoData), geometry.Srid);
  		}
  		return new Enumerable(new TessellationEnumerator(geometry, rootX, rootY, maxX - rootX, maxY - rootY, cardinality, distanceBuffer, FQueryWindow(options), maxDepth, FGenerateCoverage(options), FUseFuzz(options), enableReduce: true));
  	}

  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable Geodetic(SqlGeography geography, int cardinality, int maxDepth, int options, SqlDouble distanceBuffer)
  	{
  		if (geography == null || geography.IsNull || !geography.GeoData.GetIsValid())
  		{
  			return new object[0];
  		}
  		if (geography.STIsEmpty().Value)
  		{
  			return new object[1]
  			{
  				new TessellationRange(0uL, 0uL, ECellAttribute.TouchedCell, null, isAncestor: false)
  			};
  		}
  		return new Enumerable(new TessellationEnumerator(geography, -281474976710656.0, -562949953421312.0, 562949953421312.0, 1125899906842624.0, cardinality, distanceBuffer, FQueryWindow(options), maxDepth, FGenerateCoverage(options), FUseFuzz(options), enableReduce: false));
  	}

  	public static void FillRow(object obj, out byte[] cellId, out byte cellAttributes, out byte[] cellIdLimit, out byte[] wkbCoverage)
  	{
  		TessellationRange tessellationRange = (TessellationRange)obj;
  		cellId = ULongToByteArray(tessellationRange.m_CellLabel, 5);
  		cellAttributes = (byte)tessellationRange.m_ECellAttribute;
  		cellIdLimit = ((tessellationRange.m_CellLabel == tessellationRange.m_CellLabelLimit) ? cellId : ULongToByteArray(tessellationRange.m_CellLabelLimit, 5));
  		wkbCoverage = ((tessellationRange.m_Coverage != null) ? tessellationRange.m_Coverage.STAsBinary().Value : null);
  	}

  	private static byte[] ULongToByteArray(ulong label, int cBytes)
  	{
  		byte[] array = new byte[cBytes];
  		for (int num = cBytes - 1; num >= 0; num--)
  		{
  			array[num] = (byte)(label & 0xFF);
  			label >>= 8;
  		}
  		return array;
  	}

  	public static string GetId(object obj)
  	{
  		ulong label = ((TessellationRange)obj).m_CellLabel;
  		string text = "";
  		for (int num = SpatialGridSettings.RemoveDepthFromLabel(ref label); num > 0; num--)
  		{
  			text = (char)(SpatialGridSettings.RemoveGridFromLabel(ref label) + 65) + text;
  		}
  		return text;
  	}

  	public static int GetAttribute(object obj)
  	{
  		return (int)((TessellationRange)obj).m_ECellAttribute;
  	}

  	public static SqlGeometry GetCoverage(object obj)
  	{
  		return ((TessellationRange)obj).m_Coverage;
  	}

  	public static bool GetIsAncestor(object obj)
  	{
  		return ((TessellationRange)obj).m_IsAncestor;
  	}
  }
  [Serializable]
  [CLSCompliant(true)]
  [SqlUserDefinedType(Format.UserDefined, IsByteOrdered = false, MaxByteSize = -1, IsFixedLength = false)]
  public sealed class SqlGeography : INullable, IBinarySerialize, ISqlSpatialGridIndexable
  {
  	internal const int DefaultSrid = 4326;

  	private const double DefaultTolerance = 0.001;

  	private const double MinimalRelativeBufferDistance = 1E-09;

  	private GeoData _geometry;

  	private bool _isNull;

  	private int _srid;

  	private static readonly string[] _allowedTypeNames = new string[16]
  	{
  		"Geometry", "Point", "LineString", "Polygon", "Curve", "Surface", "MultiPoint", "MultiLineString", "MultiPolygon", "MultiCurve",
  		"MultiSurface", "GeometryCollection", "FullGlobe", "CircularString", "CompoundCurve", "CurvePolygon"
  	};

  	private static readonly string[][] _ancestorTypeNames = new string[12][]
  	{
  		new string[0],
  		new string[2] { "Geometry", "Point" },
  		new string[3] { "Geometry", "Curve", "LineString" },
  		new string[3] { "Geometry", "Surface", "Polygon" },
  		new string[3] { "Geometry", "GeometryCollection", "MultiPoint" },
  		new string[4] { "Geometry", "GeometryCollection", "MultiCurve", "MultiLineString" },
  		new string[4] { "Geometry", "GeometryCollection", "MultiSurface", "MultiPolygon" },
  		new string[2] { "Geometry", "GeometryCollection" },
  		new string[3] { "Geometry", "Curve", "CircularString" },
  		new string[3] { "Geometry", "Curve", "CompounCurve" },
  		new string[3] { "Geometry", "Surface", "CurvePolygon" },
  		new string[2] { "Geometry", "FullGlobe" }
  	};

  	private const long WORKSPACE_BOUND = 281474976710656L;

  	internal const double GeodeticTiledProjectionRoot = -281474976710656.0;

  	internal const double GeodeticTiledProjectionExtent = 562949953421312.0;

  	internal const double GeodeticTessellationHemispherseOffsetInGlobalSpace = 281474976710656.0;

  	internal const double GeodeticTessellationRootX = -281474976710656.0;

  	internal const double GeodeticTessellationRootY = -562949953421312.0;

  	internal const double GeodeticTessellationWidth = 562949953421312.0;

  	internal const double GeodeticTessellationHeight = 1125899906842624.0;

  	private const int SQL11CompatLevel = 110;

  	private static volatile bool _isClrFeatureSwitchMapSet = false;

  	private static object _lockObject = new object();

  	public bool IsNull
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			return _isNull;
  		}
  	}

  	public static SqlGeography Null
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			return new SqlGeography(fNull: true);
  		}
  	}

  	internal GeoData GeoData => _geometry;

  	internal int Srid
  	{
  		get
  		{
  			return _srid;
  		}
  		set
  		{
  			if (!SridList.SridExists(value))
  			{
  				throw new ArgumentException(SpatialRes.StrGeographySridIsNotValid);
  			}
  			_srid = value;
  		}
  	}

  	public SqlInt32 STSrid
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (IsNull)
  			{
  				return SqlInt32.Null;
  			}
  			return Srid;
  		}
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		set
  		{
  			if (value.IsNull)
  			{
  				throw new ArgumentNullException();
  			}
  			Srid = value.Value;
  		}
  	}

  	public SqlDouble Lat
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.X;
  		}
  	}

  	public SqlDouble Long
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.Y;
  		}
  	}

  	public SqlDouble Z
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint() || !GeoData.HasZ())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.Z;
  		}
  	}

  	public SqlDouble M
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint() || !GeoData.HasM())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.M;
  		}
  	}

  	public bool HasZ
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsNull)
  			{
  				return GeoData.HasZ();
  			}
  			return false;
  		}
  	}

  	public bool HasM
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsNull)
  			{
  				return GeoData.HasM();
  			}
  			return false;
  		}
  	}

  	internal bool IsFullGlobe
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			return GeoData.GetIsFullGlobe();
  		}
  	}

  	internal SqlGeography(bool fNull)
  	{
  		_isNull = fNull;
  	}

  	public SqlGeography()
  		: this(4326)
  	{
  	}

  	internal SqlGeography(int srid)
  		: this(GeoDataBuilder.EmptyGeoData, srid)
  	{
  	}

  	internal SqlGeography(PointZM p, int srid)
  		: this(new GeoData(p), srid)
  	{
  	}

  	internal SqlGeography(Point p, int srid)
  		: this(new GeoData(p), srid)
  	{
  	}

  	internal static SqlGeography Construct(GeoData g, int srid)
  	{
  		g.SetIsKatmaiCompatible(!g.GetIsFullGlobe() && !g.GetIsLargerThanAHemisphere() && !g.ContainsCurvedShapes());
  		if ((g.GetIsFullGlobe() || g.GetIsLargerThanAHemisphere()) && IsKatmaiCompatLevel())
  		{
  			return Null;
  		}
  		return new SqlGeography(g, srid);
  	}

  	internal SqlGeography(GeoData g, int srid)
  	{
  		bool flag = IsKatmaiCompatLevel();
  		if (flag && g.ContainsCurvedShapes())
  		{
  			throw new FormatException(SpatialRes.StrWrongCompatibilityLevel);
  		}
  		Srid = srid;
  		_geometry = g;
  		if (_geometry.GetIsValid())
  		{
  			return;
  		}
  		UpdateClrFeatureSwitchMap();
  		if (IsValidExpensive(flag))
  		{
  			_geometry.SetIsValid(fValid: true);
  			_geometry.SetIsKatmaiCompatible(!_geometry.GetIsLargerThanAHemisphere() && !_geometry.ContainsCurvedShapes());
  			return;
  		}
  		if (flag)
  		{
  			throw new ArgumentException(SpatialRes.StrGeographyInputIsNotValid);
  		}
  		_geometry.SetIsKatmaiCompatible(value: false);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Read(BinaryReader r)
  	{
  		if (r == null)
  		{
  			return;
  		}
  		try
  		{
  			int num = r.ReadInt32();
  			_isNull = num == SridList.Null;
  			if (!IsNull)
  			{
  				Srid = num;
  				_geometry = default(GeoData);
  				_geometry.Read(r, SerializationVersion.SQL11_Fullglobe, SpatialRes.StrUnexpectedVersion, isGeography: true);
  			}
  		}
  		catch (EndOfStreamException)
  		{
  			throw new FormatException();
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Write(BinaryWriter w)
  	{
  		if (w != null)
  		{
  			if (IsNull)
  			{
  				w.Write(SridList.Null);
  				return;
  			}
  			w.Write(Srid);
  			_geometry.Write(w);
  		}
  	}

  	private EllipsoidParameters GetEllipsoidParameters()
  	{
  		return SridList.GetEllipsoidParameters(Srid);
  	}

  	private double GetEccentricity()
  	{
  		return SridList.GetEllipsoidParameters(Srid).GetEccentricity();
  	}

  	internal void ThrowIfInvalid()
  	{
  		if (!GeoData.GetIsValid())
  		{
  			throw new ArgumentException(SpatialRes.StrInstanceIsNotValid);
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography GeomFromGml(SqlXml xml, int srid)
  	{
  		ThrowIfArgumentNull(xml, "xml");
  		if (xml.IsNull)
  		{
  			return Null;
  		}
  		using XmlReader reader = xml.CreateReader();
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		GeoDataSink sink = new ForwardingGeoDataSink(new GeographyValidator(), geoDataBuilder);
  		new GeographyMarkupLanguageReader(reader, sink).Read(srid);
  		return new SqlGeography(geoDataBuilder.ConstructedGeoData, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlXml AsGml()
  	{
  		if (IsNull)
  		{
  			return SqlXml.Null;
  		}
  		MemoryStream memoryStream = new MemoryStream();
  		using (XmlWriter xmlWriter = XmlWriter.Create(memoryStream))
  		{
  			InternalPopulate(new GeographyMarkupLanguageWriter(xmlWriter));
  			xmlWriter.Flush();
  		}
  		return new SqlXml(memoryStream);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	[return: SqlFacet(MaxSize = -1)]
  	public override string ToString()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownText(writePointZM: true);
  		}
  		return "Null";
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography Parse(SqlString s)
  	{
  		ThrowIfArgumentNull(s, "s");
  		if (s.IsNull || string.Compare("Null", s.Value, ignoreCase: true) == 0)
  		{
  			return Null;
  		}
  		return GeographyFromText(OpenGisType.Unknown, new SqlChars(s), 4326);
  	}

  	private static void ThrowIfArgumentNull(object argument, string argumentName)
  	{
  		if (argument == null)
  		{
  			throw new ArgumentNullException(argumentName);
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography Point(double latitude, double longitude, int srid)
  	{
  		if (double.IsNaN(latitude) || double.IsInfinity(latitude) || double.IsNaN(longitude) || double.IsInfinity(longitude))
  		{
  			throw new FormatException(SpatialRes.StrPointCoordinateIsNotValid);
  		}
  		if (Math.Abs(latitude) > 90.0)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGeographyCoordinatesLatitudeIsNotValid, latitude));
  		}
  		if (Math.Abs(longitude) > 15069.0)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGeographyCoordinatesLongitudeIsNotValid, longitude));
  		}
  		return new SqlGeography(new Point(latitude, longitude), srid);
  	}

  	internal static GeoData ParseText(OpenGisType type, SqlChars taggedText, int srid)
  	{
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		GeoDataSink sink = new ForwardingGeoDataSink(new GeographyValidator(), geoDataBuilder);
  		new WellKnownTextReader(taggedText, new CoordinateReversingGeoDataSink(sink)).Read(type, 4326);
  		return geoDataBuilder.ConstructedGeoData;
  	}

  	internal static SqlGeography GeographyFromText(OpenGisType type, SqlChars taggedText, int srid)
  	{
  		ThrowIfArgumentNull(taggedText, "geographyTaggedText");
  		if (taggedText.IsNull)
  		{
  			return Null;
  		}
  		return new SqlGeography(ParseText(type, taggedText, srid), srid);
  	}

  	internal static SqlGeography GeographyFromBinary(OpenGisType type, SqlBytes wkbGeography, int srid)
  	{
  		ThrowIfArgumentNull(wkbGeography, "wkbGeography");
  		if (wkbGeography.IsNull)
  		{
  			return Null;
  		}
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		GeoDataSink sink = new ForwardingGeoDataSink(new GeographyValidator(), geoDataBuilder);
  		new WellKnownBinaryReader(wkbGeography, new CoordinateReversingGeoDataSink(sink)).Read(type, srid);
  		return new SqlGeography(geoDataBuilder.ConstructedGeoData, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STGeomFromText(SqlChars geometryTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.Unknown, geometryTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STPointFromText(SqlChars pointTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.Point, pointTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STLineFromText(SqlChars lineStringTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.LineString, lineStringTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STPolyFromText(SqlChars polygonTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.Polygon, polygonTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STMPointFromText(SqlChars multiPointTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.MultiPoint, multiPointTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STMLineFromText(SqlChars multiLineStringTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.MultiLineString, multiLineStringTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STMPolyFromText(SqlChars multiPolygonTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.MultiPolygon, multiPolygonTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeography STGeomCollFromText(SqlChars geometryCollectionTaggedText, int srid)
  	{
  		return GeographyFromText(OpenGisType.GeometryCollection, geometryCollectionTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STGeomFromWKB(SqlBytes wkbGeometry, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.Unknown, wkbGeometry, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STPointFromWKB(SqlBytes wkbPoint, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.Point, wkbPoint, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STLineFromWKB(SqlBytes wkbLineString, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.LineString, wkbLineString, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STPolyFromWKB(SqlBytes wkbPolygon, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.Polygon, wkbPolygon, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STMPointFromWKB(SqlBytes wkbMultiPoint, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.MultiPoint, wkbMultiPoint, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STMLineFromWKB(SqlBytes wkbMultiLineString, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.MultiLineString, wkbMultiLineString, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STMPolyFromWKB(SqlBytes wkbMultiPolygon, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.MultiPolygon, wkbMultiPolygon, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeography STGeomCollFromWKB(SqlBytes wkbGeometryCollection, int srid)
  	{
  		return GeographyFromBinary(OpenGisType.GeometryCollection, wkbGeometryCollection, srid);
  	}

  	public SqlBytes Serialize()
  	{
  		if (IsNull)
  		{
  			return SqlBytes.Null;
  		}
  		MemoryStream memoryStream = new MemoryStream();
  		Write(new BinaryWriter(memoryStream));
  		return new SqlBytes(memoryStream.ToArray());
  	}

  	public static SqlGeography Deserialize(SqlBytes bytes)
  	{
  		if (bytes.IsNull)
  		{
  			return Null;
  		}
  		SqlGeography sqlGeography = new SqlGeography();
  		sqlGeography.Read(new BinaryReader(bytes.Stream));
  		return sqlGeography;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STDimension()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetDimension();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlString STGeometryType()
  	{
  		if (IsNull)
  		{
  			return SqlString.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetGType().ToString("G");
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlChars STAsText()
  	{
  		if (!IsNull)
  		{
  			return new SqlChars(ToWellKnownText(writePointZM: false));
  		}
  		return SqlChars.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlChars AsTextZM()
  	{
  		if (!IsNull)
  		{
  			return new SqlChars(ToWellKnownText(writePointZM: true));
  		}
  		return SqlChars.Null;
  	}

  	private string ToWellKnownText(bool writePointZM)
  	{
  		StringWriter stringWriter = new StringWriter();
  		InternalPopulate(new CoordinateReversingGeoDataSink(new WellKnownTextWriter(stringWriter, writePointZM)));
  		return stringWriter.ToString();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBytes STAsBinary()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownBinary(writeZ: false, writeM: false);
  		}
  		return SqlBytes.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBytes AsBinaryZM()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownBinary(GeoData.HasZ(), GeoData.HasM());
  		}
  		return SqlBytes.Null;
  	}

  	private SqlBytes ToWellKnownBinary(bool writeZ, bool writeM)
  	{
  		MemoryStream memoryStream = new MemoryStream();
  		InternalPopulate(new CoordinateReversingGeoDataSink(new WellKnownBinaryWriter(memoryStream, writeZ, writeM)));
  		return new SqlBytes(memoryStream);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBoolean STIsEmpty()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		return GeoData.IsEmpty();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STEquals(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticEquals(GeoData, other.GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STDisjoint(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return !GLNativeMethods.GeodeticIntersects(GeoData, other.GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIntersects(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticIntersects(GeoData, other.GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STOverlaps(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticOverlaps(GeoData, other.GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STWithin(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticContains(other.GeoData, GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STContains(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticContains(GeoData, other.GeoData, GetEccentricity());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STDistance(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlDouble.Null;
  		}
  		if (GeoData.GetPointCount() == 1 && other.GeoData.GetPointCount() == 1)
  		{
  			return GLNativeMethods.GeodeticPointDistance(GeoData.GetPoint(0), other.GeoData.GetPoint(0), GetEllipsoidParameters());
  		}
  		if (GeoData.IsEmpty() || other.GeoData.IsEmpty())
  		{
  			return SqlDouble.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.GeodeticDistance(GeoData, other.GeoData, GetEllipsoidParameters(), 0.0, relative: false);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STBuffer(double distance)
  	{
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "STBuffer"));
  		}
  		return BufferWithTolerance(distance, Math.Abs(0.001 * distance), relative: false);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STIntersection(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticIntersection(GeoData, other.GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STUnion(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticUnion(GeoData, other.GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STDifference(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticDifference(GeoData, other.GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STSymDifference(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticSymDifference(GeoData, other.GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsValid()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		return GeoData.GetIsValid();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography NullOnInvalid()
  	{
  		if ((SqlBoolean)IsNull || !STIsValid())
  		{
  			return Null;
  		}
  		return this;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public string IsValidDetailed()
  	{
  		if (IsNull)
  		{
  			return null;
  		}
  		if (GeoData.GetIsValid())
  		{
  			return SpatialRes.StrValid;
  		}
  		UpdateClrFeatureSwitchMap();
  		GLNativeMethods.GeodeticIsValidDetailed(GeoData, GetEccentricity(), out var state, out var detail, out var detail2, out var entry);
  		return ValidityDetails.GetMessage(state, detail, detail2, entry, geography: true);
  	}

  	[SecuritySafeCritical]
  	private bool IsValidExpensive(bool forceKatmai)
  	{
  		UpdateClrFeatureSwitchMap();
  		if (GeoData.GetGType() != OpenGisType.Point && (GeoData.GetGType() != OpenGisType.MultiPoint || forceKatmai) && !GeoData.IsEmpty())
  		{
  			return GLNativeMethods.GeodeticIsValid(ref _geometry, GetEccentricity(), forceKatmai);
  		}
  		return true;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STArea()
  	{
  		if (IsNull)
  		{
  			return SqlDouble.Null;
  		}
  		ThrowIfInvalid();
  		return GLNativeMethods.GeodeticArea(GeoData, GetEllipsoidParameters());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsClosed()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GeodeticIsClosed();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STLength()
  	{
  		if (IsNull)
  		{
  			return SqlDouble.Null;
  		}
  		return GLNativeMethods.GeodeticLength(GeoData, GetEllipsoidParameters());
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumPoints()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetPointCount();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography STPointN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTPointNIndexTooSmall, n));
  		}
  		if (IsNull)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		if (n > GeoData.GetPointCount())
  		{
  			return Null;
  		}
  		return new SqlGeography(GeoData.GetPointN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumCurves()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		if (GeoData.GetGType() == OpenGisType.LineString)
  		{
  			if (GeoData.IsEmpty())
  			{
  				return 0;
  			}
  			return GeoData.GetPointCount() - 1;
  		}
  		if (GeoData.GetGType() == OpenGisType.CircularString)
  		{
  			if (GeoData.IsEmpty())
  			{
  				return 0;
  			}
  			return (GeoData.GetPointCount() - 1) / 2;
  		}
  		if (GeoData.GetGType() == OpenGisType.CompoundCurve)
  		{
  			return GeoData.GetSegmentCount();
  		}
  		return SqlInt32.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography STCurveN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTCurveNIndexTooSmall, n));
  		}
  		SqlInt32 sqlInt = STNumCurves();
  		if ((SqlBoolean)sqlInt.IsNull || n > sqlInt)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GeoData.GetCurveN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography STStartPoint()
  	{
  		return STPointN(1);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography STEndPoint()
  	{
  		if (IsNull || GeoData.GetPointCount() == 0)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return new SqlGeography(GeoData.GetPointN(GeoData.GetPointCount()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumGeometries()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.NumGeometries;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography STGeometryN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTGeometryNIndexTooSmall, n));
  		}
  		if (IsNull)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		if (n > GeoData.NumGeometries)
  		{
  			return Null;
  		}
  		GeoData geometryN = GeoData.GetGeometryN(n);
  		geometryN.SetIsValid(fValid: false);
  		return new SqlGeography(geometryN, Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STConvexHull()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return this;
  		}
  		ThrowIfInvalid();
  		if (GeoData.GetIsLargerThanAHemisphere())
  		{
  			return Construct(GeoDataBuilder.FullGlobeGeoData, Srid);
  		}
  		return Construct(GLNativeMethods.GeodeticConvexHull(GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography STCurveToLine()
  	{
  		return CurveToLineWithTolerance(0.001, relative: true);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography ShortestLineTo(SqlGeography other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid || GeoData.IsEmpty() || other.GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		GeoData g = GLNativeMethods.GeodeticShortestLineTo(GeoData, other.GeoData, GetEllipsoidParameters());
  		if (g.IsEmpty())
  		{
  			g.GetShapes()[0].type = OpenGisType.LineString;
  		}
  		return new SqlGeography(g, Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography MakeValid()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.GetIsValid())
  		{
  			return this;
  		}
  		if (GeoData.GetPointCount() <= 1 || GeoData.GetGType() == OpenGisType.MultiPoint)
  		{
  			GeoData.SetIsValid(fValid: true);
  			return new SqlGeography(GeoData, Srid);
  		}
  		UpdateClrFeatureSwitchMap();
  		return Construct(GLNativeMethods.GeodeticMakeValid(GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography Reduce(double tolerance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (tolerance < 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrReducePassedIllegalTolerance, tolerance));
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticReduce(GeoData, GetEllipsoidParameters(), tolerance), Srid);
  	}

  	private bool IsPoint()
  	{
  		if (!IsNull && GeoData.GetGType() == OpenGisType.Point)
  		{
  			return GeoData.GetPointCount() == 1;
  		}
  		return false;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 NumRings()
  	{
  		if (IsNull || !OpenGisTypes.IsPolygon(GeoData.GetGType()))
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.NumRings;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeography RingN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTInteriorRingNIndexTooSmall, n));
  		}
  		if (IsNull || !OpenGisTypes.IsPolygon(GeoData.GetGType()) || n > GeoData.NumRings)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		GeoData ringN = GeoData.GetRingN(n);
  		ringN.SetIsValid(fValid: false);
  		return new SqlGeography(ringN, Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBoolean InstanceOf(string geometryType)
  	{
  		ThrowIfArgumentNull(geometryType, "geometryType");
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		string[] array = _ancestorTypeNames[(uint)GeoData.GetGType()];
  		for (int i = 0; i < array.Length; i++)
  		{
  			if (string.Compare(geometryType, array[i], StringComparison.OrdinalIgnoreCase) == 0)
  			{
  				return true;
  			}
  		}
  		for (int j = 0; j < _allowedTypeNames.Length; j++)
  		{
  			if (string.Compare(geometryType, _allowedTypeNames[j], StringComparison.OrdinalIgnoreCase) == 0)
  			{
  				return false;
  			}
  		}
  		throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInstanceOfPassedIllegalType, geometryType));
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography BufferWithTolerance(double distance, double tolerance, bool relative)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "BufferWithTolerance"));
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeography(Srid);
  		}
  		ThrowIfInvalid();
  		EllipsoidParameters ellipsoidParameters = GetEllipsoidParameters();
  		if (Math.Abs(distance) <= 1E-09 * ellipsoidParameters.semi_minor)
  		{
  			return this;
  		}
  		if (GeoData.GetIsFullGlobe())
  		{
  			if (!(distance < 0.0))
  			{
  				return this;
  			}
  			return Null;
  		}
  		double num = (double)EnvelopeAngle() / 180.0 * Math.PI / ellipsoidParameters.GetMaxCurvature();
  		if (distance < 0.0 - num)
  		{
  			return new SqlGeography(Srid);
  		}
  		if (tolerance <= 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferWithTolerancePassedIllegalTolerance, tolerance));
  		}
  		if (relative)
  		{
  			tolerance *= Math.Abs(num + distance);
  		}
  		if (!IsPoint() && Math.Min(tolerance, distance) > 2.0 * num)
  		{
  			return Construct(GLNativeMethods.GeodeticBuffer(new GeoData(GeoData.GetPointN(1)), GetEllipsoidParameters(), distance, tolerance, returnCurves: false), Srid);
  		}
  		return Construct(GLNativeMethods.GeodeticBuffer(GeoData, GetEllipsoidParameters(), distance, tolerance, returnCurves: false), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography BufferWithCurves(double distance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "BufferWithCurves"));
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeography(Srid);
  		}
  		ThrowIfInvalid();
  		EllipsoidParameters ellipsoidParameters = GetEllipsoidParameters();
  		if (Math.Abs(distance) <= 1E-09 * ellipsoidParameters.semi_major)
  		{
  			return this;
  		}
  		return Construct(GLNativeMethods.GeodeticBuffer(GeoData, GetEllipsoidParameters(), distance, 0.0, returnCurves: true), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean Filter(SqlGeography other)
  	{
  		return STIntersects(other);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public int MinDbCompatibilityLevel()
  	{
  		if (GeoData.GetIsKatmaiCompatible())
  		{
  			return 100;
  		}
  		return 110;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography CurveToLineWithTolerance(double tolerance, bool relative)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (tolerance <= 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrCurveToLinePassedIllegalTolerance, tolerance));
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.GeodeticCurveToLineWithTolerance(GeoData, GetEllipsoidParameters(), tolerance, relative), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	unsafe void ISqlSpatialGridIndexable.GetGridCoverage(bool isTopmostGrid, double rGridMinX, double rGridMinY, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, int cGridRows, int cGridColumns, bool[,] touched, bool[,] contained, out int cCellsTouched, out int cCellsContained, out bool fGeometryExceedsGrid, out bool fHasAmbiguousTouchedCells)
  	{
  		fGeometryExceedsGrid = false;
  		fHasAmbiguousTouchedCells = false;
  		if (IsFullGlobe)
  		{
  			cCellsTouched = 0;
  			cCellsContained = cGridRows * cGridColumns;
  			for (int i = 0; i < cGridRows; i++)
  			{
  				for (int j = 0; j < cGridColumns; j++)
  				{
  					touched[i, j] = false;
  					contained[i, j] = true;
  				}
  			}
  			return;
  		}
  		bool[,] array = new bool[touched.GetLength(0), touched.GetLength(1)];
  		if (isTopmostGrid)
  		{
  			int num = cGridRows / 2;
  			int num2 = num * cGridColumns;
  			fixed (bool* ptr = array)
  			{
  				fixed (bool* ptr2 = touched)
  				{
  					fixed (bool* ptr3 = contained)
  					{
  						bool* pointer_ambiguouslyTouchedNorth = ptr + num2;
  						bool* pointer_touchedNorth = ptr2 + num2;
  						bool* pointer_containedNorth = ptr3 + num2;
  						GLNativeMethods.GeodeticGridCoverage(GeoData, GetEccentricity(), -281474976710656.0, -281474976710656.0, -281474976710656.0, -281474976710656.0, 562949953421312.0, 562949953421312.0, rFuzzX, rFuzzY, fStitchNorthernMinRow: true, fStitchNorthernMaxRow: true, fStitchNorthernMinCol: true, fStitchNorthernMaxCol: true, pointer_ambiguouslyTouchedNorth, pointer_touchedNorth, pointer_containedNorth, ptr, ptr2, ptr3, num, cGridColumns);
  					}
  				}
  			}
  		}
  		else
  		{
  			bool num3 = rGridMinY >= 0.0;
  			double num4 = -281474976710656.0 + rFuzzX;
  			double num5 = -281474976710656.0 + rFuzzY;
  			int num6 = cGridRows * cGridColumns;
  			bool[,] array2 = new bool[cGridRows, 3 * cGridColumns];
  			double num7;
  			double rGridMinYSouth;
  			if (num3)
  			{
  				num7 = rGridMinY - 281474976710656.0;
  				rGridMinYSouth = 0.0 - rGridMinY - rGridHeight + 281474976710656.0;
  			}
  			else
  			{
  				rGridMinYSouth = rGridMinY + 281474976710656.0;
  				num7 = 0.0 - rGridMinY - rGridHeight - 281474976710656.0;
  			}
  			fixed (bool* ptr4 = array)
  			{
  				fixed (bool* ptr5 = touched)
  				{
  					fixed (bool* ptr6 = contained)
  					{
  						fixed (bool* ptr7 = array2)
  						{
  							if (num3)
  							{
  								GLNativeMethods.GeodeticGridCoverage(GeoData, GetEccentricity(), rGridMinX, num7, rGridMinX, rGridMinYSouth, rGridWidth, rGridHeight, rFuzzX, rFuzzY, num7 <= num5, num7 + rGridHeight >= 0.0 - num5, rGridMinX <= num4, rGridMinX + rGridWidth >= 0.0 - num4, ptr4, ptr5, ptr6, ptr7, ptr7 + num6, ptr7 + 2 * num6, cGridRows, cGridColumns);
  							}
  							else
  							{
  								GLNativeMethods.GeodeticGridCoverage(GeoData, GetEccentricity(), rGridMinX, num7, rGridMinX, rGridMinYSouth, rGridWidth, rGridHeight, rFuzzX, rFuzzY, num7 <= num5, num7 + rGridHeight >= 0.0 - num5, rGridMinX <= num4, rGridMinX + rGridWidth >= 0.0 - num4, ptr7, ptr7 + num6, ptr7 + 2 * num6, ptr4, ptr5, ptr6, cGridRows, cGridColumns);
  							}
  						}
  					}
  				}
  			}
  		}
  		cCellsTouched = 0;
  		cCellsContained = 0;
  		for (int k = 0; k < touched.GetLength(0); k++)
  		{
  			for (int l = 0; l < touched.GetLength(1); l++)
  			{
  				if (array[k, l])
  				{
  					touched[k, l] = true;
  					fHasAmbiguousTouchedCells = true;
  				}
  				if (touched[k, l])
  				{
  					cCellsTouched++;
  				}
  				else if (contained[k, l])
  				{
  					cCellsContained++;
  				}
  			}
  		}
  	}

  	void ISqlSpatialGridIndexable.GetBoundingBoxCorners(out double minX, out double minY, out double maxX, out double maxY)
  	{
  		minX = 0.0;
  		minY = 0.0;
  		maxX = 0.0;
  		maxY = 0.0;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable ISqlSpatialGridIndexable.BufferForDistanceQuery(double distance, out bool disableIntermediateFiltering)
  	{
  		disableIntermediateFiltering = true;
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeography(Srid);
  		}
  		ThrowIfInvalid();
  		if (distance <= 0.0)
  		{
  			disableIntermediateFiltering = distance < 0.0;
  			return this;
  		}
  		if (GeoData.GetIsFullGlobe())
  		{
  			disableIntermediateFiltering = false;
  			return this;
  		}
  		try
  		{
  			EllipsoidParameters ellipsoidParameters = GetEllipsoidParameters();
  			double val = GLNativeMethods.GeodeticAngleExtent(GeoData, ellipsoidParameters.GetEccentricity()) / ellipsoidParameters.GetMinCurvature();
  			double num = 0.001 * Math.Min(val, distance);
  			double val2 = distance + 2.0 * num;
  			val2 = Math.Max(val2, 1E-09 * ellipsoidParameters.semi_minor);
  			double num2 = 0.001 * val2;
  			val2 += 2.0 * num2;
  			disableIntermediateFiltering = false;
  			GeoData g = GLNativeMethods.GeodeticReduce(GeoData, GetEllipsoidParameters(), num);
  			if (!GeoData.GetIsKatmaiCompatible() && GeoData.GetDimension() == 2 && g.GetDimension() < 2)
  			{
  				g = GeoData;
  				disableIntermediateFiltering = true;
  			}
  			GeoData g2 = GLNativeMethods.GeodeticBuffer(g, GetEllipsoidParameters(), val2, num2, returnCurves: false);
  			g2.SetIsKatmaiCompatible(!g2.GetIsLargerThanAHemisphere());
  			return new SqlGeography(g2, Srid);
  		}
  		catch (GLArgumentException ex)
  		{
  			disableIntermediateFiltering = true;
  			if (ex.Result == GL_HResult.GL_E_GEODETIC_BUFFER_WRAPS_AROUND || ex.Result == GL_HResult.GL_E_GEODETIC_RESULT_EXCEEDS_HEMISPHERE)
  			{
  				return new SqlGeography(GeoDataBuilder.FullGlobeGeoData, Srid);
  			}
  			throw;
  		}
  	}

  	[Obsolete("Populate(IGeographySink) method is obsolete, use Populate(IGeographySink110) instead.")]
  	public void Populate(IGeographySink sink)
  	{
  		if (!IsNull)
  		{
  			if (GeoData.ContainsCurvedShapes())
  			{
  				throw new ArgumentException(SpatialRes.StrIncompatibleGeographySinks);
  			}
  			InternalPopulate(new GeographyOutputSink(sink));
  		}
  	}

  	public void Populate(IGeographySink110 sink)
  	{
  		if (!IsNull)
  		{
  			InternalPopulate(new GeographyOutputSink(sink));
  		}
  	}

  	private void InternalPopulate(GeoDataSink sink)
  	{
  		sink.SetSrid(_srid);
  		_geometry.Populate(sink);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable ISqlSpatialGridIndexable.InteriorBufferForDistanceQuery(double distance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeography(Srid);
  		}
  		if (GeoData.GetIsFullGlobe())
  		{
  			return this;
  		}
  		ThrowIfInvalid();
  		if (distance <= 0.0)
  		{
  			return this;
  		}
  		try
  		{
  			EllipsoidParameters ellipsoidParameters = GetEllipsoidParameters();
  			double val = GLNativeMethods.GeodeticAngleExtent(GeoData, GetEccentricity()) / ellipsoidParameters.GetMinCurvature();
  			double num = 0.001 * Math.Min(val, distance);
  			double num2 = distance - num;
  			double num3 = 0.001 * num2;
  			num2 -= 2.0 * num3;
  			GeoData g = GLNativeMethods.GeodeticBuffer(GLNativeMethods.GeodeticReduce(GeoData, GetEllipsoidParameters(), num), GetEllipsoidParameters(), num2, num3, returnCurves: false);
  			g.SetIsKatmaiCompatible(!g.GetIsLargerThanAHemisphere());
  			return new SqlGeography(g, Srid);
  		}
  		catch (GLArgumentException ex)
  		{
  			if (ex.Result == GL_HResult.GL_E_GEODETIC_BUFFER_WRAPS_AROUND || ex.Result == GL_HResult.GL_E_GEODETIC_RESULT_EXCEEDS_HEMISPHERE)
  			{
  				return this;
  			}
  			throw;
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble EnvelopeAngle()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return SqlDouble.Null;
  		}
  		ThrowIfInvalid();
  		if (GeoData.GetIsLargerThanAHemisphere())
  		{
  			return 180.0;
  		}
  		return GLNativeMethods.GeodeticAngleExtent(GeoData, GetEccentricity()) * 180.0 / Math.PI;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography EnvelopeCenter()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		if (GeoData.GetIsLargerThanAHemisphere())
  		{
  			return new SqlGeography(new Point(90.0, 0.0), Srid);
  		}
  		return new SqlGeography(GLNativeMethods.GeodeticCapCenter(GeoData, GetEccentricity()), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeography ReorientObject()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeography(Srid);
  		}
  		ThrowIfInvalid();
  		if (OpenGisTypes.IsPolygon(GeoData.GetGType()) || GeoData.GetGType() == OpenGisType.MultiPolygon)
  		{
  			return Construct(GLNativeMethods.GeodeticSymDifference(GeoDataBuilder.FullGlobeGeoData, GeoData, GetEccentricity()), Srid);
  		}
  		if (GeoData.GetDimension() < 2)
  		{
  			return this;
  		}
  		ReorientSink reorientSink = new ReorientSink();
  		InternalPopulate(reorientSink);
  		return Construct(reorientSink.ConstructedGeoData(), Srid);
  	}

  	internal static bool IsKatmaiCompatLevel()
  	{
  		object data = AppDomain.CurrentDomain.GetData("compatibility_level");
  		if (data != null)
  		{
  			return (int)data < 110;
  		}
  		return false;
  	}

  	internal static void UpdateClrFeatureSwitchMap()
  	{
  		if (_isClrFeatureSwitchMapSet)
  		{
  			return;
  		}
  		lock (_lockObject)
  		{
  			if (!_isClrFeatureSwitchMapSet)
  			{
  				GLNativeMethods.SetClrFeatureSwitches(ClrFeatureSwitchMap());
  				Thread.MemoryBarrier();
  				_isClrFeatureSwitchMapSet = true;
  			}
  		}
  	}

  	internal static int ClrFeatureSwitchMap()
  	{
  		object data = AppDomain.CurrentDomain.GetData("clr_feature_switch_map");
  		if (data == null)
  		{
  			return 0;
  		}
  		return (int)data;
  	}
  }
  [Serializable]
  [CLSCompliant(true)]
  [SqlUserDefinedType(Format.UserDefined, IsByteOrdered = false, MaxByteSize = -1, IsFixedLength = false)]
  public sealed class SqlGeometry : INullable, IBinarySerialize, ISqlSpatialGridIndexable
  {
  	internal const int DefaultSrid = 0;

  	private const int NullSrid = -1;

  	private const int MinSrid = 0;

  	private const int MaxSrid = 999999;

  	private const double DefaultSimpleBufferTolerance = 0.01;

  	private const double DefaultBufferTolerance = 0.001;

  	private const double MinimalRelativeBufferDistance = 1E-12;

  	private GeoData _geometry;

  	private bool _isNull;

  	private int _srid;

  	private static readonly string[] _allowedTypeNames = new string[15]
  	{
  		"Geometry", "Point", "LineString", "Polygon", "Curve", "Surface", "MultiPoint", "MultiLineString", "MultiPolygon", "MultiCurve",
  		"MultiSurface", "GeometryCollection", "CircularString", "CompoundCurve", "CurvePolygon"
  	};

  	private static readonly string[][] _ancestorTypeNames = new string[11][]
  	{
  		new string[0],
  		new string[2] { "Geometry", "Point" },
  		new string[3] { "Geometry", "Curve", "LineString" },
  		new string[3] { "Geometry", "Surface", "Polygon" },
  		new string[3] { "Geometry", "GeometryCollection", "MultiPoint" },
  		new string[4] { "Geometry", "GeometryCollection", "MultiCurve", "MultiLineString" },
  		new string[4] { "Geometry", "GeometryCollection", "MultiSurface", "MultiPolygon" },
  		new string[2] { "Geometry", "GeometryCollection" },
  		new string[3] { "Geometry", "Curve", "CircularString" },
  		new string[3] { "Geometry", "Curve", "CompoundCurve" },
  		new string[3] { "Geometry", "Surface", "CurvePolygon" }
  	};

  	public bool IsNull
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			return _isNull;
  		}
  	}

  	public static SqlGeometry Null
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			return new SqlGeometry(fNull: true);
  		}
  	}

  	internal GeoData GeoData => _geometry;

  	internal int Srid
  	{
  		get
  		{
  			return _srid;
  		}
  		set
  		{
  			if (value < 0 || value > 999999)
  			{
  				throw new ArgumentException(SpatialRes.StrSridOutOfRange);
  			}
  			_srid = value;
  		}
  	}

  	public SqlInt32 STSrid
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (IsNull)
  			{
  				return SqlInt32.Null;
  			}
  			return Srid;
  		}
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		set
  		{
  			if (value.IsNull)
  			{
  				throw new ArgumentNullException();
  			}
  			Srid = value.Value;
  		}
  	}

  	public SqlDouble STX
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.X;
  		}
  	}

  	public SqlDouble STY
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.Y;
  		}
  	}

  	public SqlDouble Z
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint() || !GeoData.HasZ())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.Z;
  		}
  	}

  	public SqlDouble M
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsPoint() || !GeoData.HasM())
  			{
  				return SqlDouble.Null;
  			}
  			return GeoData.M;
  		}
  	}

  	public bool HasZ
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsNull)
  			{
  				return GeoData.HasZ();
  			}
  			return false;
  		}
  	}

  	public bool HasM
  	{
  		[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  		get
  		{
  			if (!IsNull)
  			{
  				return GeoData.HasM();
  			}
  			return false;
  		}
  	}

  	internal SqlGeometry(bool fNull)
  	{
  		_isNull = fNull;
  	}

  	public SqlGeometry()
  		: this(0)
  	{
  	}

  	internal SqlGeometry(int srid)
  		: this(GeoDataBuilder.EmptyGeoData, srid)
  	{
  	}

  	internal SqlGeometry(PointZM p, int srid)
  		: this(new GeoData(p), srid)
  	{
  	}

  	internal static SqlGeometry Construct(GeoData g, int srid)
  	{
  		g.SetIsKatmaiCompatible(!g.ContainsCurvedShapes());
  		if (!g.GetIsKatmaiCompatible() && SqlGeography.IsKatmaiCompatLevel())
  		{
  			throw new FormatException(SpatialRes.StrWrongCompatibilityLevel);
  		}
  		return new SqlGeometry(g, srid);
  	}

  	internal SqlGeometry(GeoData g, int srid)
  	{
  		Srid = srid;
  		g.SetIsKatmaiCompatible(!g.ContainsCurvedShapes());
  		_geometry = g;
  		if (!_geometry.GetIsValid())
  		{
  			UpdateClrFeatureSwitchMap();
  			_geometry.SetIsValid(IsValidExpensive());
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Read(BinaryReader r)
  	{
  		if (r == null)
  		{
  			return;
  		}
  		try
  		{
  			int num = r.ReadInt32();
  			_isNull = num == -1;
  			if (!IsNull)
  			{
  				Srid = num;
  				_geometry = default(GeoData);
  				_geometry.Read(r, SerializationVersion.SQL11_Fullglobe, SpatialRes.StrUnexpectedVersion, isGeography: false);
  			}
  		}
  		catch (EndOfStreamException)
  		{
  			throw new FormatException();
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Write(BinaryWriter w)
  	{
  		if (w != null)
  		{
  			if (IsNull)
  			{
  				w.Write(-1);
  				return;
  			}
  			w.Write(Srid);
  			_geometry.Write(w);
  		}
  	}

  	internal void ThrowIfInvalid()
  	{
  		if (!GeoData.GetIsValid())
  		{
  			throw new ArgumentException(SpatialRes.StrInstanceIsNotValid);
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry GeomFromGml(SqlXml xml, int srid)
  	{
  		ThrowIfArgumentNull(xml, "xml");
  		if (xml.IsNull)
  		{
  			return Null;
  		}
  		using XmlReader reader = xml.CreateReader();
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		new GeographyMarkupLanguageReader(reader, new ForwardingGeoDataSink(new GeometryValidator(), geoDataBuilder)).Read(srid);
  		return Construct(geoDataBuilder.ConstructedGeoData, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlXml AsGml()
  	{
  		if (IsNull)
  		{
  			return SqlXml.Null;
  		}
  		MemoryStream memoryStream = new MemoryStream();
  		using (XmlWriter xmlWriter = XmlWriter.Create(memoryStream))
  		{
  			InternalPopulate(new GeographyMarkupLanguageWriter(xmlWriter));
  			xmlWriter.Flush();
  		}
  		return new SqlXml(memoryStream);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	[return: SqlFacet(MaxSize = -1)]
  	public override string ToString()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownText(writePointZM: true);
  		}
  		return "Null";
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry Parse(SqlString s)
  	{
  		ThrowIfArgumentNull(s, "s");
  		if (s.IsNull || string.Compare("Null", s.Value, ignoreCase: true) == 0)
  		{
  			return Null;
  		}
  		return STGeomFromText(new SqlChars(s), 0);
  	}

  	private static void ThrowIfArgumentNull(object argument, string argumentName)
  	{
  		if (argument == null)
  		{
  			throw new ArgumentNullException(argumentName);
  		}
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry Point(double x, double y, int srid)
  	{
  		if (double.IsNaN(x) || double.IsInfinity(x) || double.IsNaN(y) || double.IsInfinity(y))
  		{
  			throw new FormatException(SpatialRes.StrPointCoordinateIsNotValid);
  		}
  		return new SqlGeometry(new PointZM(x, y, double.NaN, double.NaN), srid);
  	}

  	internal static SqlGeometry GeometryFromText(OpenGisType type, SqlChars text, int srid)
  	{
  		if (text.IsNull)
  		{
  			return Null;
  		}
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		new WellKnownTextReader(text, new ForwardingGeoDataSink(new GeometryValidator(), geoDataBuilder)).Read(type, srid);
  		return Construct(geoDataBuilder.ConstructedGeoData, srid);
  	}

  	internal static SqlGeometry GeometryFromBinary(OpenGisType type, SqlBytes binary, int srid)
  	{
  		if (binary.IsNull)
  		{
  			return Null;
  		}
  		GeoDataBuilder geoDataBuilder = new GeoDataBuilder();
  		new WellKnownBinaryReader(binary, new ForwardingGeoDataSink(new GeometryValidator(), geoDataBuilder)).Read(type, srid);
  		return Construct(geoDataBuilder.ConstructedGeoData, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STGeomFromText(SqlChars geometryTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(geometryTaggedText, "geometryTaggedText");
  		return GeometryFromText(OpenGisType.Unknown, geometryTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STPointFromText(SqlChars pointTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(pointTaggedText, "pointTaggedText");
  		return GeometryFromText(OpenGisType.Point, pointTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STLineFromText(SqlChars lineStringTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(lineStringTaggedText, "lineStringTaggedText");
  		return GeometryFromText(OpenGisType.LineString, lineStringTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STPolyFromText(SqlChars polygonTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(polygonTaggedText, "polygonTaggedText");
  		return GeometryFromText(OpenGisType.Polygon, polygonTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STMPointFromText(SqlChars multiPointTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(multiPointTaggedText, "multiPointTaggedText");
  		return GeometryFromText(OpenGisType.MultiPoint, multiPointTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STMLineFromText(SqlChars multiLineStringTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(multiLineStringTaggedText, "multiLineStringTaggedText");
  		return GeometryFromText(OpenGisType.MultiLineString, multiLineStringTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STMPolyFromText(SqlChars multiPolygonTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(multiPolygonTaggedText, "multiPolygonTaggedText");
  		return GeometryFromText(OpenGisType.MultiPolygon, multiPolygonTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public static SqlGeometry STGeomCollFromText(SqlChars geometryCollectionTaggedText, int srid)
  	{
  		ThrowIfArgumentNull(geometryCollectionTaggedText, "geometryCollectionTaggedText");
  		return GeometryFromText(OpenGisType.GeometryCollection, geometryCollectionTaggedText, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STGeomFromWKB(SqlBytes wkbGeometry, int srid)
  	{
  		ThrowIfArgumentNull(wkbGeometry, "wkbGeometry");
  		return GeometryFromBinary(OpenGisType.Unknown, wkbGeometry, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STPointFromWKB(SqlBytes wkbPoint, int srid)
  	{
  		ThrowIfArgumentNull(wkbPoint, "wkbPoint");
  		return GeometryFromBinary(OpenGisType.Point, wkbPoint, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STLineFromWKB(SqlBytes wkbLineString, int srid)
  	{
  		ThrowIfArgumentNull(wkbLineString, "wkbLineString");
  		return GeometryFromBinary(OpenGisType.LineString, wkbLineString, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STPolyFromWKB(SqlBytes wkbPolygon, int srid)
  	{
  		ThrowIfArgumentNull(wkbPolygon, "wkbPolygon");
  		return GeometryFromBinary(OpenGisType.Polygon, wkbPolygon, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STMPointFromWKB(SqlBytes wkbMultiPoint, int srid)
  	{
  		ThrowIfArgumentNull(wkbMultiPoint, "wkbMultiPoint");
  		return GeometryFromBinary(OpenGisType.MultiPoint, wkbMultiPoint, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STMLineFromWKB(SqlBytes wkbMultiLineString, int srid)
  	{
  		ThrowIfArgumentNull(wkbMultiLineString, "wkbMultiLineString");
  		return GeometryFromBinary(OpenGisType.MultiLineString, wkbMultiLineString, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STMPolyFromWKB(SqlBytes wkbMultiPolygon, int srid)
  	{
  		ThrowIfArgumentNull(wkbMultiPolygon, "wkbMultiPolygon");
  		return GeometryFromBinary(OpenGisType.MultiPolygon, wkbMultiPolygon, srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public static SqlGeometry STGeomCollFromWKB(SqlBytes wkbGeometryCollection, int srid)
  	{
  		ThrowIfArgumentNull(wkbGeometryCollection, "wkbGeometryCollection");
  		return GeometryFromBinary(OpenGisType.GeometryCollection, wkbGeometryCollection, srid);
  	}

  	public SqlBytes Serialize()
  	{
  		if (IsNull)
  		{
  			return SqlBytes.Null;
  		}
  		MemoryStream memoryStream = new MemoryStream();
  		Write(new BinaryWriter(memoryStream));
  		return new SqlBytes(memoryStream.ToArray());
  	}

  	public static SqlGeometry Deserialize(SqlBytes bytes)
  	{
  		if (bytes.IsNull)
  		{
  			return Null;
  		}
  		SqlGeometry sqlGeometry = new SqlGeometry();
  		sqlGeometry.Read(new BinaryReader(bytes.Stream));
  		return sqlGeometry;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STDimension()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetDimension();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlString STGeometryType()
  	{
  		if (IsNull)
  		{
  			return SqlString.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetGType().ToString("G");
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STEnvelope()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.Envelope(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlChars STAsText()
  	{
  		if (!IsNull)
  		{
  			return new SqlChars(ToWellKnownText(writePointZM: false));
  		}
  		return SqlChars.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlChars AsTextZM()
  	{
  		if (!IsNull)
  		{
  			return new SqlChars(ToWellKnownText(writePointZM: true));
  		}
  		return SqlChars.Null;
  	}

  	private string ToWellKnownText(bool writePointZM)
  	{
  		StringWriter stringWriter = new StringWriter();
  		InternalPopulate(new WellKnownTextWriter(stringWriter, writePointZM));
  		return stringWriter.ToString();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBytes STAsBinary()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownBinary(writeZ: false, writeM: false);
  		}
  		return SqlBytes.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBytes AsBinaryZM()
  	{
  		if (!IsNull)
  		{
  			return ToWellKnownBinary(GeoData.HasZ(), GeoData.HasM());
  		}
  		return SqlBytes.Null;
  	}

  	private SqlBytes ToWellKnownBinary(bool writeZ, bool writeM)
  	{
  		MemoryStream memoryStream = new MemoryStream();
  		InternalPopulate(new WellKnownBinaryWriter(memoryStream, writeZ, writeM));
  		return new SqlBytes(memoryStream);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBoolean STIsEmpty()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		return GeoData.IsEmpty();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsSimple()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		return GLNativeMethods.IsSimple(GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STBoundary()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.Boundary(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STEquals(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Equals(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STRelate(SqlGeometry other, string intersectionPatternMatrix)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		if (string.IsNullOrEmpty(intersectionPatternMatrix))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTRelatePassedIntersectionPatternMatrixWithIncorrectSize, 0));
  		}
  		if (intersectionPatternMatrix.Length != 9)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTRelatePassedIntersectionPatternMatrixWithIncorrectSize, intersectionPatternMatrix.Length));
  		}
  		for (int i = 0; i < 9; i++)
  		{
  			if (intersectionPatternMatrix[i] != 'T' && intersectionPatternMatrix[i] != 'F' && intersectionPatternMatrix[i] != '*' && intersectionPatternMatrix[i] != '0' && intersectionPatternMatrix[i] != '1' && intersectionPatternMatrix[i] != '2')
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTRelatePassedIntersectionPatternMatrixWithNotValidCharacter, i, intersectionPatternMatrix[i]));
  			}
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Relate(GeoData, other.GeoData, intersectionPatternMatrix);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STDisjoint(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return !GLNativeMethods.Intersects(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIntersects(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		UpdateClrFeatureSwitchMap();
  		return GLNativeMethods.Intersects(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STTouches(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Touches(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STCrosses(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Crosses(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STWithin(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		UpdateClrFeatureSwitchMap();
  		return GLNativeMethods.Contains(other.GeoData, GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STContains(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		UpdateClrFeatureSwitchMap();
  		return GLNativeMethods.Contains(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STOverlaps(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Overlaps(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STDistance(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return SqlDouble.Null;
  		}
  		if (GeoData.GetPointCount() == 1 && other.GeoData.GetPointCount() == 1)
  		{
  			double num = GeoData.X - other.GeoData.X;
  			double num2 = GeoData.Y - other.GeoData.Y;
  			return Math.Sqrt(num * num + num2 * num2);
  		}
  		if (GeoData.IsEmpty() || other.GeoData.IsEmpty())
  		{
  			return SqlDouble.Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return GLNativeMethods.Distance(GeoData, other.GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STBuffer(double distance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "STBuffer"));
  		}
  		if (distance == 0.0)
  		{
  			return this;
  		}
  		ThrowIfInvalid();
  		return BufferWithTolerance(distance, Math.Abs(0.001 * distance), relative: false);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STConvexHull()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.ConvexHull(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STIntersection(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.Intersection(GeoData, other.GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STUnion(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.Union(GeoData, other.GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STDifference(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.Difference(GeoData, other.GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STSymDifference(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		return Construct(GLNativeMethods.SymDifference(GeoData, other.GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsValid()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		return GeoData.GetIsValid();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry NullOnInvalid()
  	{
  		if ((SqlBoolean)IsNull || !STIsValid())
  		{
  			return Null;
  		}
  		return this;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public string IsValidDetailed()
  	{
  		if (IsNull)
  		{
  			return null;
  		}
  		if (GeoData.GetIsValid())
  		{
  			return SpatialRes.StrValid;
  		}
  		UpdateClrFeatureSwitchMap();
  		GLNativeMethods.IsValidDetailed(GeoData, out var state, out var detail, out var detail2, out var entry);
  		return ValidityDetails.GetMessage(state, detail, detail2, entry, geography: false);
  	}

  	[SecuritySafeCritical]
  	private bool IsValidExpensive()
  	{
  		UpdateClrFeatureSwitchMap();
  		if (GeoData.GetPointCount() > 1 && GeoData.GetGType() != OpenGisType.MultiPoint)
  		{
  			return GLNativeMethods.IsValid(GeoData);
  		}
  		return true;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STArea()
  	{
  		if (IsNull)
  		{
  			return SqlDouble.Null;
  		}
  		ThrowIfInvalid();
  		return GLNativeMethods.Area(GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STPointOnSurface()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.PointOnSurface(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsClosed()
  	{
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.IsClosed();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean STIsRing()
  	{
  		if (IsNull || (GeoData.GetGType() != OpenGisType.LineString && GeoData.GetGType() != OpenGisType.CircularString && GeoData.GetGType() != OpenGisType.CompoundCurve))
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		return STIsClosed() && STIsSimple();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlDouble STLength()
  	{
  		if (IsNull)
  		{
  			return SqlDouble.Null;
  		}
  		return GLNativeMethods.Length(GeoData);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumPoints()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.GetPointCount();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STPointN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTPointNIndexTooSmall, n));
  		}
  		if ((SqlBoolean)IsNull || n > STNumPoints())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return new SqlGeometry(GeoData.GetPointN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumCurves()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		if (GeoData.GetGType() == OpenGisType.LineString)
  		{
  			if (GeoData.IsEmpty())
  			{
  				return 0;
  			}
  			return GeoData.GetPointCount() - 1;
  		}
  		if (GeoData.GetGType() == OpenGisType.CircularString)
  		{
  			if (GeoData.IsEmpty())
  			{
  				return 0;
  			}
  			return (GeoData.GetPointCount() - 1) / 2;
  		}
  		if (GeoData.GetGType() == OpenGisType.CompoundCurve)
  		{
  			return GeoData.GetSegmentCount();
  		}
  		return SqlInt32.Null;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STCurveN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTCurveNIndexTooSmall, n));
  		}
  		SqlInt32 sqlInt = STNumCurves();
  		if ((SqlBoolean)sqlInt.IsNull || n > sqlInt)
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GeoData.GetCurveN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STStartPoint()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return STPointN(1);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STEndPoint()
  	{
  		if (IsNull || GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return STPointN(STNumPoints().Value);
  	}

  	private bool IsPoint()
  	{
  		if (!IsNull && GeoData.GetGType() == OpenGisType.Point)
  		{
  			return GeoData.GetPointCount() == 1;
  		}
  		return false;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STCentroid()
  	{
  		if (IsNull || GeoData.IsEmpty() || (!OpenGisTypes.IsPolygon(GeoData.GetGType()) && GeoData.GetGType() != OpenGisType.MultiPolygon))
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.Centroid(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STExteriorRing()
  	{
  		if (IsNull || !OpenGisTypes.IsPolygon(GeoData.GetGType()) || GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GeoData.ExteriorRing, Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumInteriorRing()
  	{
  		if (IsNull || !OpenGisTypes.IsPolygon(GeoData.GetGType()))
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.NumInteriorRing;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STInteriorRingN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTInteriorRingNIndexTooSmall, n));
  		}
  		if ((SqlBoolean)(IsNull || !OpenGisTypes.IsPolygon(GeoData.GetGType())) || n > STNumInteriorRing())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GeoData.GetInteriorRingN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlInt32 STNumGeometries()
  	{
  		if (IsNull)
  		{
  			return SqlInt32.Null;
  		}
  		ThrowIfInvalid();
  		return GeoData.NumGeometries;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlGeometry STGeometryN(int n)
  	{
  		if (n < 1)
  		{
  			throw new ArgumentOutOfRangeException("n", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSTGeometryNIndexTooSmall, n));
  		}
  		if ((SqlBoolean)IsNull || n > STNumGeometries())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		return Construct(GeoData.GetGeometryN(n), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry STCurveToLine()
  	{
  		return CurveToLineWithTolerance(0.001, relative: true);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public SqlBoolean InstanceOf(string geometryType)
  	{
  		ThrowIfArgumentNull(geometryType, "geometryType");
  		if (IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		ThrowIfInvalid();
  		string[] array = _ancestorTypeNames[(uint)GeoData.GetGType()];
  		for (int i = 0; i < array.Length; i++)
  		{
  			if (string.Compare(geometryType, array[i], StringComparison.OrdinalIgnoreCase) == 0)
  			{
  				return true;
  			}
  		}
  		for (int j = 0; j < _allowedTypeNames.Length; j++)
  		{
  			if (string.Compare(geometryType, _allowedTypeNames[j], StringComparison.OrdinalIgnoreCase) == 0)
  			{
  				return false;
  			}
  		}
  		throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInstanceOfPassedIllegalType, geometryType));
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry BufferWithTolerance(double distance, double tolerance, bool relative)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "BufferWithTolerance"));
  		}
  		if (tolerance <= 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferWithTolerancePassedIllegalTolerance, tolerance));
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeometry(Srid);
  		}
  		if (Math.Abs(distance) <= 1E-12 * GetDiagonalDistance())
  		{
  			return this;
  		}
  		ThrowIfInvalid();
  		if (relative)
  		{
  			tolerance *= Math.Abs(distance);
  		}
  		if (!IsPoint() && Math.Min(tolerance, distance) > GetDiagonalDistance())
  		{
  			return Construct(GLNativeMethods.Buffer(new GeoData(GeoData.GetPointN(1)), distance, tolerance, returnCurves: false), Srid);
  		}
  		return Construct(GLNativeMethods.Buffer(GeoData, distance, tolerance, returnCurves: false), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry BufferWithCurves(double distance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (double.IsNaN(distance) || double.IsInfinity(distance))
  		{
  			throw new ArgumentOutOfRangeException("distance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrBufferPassedIllegalDistance, distance, "BufferWithCurves"));
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeometry(Srid);
  		}
  		ThrowIfInvalid();
  		if (Math.Abs(distance) <= 1E-12 * GetDiagonalDistance())
  		{
  			return this;
  		}
  		return Construct(GLNativeMethods.Buffer(GeoData, distance, 0.0, returnCurves: true), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry MakeValid()
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.GetIsValid())
  		{
  			return this;
  		}
  		if (GeoData.GetPointCount() <= 1 || GeoData.GetGType() == OpenGisType.MultiPoint)
  		{
  			GeoData.SetIsValid(fValid: true);
  			return Construct(GeoData, Srid);
  		}
  		UpdateClrFeatureSwitchMap();
  		return Construct(GLNativeMethods.MakeValid(GeoData), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry ShortestLineTo(SqlGeometry other)
  	{
  		if (IsNull || other == null || other.IsNull || Srid != other.Srid || GeoData.IsEmpty() || other.GeoData.IsEmpty())
  		{
  			return Null;
  		}
  		ThrowIfInvalid();
  		other.ThrowIfInvalid();
  		GeoData g = GLNativeMethods.ShortestLineTo(GeoData, other.GeoData);
  		if (g.IsEmpty())
  		{
  			g.GetShapes()[0].type = OpenGisType.LineString;
  		}
  		return Construct(g, Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry Reduce(double tolerance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (tolerance < 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrReducePassedIllegalTolerance, tolerance));
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.Reduce(GeoData, tolerance), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public int MinDbCompatibilityLevel()
  	{
  		if (GeoData.GetIsKatmaiCompatible())
  		{
  			return 100;
  		}
  		return 110;
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlBoolean Filter(SqlGeometry other)
  	{
  		return STIntersects(other);
  	}

  	void ISqlSpatialGridIndexable.GetGridCoverage(bool isTopmostGrid, double rGridMinX, double rGridMinY, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, int cGridRows, int cGridColumns, bool[,] touched, bool[,] contained, out int cCellsTouched, out int cCellsContained, out bool fGeometryExceedsGrid, out bool fHasAmbiguousTouchedCells)
  	{
  		bool[,] array = new bool[touched.GetLength(0), touched.GetLength(1)];
  		GLNativeMethods.GetGridCoverage(GeoData, rGridMinX, rGridMinY, rGridWidth, rGridHeight, rFuzzX, rFuzzY, array, touched, contained, out fGeometryExceedsGrid);
  		cCellsTouched = 0;
  		cCellsContained = 0;
  		fHasAmbiguousTouchedCells = false;
  		for (int i = 0; i < touched.GetLength(0); i++)
  		{
  			for (int j = 0; j < touched.GetLength(1); j++)
  			{
  				if (array[i, j])
  				{
  					touched[i, j] = true;
  					fHasAmbiguousTouchedCells = true;
  				}
  				if (touched[i, j])
  				{
  					cCellsTouched++;
  				}
  				else if (contained[i, j])
  				{
  					cCellsContained++;
  				}
  			}
  		}
  	}

  	void ISqlSpatialGridIndexable.GetBoundingBoxCorners(out double minX, out double minY, out double maxX, out double maxY)
  	{
  		GLNativeMethods.GetBounds(GeoData, out minX, out minY, out maxX, out maxY);
  	}

  	private double GetDiagonalDistance()
  	{
  		((ISqlSpatialGridIndexable)this).GetBoundingBoxCorners(out double minX, out double minY, out double maxX, out double maxY);
  		return Math.Sqrt((maxX - minX) * (maxX - minX) + (maxY - minY) * (maxY - minY));
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable ISqlSpatialGridIndexable.BufferForDistanceQuery(double distance, out bool disableInternalFiltering)
  	{
  		disableInternalFiltering = true;
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeometry(Srid);
  		}
  		ThrowIfInvalid();
  		if (distance <= 0.0)
  		{
  			disableInternalFiltering = distance < 0.0;
  			return this;
  		}
  		double diagonalDistance = GetDiagonalDistance();
  		double num = 0.01 * Math.Min(diagonalDistance, distance);
  		double num2 = distance + 2.0 * num;
  		double num3 = 0.001 * num2;
  		num2 += 2.0 * num3;
  		disableInternalFiltering = false;
  		return Construct(GLNativeMethods.Buffer(GLNativeMethods.Reduce(GeoData, num), num2, num3, returnCurves: false), Srid);
  	}

  	[Obsolete("Populate(IGeometrySink) method is obsolete, use Populate(IGeometrySink110) instead.")]
  	public void Populate(IGeometrySink sink)
  	{
  		if (!IsNull)
  		{
  			if (GeoData.ContainsCurvedShapes())
  			{
  				throw new ArgumentException(SpatialRes.StrIncompatibleGeometrySinks);
  			}
  			InternalPopulate(new GeometryOutputSink(sink));
  		}
  	}

  	public void Populate(IGeometrySink110 sink)
  	{
  		if (!IsNull)
  		{
  			InternalPopulate(new GeometryOutputSink(sink));
  		}
  	}

  	private void InternalPopulate(GeoDataSink sink)
  	{
  		sink.SetSrid(_srid);
  		_geometry.Populate(sink);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable ISqlSpatialGridIndexable.InteriorBufferForDistanceQuery(double distance)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (GeoData.IsEmpty())
  		{
  			return new SqlGeometry(Srid);
  		}
  		ThrowIfInvalid();
  		if (distance <= 0.0)
  		{
  			return this;
  		}
  		double diagonalDistance = GetDiagonalDistance();
  		double num = 0.01 * Math.Min(diagonalDistance, distance);
  		double num2 = distance - num;
  		double num3 = 0.001 * num2;
  		num2 -= 2.0 * num3;
  		return Construct(GLNativeMethods.Buffer(GLNativeMethods.Reduce(GeoData, num), num2, num3, returnCurves: false), Srid);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	public SqlGeometry CurveToLineWithTolerance(double tolerance, bool relative)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (tolerance <= 0.0 || double.IsNaN(tolerance) || double.IsInfinity(tolerance))
  		{
  			throw new ArgumentOutOfRangeException("tolerance", string.Format(CultureInfo.InvariantCulture, SpatialRes.StrCurveToLinePassedIllegalTolerance, tolerance));
  		}
  		ThrowIfInvalid();
  		return Construct(GLNativeMethods.CurveToLineWithTolerance(GeoData, tolerance, relative), Srid);
  	}

  	internal static void UpdateClrFeatureSwitchMap()
  	{
  		SqlGeography.UpdateClrFeatureSwitchMap();
  	}
  }
  public interface ISqlSpatialGridIndexable
  {
  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	void GetGridCoverage(bool isTopmostGrid, double rGridMinX, double rGridMinY, double rGridWidth, double rGridHeight, double rFuzzX, double rFuzzY, int cGridRows, int cGridColumns, bool[,] touched, bool[,] contained, out int cCellsTouched, out int cCellsContained, out bool fGeometryExceedsGrid, out bool fHasAmbiguousTouchedCells);

  	void GetBoundingBoxCorners(out double minX, out double minY, out double maxX, out double maxY);

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable BufferForDistanceQuery(double distance, out bool disableInternalFiltering);

  	[SqlMethod(IsDeterministic = true, IsPrecise = false)]
  	ISqlSpatialGridIndexable InteriorBufferForDistanceQuery(double distance);
  }
  internal class SridInfo
  {
  	public int spatial_reference_id;

  	public string authority_name;

  	public int authorized_spatial_reference_id;

  	public string well_known_text;

  	public string unit_of_measure;

  	public double unit_conversion_factor;

  	public double semi_major_axis;

  	public double semi_minor_axis;

  	public SridInfo(int spatial_reference_id, string authority_name, int authorized_spatial_reference_id, string well_known_text, string unit_of_measure, double unit_conversion_factor, double semi_major_axis, double semi_minor_axis)
  	{
  		this.spatial_reference_id = spatial_reference_id;
  		this.authority_name = authority_name;
  		this.authorized_spatial_reference_id = authorized_spatial_reference_id;
  		this.well_known_text = well_known_text;
  		this.unit_of_measure = unit_of_measure;
  		this.unit_conversion_factor = unit_conversion_factor;
  		this.semi_major_axis = semi_major_axis;
  		this.semi_minor_axis = semi_minor_axis;
  	}
  }
  internal class SridList
  {
  	private static SortedList<int, SridInfo> _sridList;

  	private const int _null = -1;

  	public static int Null => -1;

  	static SridList()
  	{
  		_sridList = new SortedList<int, SridInfo>();
  		_sridList.Add(4120, new SridInfo(4120, "EPSG", 4120, "GEOGCS[\"Greek\", DATUM[\"Greek\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4121, new SridInfo(4121, "EPSG", 4121, "GEOGCS[\"GGRS87\", DATUM[\"Greek Geodetic Reference System 1987\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4122, new SridInfo(4122, "EPSG", 4122, "GEOGCS[\"ATS77\", DATUM[\"Average Terrestrial System 1977\", ELLIPSOID[\"Average Terrestrial System 1977\", 6378135, 298.257]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.305));
  		_sridList.Add(4123, new SridInfo(4123, "EPSG", 4123, "GEOGCS[\"KKJ\", DATUM[\"Kartastokoordinaattijarjestelma (1966)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4124, new SridInfo(4124, "EPSG", 4124, "GEOGCS[\"RT90\", DATUM[\"Rikets koordinatsystem 1990\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4127, new SridInfo(4127, "EPSG", 4127, "GEOGCS[\"Tete\", DATUM[\"Tete\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4128, new SridInfo(4128, "EPSG", 4128, "GEOGCS[\"Madzansua\", DATUM[\"Madzansua\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4129, new SridInfo(4129, "EPSG", 4129, "GEOGCS[\"Observatario\", DATUM[\"Observatario\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4130, new SridInfo(4130, "EPSG", 4130, "GEOGCS[\"Moznet\", DATUM[\"Moznet (ITRF94)\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4131, new SridInfo(4131, "EPSG", 4131, "GEOGCS[\"Indian 1960\", DATUM[\"Indian 1960\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4132, new SridInfo(4132, "EPSG", 4132, "GEOGCS[\"FD58\", DATUM[\"Final Datum 1958\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4133, new SridInfo(4133, "EPSG", 4133, "GEOGCS[\"EST92\", DATUM[\"Estonia 1992\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4134, new SridInfo(4134, "EPSG", 4134, "GEOGCS[\"PDO Survey Datum 1993\", DATUM[\"PDO Survey Datum 1993\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4135, new SridInfo(4135, "EPSG", 4135, "GEOGCS[\"Old Hawaiian\", DATUM[\"Old Hawaiian\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4136, new SridInfo(4136, "EPSG", 4136, "GEOGCS[\"St. Lawrence Island\", DATUM[\"St. Lawrence Island\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4137, new SridInfo(4137, "EPSG", 4137, "GEOGCS[\"St. Paul Island\", DATUM[\"St. Paul Island\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4138, new SridInfo(4138, "EPSG", 4138, "GEOGCS[\"St. George Island\", DATUM[\"St. George Island\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4139, new SridInfo(4139, "EPSG", 4139, "GEOGCS[\"Puerto Rico\", DATUM[\"Puerto Rico\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4141, new SridInfo(4141, "EPSG", 4141, "GEOGCS[\"Israel\", DATUM[\"Israel\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4142, new SridInfo(4142, "EPSG", 4142, "GEOGCS[\"Locodjo 1965\", DATUM[\"Locodjo 1965\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4143, new SridInfo(4143, "EPSG", 4143, "GEOGCS[\"Abidjan 1987\", DATUM[\"Abidjan 1987\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4144, new SridInfo(4144, "EPSG", 4144, "GEOGCS[\"Kalianpur 1937\", DATUM[\"Kalianpur 1937\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4145, new SridInfo(4145, "EPSG", 4145, "GEOGCS[\"Kalianpur 1962\", DATUM[\"Kalianpur 1962\", ELLIPSOID[\"Everest 1830 (1962 Definition)\", 6377301.243, 300.8017255]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377301.243, 6356100.23));
  		_sridList.Add(4146, new SridInfo(4146, "EPSG", 4146, "GEOGCS[\"Kalianpur 1975\", DATUM[\"Kalianpur 1975\", ELLIPSOID[\"Everest 1830 (1975 Definition)\", 6377299.151, 300.8017255]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377299.151, 6356098.145));
  		_sridList.Add(4147, new SridInfo(4147, "EPSG", 4147, "GEOGCS[\"Hanoi 1972\", DATUM[\"Hanoi 1972\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4148, new SridInfo(4148, "EPSG", 4148, "GEOGCS[\"Hartebeesthoek94\", DATUM[\"Hartebeesthoek94\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4149, new SridInfo(4149, "EPSG", 4149, "GEOGCS[\"CH1903\", DATUM[\"CH1903\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4150, new SridInfo(4150, "EPSG", 4150, "GEOGCS[\"CH1903+\", DATUM[\"CH1903+\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4151, new SridInfo(4151, "EPSG", 4151, "GEOGCS[\"CHTRF95\", DATUM[\"Swiss Terrestrial Reference Frame 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4152, new SridInfo(4152, "EPSG", 4152, "GEOGCS[\"NAD83(HARN)\", DATUM[\"NAD83 (High Accuracy Regional Network)\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4153, new SridInfo(4153, "EPSG", 4153, "GEOGCS[\"Rassadiran\", DATUM[\"Rassadiran\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4154, new SridInfo(4154, "EPSG", 4154, "GEOGCS[\"ED50(ED77)\", DATUM[\"European Datum 1950(1977)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4155, new SridInfo(4155, "EPSG", 4155, "GEOGCS[\"Dabola 1981\", DATUM[\"Dabola 1981\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4156, new SridInfo(4156, "EPSG", 4156, "GEOGCS[\"S-JTSK\", DATUM[\"Jednotne Trigonometricke Site Katastralni\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4157, new SridInfo(4157, "EPSG", 4157, "GEOGCS[\"Mount Dillon\", DATUM[\"Mount Dillon\", ELLIPSOID[\"Clarke 1858\", 6378293.64520876, 294.260676369261]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "Clarke's foot", 0.304797265, 20926348.0, 20855233.0));
  		_sridList.Add(4158, new SridInfo(4158, "EPSG", 4158, "GEOGCS[\"Naparima 1955\", DATUM[\"Naparima 1955\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4159, new SridInfo(4159, "EPSG", 4159, "GEOGCS[\"ELD79\", DATUM[\"European Libyan Datum 1979\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4160, new SridInfo(4160, "EPSG", 4160, "GEOGCS[\"Chos Malal 1914\", DATUM[\"Chos Malal 1914\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4161, new SridInfo(4161, "EPSG", 4161, "GEOGCS[\"Pampa del Castillo\", DATUM[\"Pampa del Castillo\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4162, new SridInfo(4162, "EPSG", 4162, "GEOGCS[\"Korean 1985\", DATUM[\"Korean Datum 1985\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4163, new SridInfo(4163, "EPSG", 4163, "GEOGCS[\"Yemen NGN96\", DATUM[\"Yemen National Geodetic Network 1996\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4164, new SridInfo(4164, "EPSG", 4164, "GEOGCS[\"South Yemen\", DATUM[\"South Yemen\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4165, new SridInfo(4165, "EPSG", 4165, "GEOGCS[\"Bissau\", DATUM[\"Bissau\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4166, new SridInfo(4166, "EPSG", 4166, "GEOGCS[\"Korean 1995\", DATUM[\"Korean Datum 1995\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4167, new SridInfo(4167, "EPSG", 4167, "GEOGCS[\"NZGD2000\", DATUM[\"New Zealand Geodetic Datum 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4168, new SridInfo(4168, "EPSG", 4168, "GEOGCS[\"Accra\", DATUM[\"Accra\", ELLIPSOID[\"War Office\", 6378300, 296]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378300.0, 6356751.689));
  		_sridList.Add(4169, new SridInfo(4169, "EPSG", 4169, "GEOGCS[\"American Samoa 1962\", DATUM[\"American Samoa 1962\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4170, new SridInfo(4170, "EPSG", 4170, "GEOGCS[\"SIRGAS\", DATUM[\"Sistema de Referencia Geocentrico para America del Sur 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4171, new SridInfo(4171, "EPSG", 4171, "GEOGCS[\"RGF93\", DATUM[\"Reseau Geodesique Francais 1993\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4173, new SridInfo(4173, "EPSG", 4173, "GEOGCS[\"IRENET95\", DATUM[\"IRENET95\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4174, new SridInfo(4174, "EPSG", 4174, "GEOGCS[\"Sierra Leone 1924\", DATUM[\"Sierra Leone Colony 1924\", ELLIPSOID[\"War Office\", 6378300, 296]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378300.0, 6356751.689));
  		_sridList.Add(4175, new SridInfo(4175, "EPSG", 4175, "GEOGCS[\"Sierra Leone 1968\", DATUM[\"Sierra Leone 1968\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4176, new SridInfo(4176, "EPSG", 4176, "GEOGCS[\"Australian Antarctic\", DATUM[\"Australian Antarctic Datum 1998\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4178, new SridInfo(4178, "EPSG", 4178, "GEOGCS[\"Pulkovo 1942(83)\", DATUM[\"Pulkovo 1942/83\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4179, new SridInfo(4179, "EPSG", 4179, "GEOGCS[\"Pulkovo 1942(58)\", DATUM[\"Pulkovo 1942/58\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4180, new SridInfo(4180, "EPSG", 4180, "GEOGCS[\"EST97\", DATUM[\"Estonia 1997\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4181, new SridInfo(4181, "EPSG", 4181, "GEOGCS[\"Luxembourg 1930\", DATUM[\"Luxembourg 1930\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4182, new SridInfo(4182, "EPSG", 4182, "GEOGCS[\"Azores Occidental 1939\", DATUM[\"Azores Occidental Islands 1939\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4183, new SridInfo(4183, "EPSG", 4183, "GEOGCS[\"Azores Central 1948\", DATUM[\"Azores Central Islands 1948\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4184, new SridInfo(4184, "EPSG", 4184, "GEOGCS[\"Azores Oriental 1940\", DATUM[\"Azores Oriental Islands 1940\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4188, new SridInfo(4188, "EPSG", 4188, "GEOGCS[\"OSNI 1952\", DATUM[\"OSNI 1952\", ELLIPSOID[\"Airy 1830\", 6377563.396, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377563.396, 6356256.909));
  		_sridList.Add(4189, new SridInfo(4189, "EPSG", 4189, "GEOGCS[\"REGVEN\", DATUM[\"Red Geodesica Venezolana\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4190, new SridInfo(4190, "EPSG", 4190, "GEOGCS[\"POSGAR 98\", DATUM[\"Posiciones Geodesicas Argentinas 1998\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4191, new SridInfo(4191, "EPSG", 4191, "GEOGCS[\"Albanian 1987\", DATUM[\"Albanian 1987\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4192, new SridInfo(4192, "EPSG", 4192, "GEOGCS[\"Douala 1948\", DATUM[\"Douala 1948\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4193, new SridInfo(4193, "EPSG", 4193, "GEOGCS[\"Manoca 1962\", DATUM[\"Manoca 1962\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4194, new SridInfo(4194, "EPSG", 4194, "GEOGCS[\"Qornoq 1927\", DATUM[\"Qornoq 1927\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4195, new SridInfo(4195, "EPSG", 4195, "GEOGCS[\"Scoresbysund 1952\", DATUM[\"Scoresbysund 1952\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4196, new SridInfo(4196, "EPSG", 4196, "GEOGCS[\"Ammassalik 1958\", DATUM[\"Ammassalik 1958\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4197, new SridInfo(4197, "EPSG", 4197, "GEOGCS[\"Garoua\", DATUM[\"Garoua\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4198, new SridInfo(4198, "EPSG", 4198, "GEOGCS[\"Kousseri\", DATUM[\"Kousseri\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4199, new SridInfo(4199, "EPSG", 4199, "GEOGCS[\"Egypt 1930\", DATUM[\"Egypt 1930\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4200, new SridInfo(4200, "EPSG", 4200, "GEOGCS[\"Pulkovo 1995\", DATUM[\"Pulkovo 1995\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4201, new SridInfo(4201, "EPSG", 4201, "GEOGCS[\"Adindan\", DATUM[\"Adindan\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4202, new SridInfo(4202, "EPSG", 4202, "GEOGCS[\"AGD66\", DATUM[\"Australian Geodetic Datum 1966\", ELLIPSOID[\"Australian National Spheroid\", 6378160, 298.25]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.719));
  		_sridList.Add(4203, new SridInfo(4203, "EPSG", 4203, "GEOGCS[\"AGD84\", DATUM[\"Australian Geodetic Datum 1984\", ELLIPSOID[\"Australian National Spheroid\", 6378160, 298.25]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.719));
  		_sridList.Add(4204, new SridInfo(4204, "EPSG", 4204, "GEOGCS[\"Ain el Abd\", DATUM[\"Ain el Abd 1970\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4205, new SridInfo(4205, "EPSG", 4205, "GEOGCS[\"Afgooye\", DATUM[\"Afgooye\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4206, new SridInfo(4206, "EPSG", 4206, "GEOGCS[\"Agadez\", DATUM[\"Agadez\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4207, new SridInfo(4207, "EPSG", 4207, "GEOGCS[\"Lisbon\", DATUM[\"Lisbon 1937\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4208, new SridInfo(4208, "EPSG", 4208, "GEOGCS[\"Aratu\", DATUM[\"Aratu\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4209, new SridInfo(4209, "EPSG", 4209, "GEOGCS[\"Arc 1950\", DATUM[\"Arc 1950\", ELLIPSOID[\"Clarke 1880 (Arc)\", 6378249.145, 293.4663077]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.966));
  		_sridList.Add(4210, new SridInfo(4210, "EPSG", 4210, "GEOGCS[\"Arc 1960\", DATUM[\"Arc 1960\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4211, new SridInfo(4211, "EPSG", 4211, "GEOGCS[\"Batavia\", DATUM[\"Batavia\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4212, new SridInfo(4212, "EPSG", 4212, "GEOGCS[\"Barbados 1938\", DATUM[\"Barbados 1938\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4213, new SridInfo(4213, "EPSG", 4213, "GEOGCS[\"Beduaram\", DATUM[\"Beduaram\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4214, new SridInfo(4214, "EPSG", 4214, "GEOGCS[\"Beijing 1954\", DATUM[\"Beijing 1954\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4215, new SridInfo(4215, "EPSG", 4215, "GEOGCS[\"Belge 1950\", DATUM[\"Reseau National Belge 1950\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4216, new SridInfo(4216, "EPSG", 4216, "GEOGCS[\"Bermuda 1957\", DATUM[\"Bermuda 1957\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4218, new SridInfo(4218, "EPSG", 4218, "GEOGCS[\"Bogota 1975\", DATUM[\"Bogota 1975\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4219, new SridInfo(4219, "EPSG", 4219, "GEOGCS[\"Bukit Rimpah\", DATUM[\"Bukit Rimpah\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4220, new SridInfo(4220, "EPSG", 4220, "GEOGCS[\"Camacupa\", DATUM[\"Camacupa\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4221, new SridInfo(4221, "EPSG", 4221, "GEOGCS[\"Campo Inchauspe\", DATUM[\"Campo Inchauspe\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4222, new SridInfo(4222, "EPSG", 4222, "GEOGCS[\"Cape\", DATUM[\"Cape\", ELLIPSOID[\"Clarke 1880 (Arc)\", 6378249.145, 293.4663077]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.966));
  		_sridList.Add(4223, new SridInfo(4223, "EPSG", 4223, "GEOGCS[\"Carthage\", DATUM[\"Carthage\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4224, new SridInfo(4224, "EPSG", 4224, "GEOGCS[\"Chua\", DATUM[\"Chua\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4225, new SridInfo(4225, "EPSG", 4225, "GEOGCS[\"Corrego Alegre\", DATUM[\"Corrego Alegre\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4227, new SridInfo(4227, "EPSG", 4227, "GEOGCS[\"Deir ez Zor\", DATUM[\"Deir ez Zor\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4229, new SridInfo(4229, "EPSG", 4229, "GEOGCS[\"Egypt 1907\", DATUM[\"Egypt 1907\", ELLIPSOID[\"Helmert 1906\", 6378200, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378200.0, 6356818.17));
  		_sridList.Add(4230, new SridInfo(4230, "EPSG", 4230, "GEOGCS[\"ED50\", DATUM[\"European Datum 1950\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4231, new SridInfo(4231, "EPSG", 4231, "GEOGCS[\"ED87\", DATUM[\"European Datum 1987\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4232, new SridInfo(4232, "EPSG", 4232, "GEOGCS[\"Fahud\", DATUM[\"Fahud\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4236, new SridInfo(4236, "EPSG", 4236, "GEOGCS[\"Hu Tzu Shan\", DATUM[\"Hu Tzu Shan\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4237, new SridInfo(4237, "EPSG", 4237, "GEOGCS[\"HD72\", DATUM[\"Hungarian Datum 1972\", ELLIPSOID[\"GRS 1967\", 6378160, 298.247167427]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.516));
  		_sridList.Add(4238, new SridInfo(4238, "EPSG", 4238, "GEOGCS[\"ID74\", DATUM[\"Indonesian Datum 1974\", ELLIPSOID[\"Indonesian National Spheroid\", 6378160, 298.247]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.504));
  		_sridList.Add(4239, new SridInfo(4239, "EPSG", 4239, "GEOGCS[\"Indian 1954\", DATUM[\"Indian 1954\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4240, new SridInfo(4240, "EPSG", 4240, "GEOGCS[\"Indian 1975\", DATUM[\"Indian 1975\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4241, new SridInfo(4241, "EPSG", 4241, "GEOGCS[\"Jamaica 1875\", DATUM[\"Jamaica 1875\", ELLIPSOID[\"Clarke 1880\", 6378249.14480801, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "Clarke's foot", 0.304797265, 20926202.0, 20854894.68));
  		_sridList.Add(4242, new SridInfo(4242, "EPSG", 4242, "GEOGCS[\"JAD69\", DATUM[\"Jamaica 1969\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4243, new SridInfo(4243, "EPSG", 4243, "GEOGCS[\"Kalianpur 1880\", DATUM[\"Kalianpur 1880\", ELLIPSOID[\"Everest (1830 Definition)\", 6377299.36559538, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "Indian foot", 0.30479951, 20922931.8, 20853374.57));
  		_sridList.Add(4244, new SridInfo(4244, "EPSG", 4244, "GEOGCS[\"Kandawala\", DATUM[\"Kandawala\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4245, new SridInfo(4245, "EPSG", 4245, "GEOGCS[\"Kertau 1968\", DATUM[\"Kertau 1968\", ELLIPSOID[\"Everest 1830 Modified\", 6377304.063, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377304.063, 6356103.039));
  		_sridList.Add(4246, new SridInfo(4246, "EPSG", 4246, "GEOGCS[\"KOC\", DATUM[\"Kuwait Oil Company\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4247, new SridInfo(4247, "EPSG", 4247, "GEOGCS[\"La Canoa\", DATUM[\"La Canoa\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4248, new SridInfo(4248, "EPSG", 4248, "GEOGCS[\"PSAD56\", DATUM[\"Provisional South American Datum 1956\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4249, new SridInfo(4249, "EPSG", 4249, "GEOGCS[\"Lake\", DATUM[\"Lake\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4250, new SridInfo(4250, "EPSG", 4250, "GEOGCS[\"Leigon\", DATUM[\"Leigon\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4251, new SridInfo(4251, "EPSG", 4251, "GEOGCS[\"Liberia 1964\", DATUM[\"Liberia 1964\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4252, new SridInfo(4252, "EPSG", 4252, "GEOGCS[\"Lome\", DATUM[\"Lome\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4253, new SridInfo(4253, "EPSG", 4253, "GEOGCS[\"Luzon 1911\", DATUM[\"Luzon 1911\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4254, new SridInfo(4254, "EPSG", 4254, "GEOGCS[\"Hito XVIII 1963\", DATUM[\"Hito XVIII 1963\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4255, new SridInfo(4255, "EPSG", 4255, "GEOGCS[\"Herat North\", DATUM[\"Herat North\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4256, new SridInfo(4256, "EPSG", 4256, "GEOGCS[\"Mahe 1971\", DATUM[\"Mahe 1971\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4257, new SridInfo(4257, "EPSG", 4257, "GEOGCS[\"Makassar\", DATUM[\"Makassar\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4258, new SridInfo(4258, "EPSG", 4258, "GEOGCS[\"ETRS89\", DATUM[\"European Terrestrial Reference System 1989\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4259, new SridInfo(4259, "EPSG", 4259, "GEOGCS[\"Malongo 1987\", DATUM[\"Malongo 1987\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4261, new SridInfo(4261, "EPSG", 4261, "GEOGCS[\"Merchich\", DATUM[\"Merchich\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4262, new SridInfo(4262, "EPSG", 4262, "GEOGCS[\"Massawa\", DATUM[\"Massawa\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4263, new SridInfo(4263, "EPSG", 4263, "GEOGCS[\"Minna\", DATUM[\"Minna\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4265, new SridInfo(4265, "EPSG", 4265, "GEOGCS[\"Monte Mario\", DATUM[\"Monte Mario\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4266, new SridInfo(4266, "EPSG", 4266, "GEOGCS[\"M'poraloko\", DATUM[\"M'poraloko\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4267, new SridInfo(4267, "EPSG", 4267, "GEOGCS[\"NAD27\", DATUM[\"North American Datum 1927\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4268, new SridInfo(4268, "EPSG", 4268, "GEOGCS[\"NAD27 Michigan\", DATUM[\"NAD Michigan\", ELLIPSOID[\"Clarke 1866 Michigan\", 6378450.0475489, 294.978697164674]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "US survey foot", 0.30480061, 20926631.53, 20855688.67));
  		_sridList.Add(4269, new SridInfo(4269, "EPSG", 4269, "GEOGCS[\"NAD83\", DATUM[\"North American Datum 1983\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4270, new SridInfo(4270, "EPSG", 4270, "GEOGCS[\"Nahrwan 1967\", DATUM[\"Nahrwan 1967\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4271, new SridInfo(4271, "EPSG", 4271, "GEOGCS[\"Naparima 1972\", DATUM[\"Naparima 1972\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4272, new SridInfo(4272, "EPSG", 4272, "GEOGCS[\"NZGD49\", DATUM[\"New Zealand Geodetic Datum 1949\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4273, new SridInfo(4273, "EPSG", 4273, "GEOGCS[\"NGO 1948\", DATUM[\"NGO 1948\", ELLIPSOID[\"Bessel Modified\", 6377492.018, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377492.018, 6356173.509));
  		_sridList.Add(4274, new SridInfo(4274, "EPSG", 4274, "GEOGCS[\"Datum 73\", DATUM[\"Datum 73\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4275, new SridInfo(4275, "EPSG", 4275, "GEOGCS[\"NTF\", DATUM[\"Nouvelle Triangulation Francaise\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4276, new SridInfo(4276, "EPSG", 4276, "GEOGCS[\"NSWC 9Z-2\", DATUM[\"NSWC 9Z-2\", ELLIPSOID[\"NWL 9D\", 6378145, 298.25]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378145.0, 6356759.769));
  		_sridList.Add(4277, new SridInfo(4277, "EPSG", 4277, "GEOGCS[\"OSGB 1936\", DATUM[\"OSGB 1936\", ELLIPSOID[\"Airy 1830\", 6377563.396, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377563.396, 6356256.909));
  		_sridList.Add(4278, new SridInfo(4278, "EPSG", 4278, "GEOGCS[\"OSGB70\", DATUM[\"OSGB 1970 (SN)\", ELLIPSOID[\"Airy 1830\", 6377563.396, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377563.396, 6356256.909));
  		_sridList.Add(4279, new SridInfo(4279, "EPSG", 4279, "GEOGCS[\"OS(SN)80\", DATUM[\"OS (SN) 1980\", ELLIPSOID[\"Airy 1830\", 6377563.396, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377563.396, 6356256.909));
  		_sridList.Add(4280, new SridInfo(4280, "EPSG", 4280, "GEOGCS[\"Padang\", DATUM[\"Padang 1884\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4281, new SridInfo(4281, "EPSG", 4281, "GEOGCS[\"Palestine 1923\", DATUM[\"Palestine 1923\", ELLIPSOID[\"Clarke 1880 (Benoit)\", 6378300.789, 293.466315538981]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378300.789, 6356566.435));
  		_sridList.Add(4282, new SridInfo(4282, "EPSG", 4282, "GEOGCS[\"Pointe Noire\", DATUM[\"Congo 1960 Pointe Noire\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4283, new SridInfo(4283, "EPSG", 4283, "GEOGCS[\"GDA94\", DATUM[\"Geocentric Datum of Australia 1994\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4284, new SridInfo(4284, "EPSG", 4284, "GEOGCS[\"Pulkovo 1942\", DATUM[\"Pulkovo 1942\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4285, new SridInfo(4285, "EPSG", 4285, "GEOGCS[\"Qatar 1974\", DATUM[\"Qatar 1974\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4286, new SridInfo(4286, "EPSG", 4286, "GEOGCS[\"Qatar 1948\", DATUM[\"Qatar 1948\", ELLIPSOID[\"Helmert 1906\", 6378200, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378200.0, 6356818.17));
  		_sridList.Add(4288, new SridInfo(4288, "EPSG", 4288, "GEOGCS[\"Loma Quintana\", DATUM[\"Loma Quintana\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4289, new SridInfo(4289, "EPSG", 4289, "GEOGCS[\"Amersfoort\", DATUM[\"Amersfoort\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4292, new SridInfo(4292, "EPSG", 4292, "GEOGCS[\"Sapper Hill 1943\", DATUM[\"Sapper Hill 1943\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4293, new SridInfo(4293, "EPSG", 4293, "GEOGCS[\"Schwarzeck\", DATUM[\"Schwarzeck\", ELLIPSOID[\"Bessel Namibia (GLM)\", 6377483.86528042, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "German legal metre", 1.000013597, 6377397.155, 6356078.963));
  		_sridList.Add(4295, new SridInfo(4295, "EPSG", 4295, "GEOGCS[\"Serindung\", DATUM[\"Serindung\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4297, new SridInfo(4297, "EPSG", 4297, "GEOGCS[\"Tananarive\", DATUM[\"Tananarive 1925\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4298, new SridInfo(4298, "EPSG", 4298, "GEOGCS[\"Timbalai 1948\", DATUM[\"Timbalai 1948\", ELLIPSOID[\"Everest 1830 (1967 Definition)\", 6377298.556, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377298.556, 6356097.55));
  		_sridList.Add(4299, new SridInfo(4299, "EPSG", 4299, "GEOGCS[\"TM65\", DATUM[\"TM65\", ELLIPSOID[\"Airy Modified 1849\", 6377340.189, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377340.189, 6356034.448));
  		_sridList.Add(4300, new SridInfo(4300, "EPSG", 4300, "GEOGCS[\"TM75\", DATUM[\"Geodetic Datum of 1965\", ELLIPSOID[\"Airy Modified 1849\", 6377340.189, 299.3249646]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377340.189, 6356034.448));
  		_sridList.Add(4301, new SridInfo(4301, "EPSG", 4301, "GEOGCS[\"Tokyo\", DATUM[\"Tokyo\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4302, new SridInfo(4302, "EPSG", 4302, "GEOGCS[\"Trinidad 1903\", DATUM[\"Trinidad 1903\", ELLIPSOID[\"Clarke 1858\", 6378293.64520876, 294.260676369261]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "Clarke's foot", 0.304797265, 20926348.0, 20855233.0));
  		_sridList.Add(4303, new SridInfo(4303, "EPSG", 4303, "GEOGCS[\"TC(1948)\", DATUM[\"Trucial Coast 1948\", ELLIPSOID[\"Helmert 1906\", 6378200, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378200.0, 6356818.17));
  		_sridList.Add(4304, new SridInfo(4304, "EPSG", 4304, "GEOGCS[\"Voirol 1875\", DATUM[\"Voirol 1875\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4306, new SridInfo(4306, "EPSG", 4306, "GEOGCS[\"Bern 1938\", DATUM[\"Bern 1938\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4307, new SridInfo(4307, "EPSG", 4307, "GEOGCS[\"Nord Sahara 1959\", DATUM[\"Nord Sahara 1959\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4308, new SridInfo(4308, "EPSG", 4308, "GEOGCS[\"RT38\", DATUM[\"Stockholm 1938\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4309, new SridInfo(4309, "EPSG", 4309, "GEOGCS[\"Yacare\", DATUM[\"Yacare\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4310, new SridInfo(4310, "EPSG", 4310, "GEOGCS[\"Yoff\", DATUM[\"Yoff\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4311, new SridInfo(4311, "EPSG", 4311, "GEOGCS[\"Zanderij\", DATUM[\"Zanderij\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4312, new SridInfo(4312, "EPSG", 4312, "GEOGCS[\"MGI\", DATUM[\"Militar-Geographische Institut\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4313, new SridInfo(4313, "EPSG", 4313, "GEOGCS[\"Belge 1972\", DATUM[\"Reseau National Belge 1972\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4314, new SridInfo(4314, "EPSG", 4314, "GEOGCS[\"DHDN\", DATUM[\"Deutsches Hauptdreiecksnetz\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4315, new SridInfo(4315, "EPSG", 4315, "GEOGCS[\"Conakry 1905\", DATUM[\"Conakry 1905\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4316, new SridInfo(4316, "EPSG", 4316, "GEOGCS[\"Dealul Piscului 1933\", DATUM[\"Dealul Piscului 1933\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4317, new SridInfo(4317, "EPSG", 4317, "GEOGCS[\"Dealul Piscului 1970\", DATUM[\"Dealul Piscului 1970\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4318, new SridInfo(4318, "EPSG", 4318, "GEOGCS[\"NGN\", DATUM[\"National Geodetic Network\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4319, new SridInfo(4319, "EPSG", 4319, "GEOGCS[\"KUDAMS\", DATUM[\"Kuwait Utility\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4322, new SridInfo(4322, "EPSG", 4322, "GEOGCS[\"WGS 72\", DATUM[\"World Geodetic System 1972\", ELLIPSOID[\"WGS 72\", 6378135, 298.26]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.52));
  		_sridList.Add(4324, new SridInfo(4324, "EPSG", 4324, "GEOGCS[\"WGS 72BE\", DATUM[\"WGS 72 Transit Broadcast Ephemeris\", ELLIPSOID[\"WGS 72\", 6378135, 298.26]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.52));
  		_sridList.Add(4326, new SridInfo(4326, "EPSG", 4326, "GEOGCS[\"WGS 84\", DATUM[\"World Geodetic System 1984\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4600, new SridInfo(4600, "EPSG", 4600, "GEOGCS[\"Anguilla 1957\", DATUM[\"Anguilla 1957\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4601, new SridInfo(4601, "EPSG", 4601, "GEOGCS[\"Antigua 1943\", DATUM[\"Antigua 1943\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4602, new SridInfo(4602, "EPSG", 4602, "GEOGCS[\"Dominica 1945\", DATUM[\"Dominica 1945\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4603, new SridInfo(4603, "EPSG", 4603, "GEOGCS[\"Grenada 1953\", DATUM[\"Grenada 1953\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4604, new SridInfo(4604, "EPSG", 4604, "GEOGCS[\"Montserrat 1958\", DATUM[\"Montserrat 1958\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4605, new SridInfo(4605, "EPSG", 4605, "GEOGCS[\"St. Kitts 1955\", DATUM[\"St. Kitts 1955\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4606, new SridInfo(4606, "EPSG", 4606, "GEOGCS[\"St. Lucia 1955\", DATUM[\"St. Lucia 1955\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4607, new SridInfo(4607, "EPSG", 4607, "GEOGCS[\"St. Vincent 1945\", DATUM[\"St. Vincent 1945\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4608, new SridInfo(4608, "EPSG", 4608, "GEOGCS[\"NAD27(76)\", DATUM[\"North American Datum 1927 (1976)\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4609, new SridInfo(4609, "EPSG", 4609, "GEOGCS[\"NAD27(CGQ77)\", DATUM[\"North American Datum 1927 (CGQ77)\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4610, new SridInfo(4610, "EPSG", 4610, "GEOGCS[\"Xian 1980\", DATUM[\"Xian 1980\", ELLIPSOID[\"Xian 1980\", 6378140, 298.257]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378140.0, 6356755.288));
  		_sridList.Add(4611, new SridInfo(4611, "EPSG", 4611, "GEOGCS[\"Hong Kong 1980\", DATUM[\"Hong Kong 1980\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4612, new SridInfo(4612, "EPSG", 4612, "GEOGCS[\"JGD2000\", DATUM[\"Japanese Geodetic Datum 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4613, new SridInfo(4613, "EPSG", 4613, "GEOGCS[\"Segara\", DATUM[\"Gunung Segara\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4614, new SridInfo(4614, "EPSG", 4614, "GEOGCS[\"QND95\", DATUM[\"Qatar National Datum 1995\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4615, new SridInfo(4615, "EPSG", 4615, "GEOGCS[\"Porto Santo\", DATUM[\"Porto Santo 1936\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4616, new SridInfo(4616, "EPSG", 4616, "GEOGCS[\"Selvagem Grande\", DATUM[\"Selvagem Grande\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4617, new SridInfo(4617, "EPSG", 4617, "GEOGCS[\"NAD83(CSRS)\", DATUM[\"NAD83 Canadian Spatial Reference System\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4618, new SridInfo(4618, "EPSG", 4618, "GEOGCS[\"SAD69\", DATUM[\"South American Datum 1969\", ELLIPSOID[\"GRS 1967 (SAD69)\", 6378160, 298.25]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.719));
  		_sridList.Add(4619, new SridInfo(4619, "EPSG", 4619, "GEOGCS[\"SWEREF99\", DATUM[\"SWEREF99\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4620, new SridInfo(4620, "EPSG", 4620, "GEOGCS[\"Point 58\", DATUM[\"Point 58\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4621, new SridInfo(4621, "EPSG", 4621, "GEOGCS[\"Fort Marigot\", DATUM[\"Fort Marigot\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4622, new SridInfo(4622, "EPSG", 4622, "GEOGCS[\"Guadeloupe 1948\", DATUM[\"Guadeloupe 1948\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4623, new SridInfo(4623, "EPSG", 4623, "GEOGCS[\"CSG67\", DATUM[\"Centre Spatial Guyanais 1967\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4624, new SridInfo(4624, "EPSG", 4624, "GEOGCS[\"RGFG95\", DATUM[\"Reseau Geodesique Francais Guyane 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4625, new SridInfo(4625, "EPSG", 4625, "GEOGCS[\"Martinique 1938\", DATUM[\"Martinique 1938\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4626, new SridInfo(4626, "EPSG", 4626, "GEOGCS[\"Reunion 1947\", DATUM[\"Reunion 1947\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4627, new SridInfo(4627, "EPSG", 4627, "GEOGCS[\"RGR92\", DATUM[\"Reseau Geodesique de la Reunion 1992\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4628, new SridInfo(4628, "EPSG", 4628, "GEOGCS[\"Tahiti 52\", DATUM[\"Tahiti 52\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4629, new SridInfo(4629, "EPSG", 4629, "GEOGCS[\"Tahaa 54\", DATUM[\"Tahaa 54\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4630, new SridInfo(4630, "EPSG", 4630, "GEOGCS[\"IGN72 Nuku Hiva\", DATUM[\"IGN72 Nuku Hiva\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4632, new SridInfo(4632, "EPSG", 4632, "GEOGCS[\"Combani 1950\", DATUM[\"Combani 1950\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4633, new SridInfo(4633, "EPSG", 4633, "GEOGCS[\"IGN56 Lifou\", DATUM[\"IGN56 Lifou\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4636, new SridInfo(4636, "EPSG", 4636, "GEOGCS[\"Petrels 1972\", DATUM[\"Petrels 1972\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4637, new SridInfo(4637, "EPSG", 4637, "GEOGCS[\"Perroud 1950\", DATUM[\"Pointe Geologie Perroud 1950\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4638, new SridInfo(4638, "EPSG", 4638, "GEOGCS[\"Saint Pierre et Miquelon 1950\", DATUM[\"Saint Pierre et Miquelon 1950\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4639, new SridInfo(4639, "EPSG", 4639, "GEOGCS[\"MOP78\", DATUM[\"MOP78\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4640, new SridInfo(4640, "EPSG", 4640, "GEOGCS[\"RRAF 1991\", DATUM[\"Reseau de Reference des Antilles Francaises 1991\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4641, new SridInfo(4641, "EPSG", 4641, "GEOGCS[\"IGN53 Mare\", DATUM[\"IGN53 Mare\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4642, new SridInfo(4642, "EPSG", 4642, "GEOGCS[\"ST84 Ile des Pins\", DATUM[\"ST84 Ile des Pins\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4643, new SridInfo(4643, "EPSG", 4643, "GEOGCS[\"ST71 Belep\", DATUM[\"ST71 Belep\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4644, new SridInfo(4644, "EPSG", 4644, "GEOGCS[\"NEA74 Noumea\", DATUM[\"NEA74 Noumea\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4646, new SridInfo(4646, "EPSG", 4646, "GEOGCS[\"Grand Comoros\", DATUM[\"Grand Comoros\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4657, new SridInfo(4657, "EPSG", 4657, "GEOGCS[\"Reykjavik 1900\", DATUM[\"Reykjavik 1900\", ELLIPSOID[\"Danish 1876\", 6377019.27, 300]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377019.27, 6355762.539));
  		_sridList.Add(4658, new SridInfo(4658, "EPSG", 4658, "GEOGCS[\"Hjorsey 1955\", DATUM[\"Hjorsey 1955\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4659, new SridInfo(4659, "EPSG", 4659, "GEOGCS[\"ISN93\", DATUM[\"Islands Network 1993\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4660, new SridInfo(4660, "EPSG", 4660, "GEOGCS[\"Helle 1954\", DATUM[\"Helle 1954\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4661, new SridInfo(4661, "EPSG", 4661, "GEOGCS[\"LKS92\", DATUM[\"Latvia 1992\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4662, new SridInfo(4662, "EPSG", 4662, "GEOGCS[\"IGN72 Grande Terre\", DATUM[\"IGN72 Grande Terre\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4663, new SridInfo(4663, "EPSG", 4663, "GEOGCS[\"Porto Santo 1995\", DATUM[\"Porto Santo 1995\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4664, new SridInfo(4664, "EPSG", 4664, "GEOGCS[\"Azores Oriental 1995\", DATUM[\"Azores Oriental Islands 1995\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4665, new SridInfo(4665, "EPSG", 4665, "GEOGCS[\"Azores Central 1995\", DATUM[\"Azores Central Islands 1995\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4666, new SridInfo(4666, "EPSG", 4666, "GEOGCS[\"Lisbon 1890\", DATUM[\"Lisbon 1890\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4667, new SridInfo(4667, "EPSG", 4667, "GEOGCS[\"IKBD-92\", DATUM[\"Iraq-Kuwait Boundary Datum 1992\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4668, new SridInfo(4668, "EPSG", 4668, "GEOGCS[\"ED79\", DATUM[\"European Datum 1979\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4669, new SridInfo(4669, "EPSG", 4669, "GEOGCS[\"LKS94\", DATUM[\"Lithuania 1994 (ETRS89)\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4670, new SridInfo(4670, "EPSG", 4670, "GEOGCS[\"IGM95\", DATUM[\"Istituto Geografico Militaire 1995\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4671, new SridInfo(4671, "EPSG", 4671, "GEOGCS[\"Voirol 1879\", DATUM[\"Voirol 1879\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4672, new SridInfo(4672, "EPSG", 4672, "GEOGCS[\"CI1971\", DATUM[\"Chatham Islands Datum 1971\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4673, new SridInfo(4673, "EPSG", 4673, "GEOGCS[\"CI1979\", DATUM[\"Chatham Islands Datum 1979\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4674, new SridInfo(4674, "EPSG", 4674, "GEOGCS[\"SIRGAS 2000\", DATUM[\"Sistema de Referencia Geocentrico para America del Sur 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4675, new SridInfo(4675, "EPSG", 4675, "GEOGCS[\"Guam 1963\", DATUM[\"Guam 1963\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4676, new SridInfo(4676, "EPSG", 4676, "GEOGCS[\"Vientiane 1982\", DATUM[\"Vientiane 1982\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4677, new SridInfo(4677, "EPSG", 4677, "GEOGCS[\"Lao 1993\", DATUM[\"Lao 1993\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4678, new SridInfo(4678, "EPSG", 4678, "GEOGCS[\"Lao 1997\", DATUM[\"Lao National Datum 1997\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4679, new SridInfo(4679, "EPSG", 4679, "GEOGCS[\"Jouik 1961\", DATUM[\"Jouik 1961\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4680, new SridInfo(4680, "EPSG", 4680, "GEOGCS[\"Nouakchott 1965\", DATUM[\"Nouakchott 1965\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4682, new SridInfo(4682, "EPSG", 4682, "GEOGCS[\"Gulshan 303\", DATUM[\"Gulshan 303\", ELLIPSOID[\"Everest 1830 (1937 Adjustment)\", 6377276.345, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377276.345, 6356075.413));
  		_sridList.Add(4683, new SridInfo(4683, "EPSG", 4683, "GEOGCS[\"PRS92\", DATUM[\"Philippine Reference System 1992\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4684, new SridInfo(4684, "EPSG", 4684, "GEOGCS[\"Gan 1970\", DATUM[\"Gan 1970\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4686, new SridInfo(4686, "EPSG", 4686, "GEOGCS[\"MAGNA-SIRGAS\", DATUM[\"Marco Geocentrico Nacional de Referencia\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4687, new SridInfo(4687, "EPSG", 4687, "GEOGCS[\"RGPF\", DATUM[\"Reseau Geodesique de la Polynesie Francaise\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4688, new SridInfo(4688, "EPSG", 4688, "GEOGCS[\"Fatu Iva 72\", DATUM[\"Fatu Iva 72\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4689, new SridInfo(4689, "EPSG", 4689, "GEOGCS[\"IGN63 Hiva Oa\", DATUM[\"IGN63 Hiva Oa\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4690, new SridInfo(4690, "EPSG", 4690, "GEOGCS[\"Tahiti 79\", DATUM[\"Tahiti 79\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4691, new SridInfo(4691, "EPSG", 4691, "GEOGCS[\"Moorea 87\", DATUM[\"Moorea 87\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4692, new SridInfo(4692, "EPSG", 4692, "GEOGCS[\"Maupiti 83\", DATUM[\"Maupiti 83\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4693, new SridInfo(4693, "EPSG", 4693, "GEOGCS[\"Nakhl-e Ghanem\", DATUM[\"Nakhl-e Ghanem\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4694, new SridInfo(4694, "EPSG", 4694, "GEOGCS[\"POSGAR 94\", DATUM[\"Posiciones Geodesicas Argentinas 1994\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4695, new SridInfo(4695, "EPSG", 4695, "GEOGCS[\"Katanga 1955\", DATUM[\"Katanga 1955\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4696, new SridInfo(4696, "EPSG", 4696, "GEOGCS[\"Kasai 1953\", DATUM[\"Kasai 1953\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4697, new SridInfo(4697, "EPSG", 4697, "GEOGCS[\"IGC 1962 6th Parallel South\", DATUM[\"IGC 1962 Arc of the 6th Parallel South\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4698, new SridInfo(4698, "EPSG", 4698, "GEOGCS[\"IGN 1962 Kerguelen\", DATUM[\"IGN 1962 Kerguelen\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4699, new SridInfo(4699, "EPSG", 4699, "GEOGCS[\"Le Pouce 1934\", DATUM[\"Le Pouce 1934\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4700, new SridInfo(4700, "EPSG", 4700, "GEOGCS[\"IGN Astro 1960\", DATUM[\"IGN Astro 1960\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4701, new SridInfo(4701, "EPSG", 4701, "GEOGCS[\"IGCB 1955\", DATUM[\"Institut Geographique du Congo Belge 1955\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4702, new SridInfo(4702, "EPSG", 4702, "GEOGCS[\"Mauritania 1999\", DATUM[\"Mauritania 1999\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4703, new SridInfo(4703, "EPSG", 4703, "GEOGCS[\"Mhast 1951\", DATUM[\"Missao Hidrografico Angola y Sao Tome 1951\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4704, new SridInfo(4704, "EPSG", 4704, "GEOGCS[\"Mhast (onshore)\", DATUM[\"Mhast (onshore)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4705, new SridInfo(4705, "EPSG", 4705, "GEOGCS[\"Mhast (offshore)\", DATUM[\"Mhast (offshore)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4706, new SridInfo(4706, "EPSG", 4706, "GEOGCS[\"Egypt Gulf of Suez S-650 TL\", DATUM[\"Egypt Gulf of Suez S-650 TL\", ELLIPSOID[\"Helmert 1906\", 6378200, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378200.0, 6356818.17));
  		_sridList.Add(4707, new SridInfo(4707, "EPSG", 4707, "GEOGCS[\"Tern Island 1961\", DATUM[\"Tern Island 1961\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4708, new SridInfo(4708, "EPSG", 4708, "GEOGCS[\"Cocos Islands 1965\", DATUM[\"Cocos Islands 1965\", ELLIPSOID[\"Australian National Spheroid\", 6378160, 298.25]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378160.0, 6356774.719));
  		_sridList.Add(4709, new SridInfo(4709, "EPSG", 4709, "GEOGCS[\"Iwo Jima 1945\", DATUM[\"Iwo Jima 1945\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4710, new SridInfo(4710, "EPSG", 4710, "GEOGCS[\"St. Helena 1971\", DATUM[\"St. Helena 1971\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4711, new SridInfo(4711, "EPSG", 4711, "GEOGCS[\"Marcus Island 1952\", DATUM[\"Marcus Island 1952\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4712, new SridInfo(4712, "EPSG", 4712, "GEOGCS[\"Ascension Island 1958\", DATUM[\"Ascension Island 1958\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4713, new SridInfo(4713, "EPSG", 4713, "GEOGCS[\"Ayabelle Lighthouse\", DATUM[\"Ayabelle Lighthouse\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4714, new SridInfo(4714, "EPSG", 4714, "GEOGCS[\"Bellevue\", DATUM[\"Bellevue\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4715, new SridInfo(4715, "EPSG", 4715, "GEOGCS[\"Camp Area Astro\", DATUM[\"Camp Area Astro\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4716, new SridInfo(4716, "EPSG", 4716, "GEOGCS[\"Phoenix Islands 1966\", DATUM[\"Phoenix Islands 1966\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4717, new SridInfo(4717, "EPSG", 4717, "GEOGCS[\"Cape Canaveral\", DATUM[\"Cape Canaveral\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4718, new SridInfo(4718, "EPSG", 4718, "GEOGCS[\"Solomon 1968\", DATUM[\"Solomon 1968\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4719, new SridInfo(4719, "EPSG", 4719, "GEOGCS[\"Easter Island 1967\", DATUM[\"Easter Island 1967\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4720, new SridInfo(4720, "EPSG", 4720, "GEOGCS[\"Fiji 1986\", DATUM[\"Fiji Geodetic Datum 1986\", ELLIPSOID[\"WGS 72\", 6378135, 298.26]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.52));
  		_sridList.Add(4721, new SridInfo(4721, "EPSG", 4721, "GEOGCS[\"Fiji 1956\", DATUM[\"Fiji 1956\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4722, new SridInfo(4722, "EPSG", 4722, "GEOGCS[\"South Georgia 1968\", DATUM[\"South Georgia 1968\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4723, new SridInfo(4723, "EPSG", 4723, "GEOGCS[\"Grand Cayman 1959\", DATUM[\"Grand Cayman 1959\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4724, new SridInfo(4724, "EPSG", 4724, "GEOGCS[\"Diego Garcia 1969\", DATUM[\"Diego Garcia 1969\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4725, new SridInfo(4725, "EPSG", 4725, "GEOGCS[\"Johnston Island 1961\", DATUM[\"Johnston Island 1961\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4726, new SridInfo(4726, "EPSG", 4726, "GEOGCS[\"Little Cayman 1961\", DATUM[\"Little Cayman 1961\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4727, new SridInfo(4727, "EPSG", 4727, "GEOGCS[\"Midway 1961\", DATUM[\"Midway 1961\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4728, new SridInfo(4728, "EPSG", 4728, "GEOGCS[\"Pico de la Nieves\", DATUM[\"Pico de la Nieves\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4729, new SridInfo(4729, "EPSG", 4729, "GEOGCS[\"Pitcairn 1967\", DATUM[\"Pitcairn 1967\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4730, new SridInfo(4730, "EPSG", 4730, "GEOGCS[\"Santo 1965\", DATUM[\"Santo 1965\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4732, new SridInfo(4732, "EPSG", 4732, "GEOGCS[\"Marshall Islands 1960\", DATUM[\"Marshall Islands 1960\", ELLIPSOID[\"Hough 1960\", 6378270, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378270.0, 6356794.343));
  		_sridList.Add(4733, new SridInfo(4733, "EPSG", 4733, "GEOGCS[\"Wake Island 1952\", DATUM[\"Wake Island 1952\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4734, new SridInfo(4734, "EPSG", 4734, "GEOGCS[\"Tristan 1968\", DATUM[\"Tristan 1968\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4735, new SridInfo(4735, "EPSG", 4735, "GEOGCS[\"Kusaie 1951\", DATUM[\"Kusaie 1951\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4736, new SridInfo(4736, "EPSG", 4736, "GEOGCS[\"Deception Island\", DATUM[\"Deception Island\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4737, new SridInfo(4737, "EPSG", 4737, "GEOGCS[\"Korea 2000\", DATUM[\"Geocentric datum of Korea\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4738, new SridInfo(4738, "EPSG", 4738, "GEOGCS[\"Hong Kong 1963\", DATUM[\"Hong Kong 1963\", ELLIPSOID[\"Clarke 1858\", 6378293.64520876, 294.260676369261]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "Clarke's foot", 0.304797265, 20926348.0, 20855233.0));
  		_sridList.Add(4739, new SridInfo(4739, "EPSG", 4739, "GEOGCS[\"Hong Kong 1963(67)\", DATUM[\"Hong Kong 1963(67)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4740, new SridInfo(4740, "EPSG", 4740, "GEOGCS[\"PZ-90\", DATUM[\"Parametrop Zemp 1990\", ELLIPSOID[\"PZ-90\", 6378136, 298.257839303]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378136.0, 6356751.362));
  		_sridList.Add(4741, new SridInfo(4741, "EPSG", 4741, "GEOGCS[\"FD54\", DATUM[\"Faroe Datum 1954\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4742, new SridInfo(4742, "EPSG", 4742, "GEOGCS[\"GDM2000\", DATUM[\"Geodetic Datum of Malaysia 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4743, new SridInfo(4743, "EPSG", 4743, "GEOGCS[\"Karbala 1979 (Polservice)\", DATUM[\"Karbala 1979 (Polservice)\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4744, new SridInfo(4744, "EPSG", 4744, "GEOGCS[\"Nahrwan 1934\", DATUM[\"Nahrwan 1934\", ELLIPSOID[\"Clarke 1880 (RGS)\", 6378249.145, 293.465]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.145, 6356514.87));
  		_sridList.Add(4745, new SridInfo(4745, "EPSG", 4745, "GEOGCS[\"RD/83\", DATUM[\"Rauenberg Datum/83\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4746, new SridInfo(4746, "EPSG", 4746, "GEOGCS[\"PD/83\", DATUM[\"Potsdam Datum/83\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4747, new SridInfo(4747, "EPSG", 4747, "GEOGCS[\"GR96\", DATUM[\"Greenland 1996\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4748, new SridInfo(4748, "EPSG", 4748, "GEOGCS[\"Vanua Levu 1915\", DATUM[\"Vanua Levu 1915\", ELLIPSOID[\"Clarke 1880 (international foot)\", 6378306.3696, 293.46630765563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "foot", 0.3048, 20926202.0, 20854895.0));
  		_sridList.Add(4749, new SridInfo(4749, "EPSG", 4749, "GEOGCS[\"RGNC91-93\", DATUM[\"Reseau Geodesique de Nouvelle Caledonie 91-93\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4750, new SridInfo(4750, "EPSG", 4750, "GEOGCS[\"ST87 Ouvea\", DATUM[\"ST87 Ouvea\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4751, new SridInfo(4751, "EPSG", 4751, "GEOGCS[\"Kertau (RSO)\", DATUM[\"Kertau (RSO)\", ELLIPSOID[\"Everest 1830 (RSO 1969)\", 6377295.664, 300.8017]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377295.664, 6356094.668));
  		_sridList.Add(4752, new SridInfo(4752, "EPSG", 4752, "GEOGCS[\"Viti Levu 1912\", DATUM[\"Viti Levu 1912\", ELLIPSOID[\"Clarke 1880 (international foot)\", 6378306.3696, 293.46630765563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "foot", 0.3048, 20926202.0, 20854895.0));
  		_sridList.Add(4753, new SridInfo(4753, "EPSG", 4753, "GEOGCS[\"fk89\", DATUM[\"fk89\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4754, new SridInfo(4754, "EPSG", 4754, "GEOGCS[\"LGD2006\", DATUM[\"Libyan Geodetic Datum 2006\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4755, new SridInfo(4755, "EPSG", 4755, "GEOGCS[\"DGN95\", DATUM[\"Datum Geodesi Nasional 1995\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4756, new SridInfo(4756, "EPSG", 4756, "GEOGCS[\"VN-2000\", DATUM[\"Vietnam 2000\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4757, new SridInfo(4757, "EPSG", 4757, "GEOGCS[\"SVY21\", DATUM[\"SVY21\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4758, new SridInfo(4758, "EPSG", 4758, "GEOGCS[\"JAD2001\", DATUM[\"Jamaica 2001\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4801, new SridInfo(4801, "EPSG", 4801, "GEOGCS[\"Bern 1898 (Bern)\", DATUM[\"CH1903 (Bern)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Bern\", 7.4395833333], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4802, new SridInfo(4802, "EPSG", 4802, "GEOGCS[\"Bogota 1975 (Bogota)\", DATUM[\"Bogota 1975 (Bogota)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Bogota\", -74.0809166667], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4803, new SridInfo(4803, "EPSG", 4803, "GEOGCS[\"Lisbon (Lisbon)\", DATUM[\"Lisbon 1937 (Lisbon)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Lisbon\", -9.1319061111], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4804, new SridInfo(4804, "EPSG", 4804, "GEOGCS[\"Makassar (Jakarta)\", DATUM[\"Makassar (Jakarta)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Jakarta\", 106.8077194444], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4805, new SridInfo(4805, "EPSG", 4805, "GEOGCS[\"MGI (Ferro)\", DATUM[\"Militar-Geographische Institut (Ferro)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Ferro\", -17.6666666667], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4806, new SridInfo(4806, "EPSG", 4806, "GEOGCS[\"Monte Mario (Rome)\", DATUM[\"Monte Mario (Rome)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Rome\", 12.4523333333], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4807, new SridInfo(4807, "EPSG", 4807, "GEOGCS[\"NTF (Paris)\", DATUM[\"Nouvelle Triangulation Francaise (Paris)\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4808, new SridInfo(4808, "EPSG", 4808, "GEOGCS[\"Padang (Jakarta)\", DATUM[\"Padang 1884 (Jakarta)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Jakarta\", 106.8077194444], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4809, new SridInfo(4809, "EPSG", 4809, "GEOGCS[\"Belge 1950 (Brussels)\", DATUM[\"Reseau National Belge 1950 (Brussels)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Brussels\", 4.367975], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4810, new SridInfo(4810, "EPSG", 4810, "GEOGCS[\"Tananarive (Paris)\", DATUM[\"Tananarive 1925 (Paris)\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4811, new SridInfo(4811, "EPSG", 4811, "GEOGCS[\"Voirol 1875 (Paris)\", DATUM[\"Voirol 1875 (Paris)\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4813, new SridInfo(4813, "EPSG", 4813, "GEOGCS[\"Batavia (Jakarta)\", DATUM[\"Batavia (Jakarta)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Jakarta\", 106.8077194444], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4814, new SridInfo(4814, "EPSG", 4814, "GEOGCS[\"RT38 (Stockholm)\", DATUM[\"Stockholm 1938 (Stockholm)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Stockholm\", 18.0582777778], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4815, new SridInfo(4815, "EPSG", 4815, "GEOGCS[\"Greek (Athens)\", DATUM[\"Greek (Athens)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Athens\", 23.7163375], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4816, new SridInfo(4816, "EPSG", 4816, "GEOGCS[\"Carthage (Paris)\", DATUM[\"Carthage (Paris)\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4817, new SridInfo(4817, "EPSG", 4817, "GEOGCS[\"NGO 1948 (Oslo)\", DATUM[\"NGO 1948 (Oslo)\", ELLIPSOID[\"Bessel Modified\", 6377492.018, 299.1528128]], PRIMEM[\"Oslo\", 10.7229166667], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377492.018, 6356173.509));
  		_sridList.Add(4818, new SridInfo(4818, "EPSG", 4818, "GEOGCS[\"S-JTSK (Ferro)\", DATUM[\"S-JTSK (Ferro)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Ferro\", -17.6666666667], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4820, new SridInfo(4820, "EPSG", 4820, "GEOGCS[\"Segara (Jakarta)\", DATUM[\"Gunung Segara (Jakarta)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Jakarta\", 106.8077194444], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4821, new SridInfo(4821, "EPSG", 4821, "GEOGCS[\"Voirol 1879 (Paris)\", DATUM[\"Voirol 1879 (Paris)\", ELLIPSOID[\"Clarke 1880 (IGN)\", 6378249.2, 293.466021293627]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378249.2, 6356515.0));
  		_sridList.Add(4895, new SridInfo(4895, "EPSG", 4895, "GEOGCS[\"JAD2001\", DATUM[\"Jamaica 2001\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4898, new SridInfo(4898, "EPSG", 4898, "GEOGCS[\"DGN95\", DATUM[\"Datum Geodesi Nasional 1995\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4900, new SridInfo(4900, "EPSG", 4900, "GEOGCS[\"LGD2006\", DATUM[\"Libyan Geodetic Datum 2006\", ELLIPSOID[\"International 1924\", 6378388, 297]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378388.0, 6356911.946));
  		_sridList.Add(4901, new SridInfo(4901, "EPSG", 4901, "GEOGCS[\"ATF (Paris)\", DATUM[\"Ancienne Triangulation Francaise (Paris)\", ELLIPSOID[\"Plessis 1817\", 6376523, 308.64]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6376523.0, 6355862.933));
  		_sridList.Add(4902, new SridInfo(4902, "EPSG", 4902, "GEOGCS[\"NDG (Paris)\", DATUM[\"Nord de Guerre (Paris)\", ELLIPSOID[\"Plessis 1817\", 6376523, 308.64]], PRIMEM[\"Paris\", 2.33722917], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6376523.0, 6355862.933));
  		_sridList.Add(4903, new SridInfo(4903, "EPSG", 4903, "GEOGCS[\"Madrid 1870 (Madrid)\", DATUM[\"Madrid 1870 (Madrid)\", ELLIPSOID[\"Struve 1860\", 6378298.3, 294.73]], PRIMEM[\"Madrid\", -3.6879388889], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378298.3, 6356657.143));
  		_sridList.Add(4904, new SridInfo(4904, "EPSG", 4904, "GEOGCS[\"Lisbon 1890 (Lisbon)\", DATUM[\"Lisbon 1890 (Lisbon)\", ELLIPSOID[\"Bessel 1841\", 6377397.155, 299.1528128]], PRIMEM[\"Lisbon\", -9.1319061111], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6377397.155, 6356078.963));
  		_sridList.Add(4907, new SridInfo(4907, "EPSG", 4907, "GEOGCS[\"RGNC91-93\", DATUM[\"Reseau Geodesique de Nouvelle Caledonie 91-93\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4909, new SridInfo(4909, "EPSG", 4909, "GEOGCS[\"GR96\", DATUM[\"Greenland 1996\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4921, new SridInfo(4921, "EPSG", 4921, "GEOGCS[\"GDM2000\", DATUM[\"Geodetic Datum of Malaysia 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4923, new SridInfo(4923, "EPSG", 4923, "GEOGCS[\"PZ-90\", DATUM[\"Parametrop Zemp 1990\", ELLIPSOID[\"PZ-90\", 6378136, 298.257839303]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378136.0, 6356751.362));
  		_sridList.Add(4925, new SridInfo(4925, "EPSG", 4925, "GEOGCS[\"Mauritania 1999\", DATUM[\"Mauritania 1999\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4927, new SridInfo(4927, "EPSG", 4927, "GEOGCS[\"Korea 2000\", DATUM[\"Geocentric datum of Korea\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4929, new SridInfo(4929, "EPSG", 4929, "GEOGCS[\"POSGAR 94\", DATUM[\"Posiciones Geodesicas Argentinas 1994\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4931, new SridInfo(4931, "EPSG", 4931, "GEOGCS[\"Australian Antarctic\", DATUM[\"Australian Antarctic Datum 1998\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4933, new SridInfo(4933, "EPSG", 4933, "GEOGCS[\"CHTRF95\", DATUM[\"Swiss Terrestrial Reference Frame 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4935, new SridInfo(4935, "EPSG", 4935, "GEOGCS[\"EST97\", DATUM[\"Estonia 1997\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4937, new SridInfo(4937, "EPSG", 4937, "GEOGCS[\"ETRS89\", DATUM[\"European Terrestrial Reference System 1989\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4939, new SridInfo(4939, "EPSG", 4939, "GEOGCS[\"GDA94\", DATUM[\"Geocentric Datum of Australia 1994\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4941, new SridInfo(4941, "EPSG", 4941, "GEOGCS[\"Hartebeesthoek94\", DATUM[\"Hartebeesthoek94\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4943, new SridInfo(4943, "EPSG", 4943, "GEOGCS[\"IRENET95\", DATUM[\"IRENET95\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4945, new SridInfo(4945, "EPSG", 4945, "GEOGCS[\"ISN93\", DATUM[\"Islands Network 1993\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4947, new SridInfo(4947, "EPSG", 4947, "GEOGCS[\"JGD2000\", DATUM[\"Japanese Geodetic Datum 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4949, new SridInfo(4949, "EPSG", 4949, "GEOGCS[\"LKS92\", DATUM[\"Latvia 1992\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4951, new SridInfo(4951, "EPSG", 4951, "GEOGCS[\"LKS94\", DATUM[\"Lithuania 1994 (ETRS89)\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4953, new SridInfo(4953, "EPSG", 4953, "GEOGCS[\"Moznet\", DATUM[\"Moznet (ITRF94)\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4955, new SridInfo(4955, "EPSG", 4955, "GEOGCS[\"NAD83(CSRS)\", DATUM[\"NAD83 Canadian Spatial Reference System\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4957, new SridInfo(4957, "EPSG", 4957, "GEOGCS[\"NAD83(HARN)\", DATUM[\"NAD83 (High Accuracy Regional Network)\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4959, new SridInfo(4959, "EPSG", 4959, "GEOGCS[\"NZGD2000\", DATUM[\"New Zealand Geodetic Datum 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4961, new SridInfo(4961, "EPSG", 4961, "GEOGCS[\"POSGAR 98\", DATUM[\"Posiciones Geodesicas Argentinas 1998\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4963, new SridInfo(4963, "EPSG", 4963, "GEOGCS[\"REGVEN\", DATUM[\"Red Geodesica Venezolana\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4965, new SridInfo(4965, "EPSG", 4965, "GEOGCS[\"RGF93\", DATUM[\"Reseau Geodesique Francais 1993\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4967, new SridInfo(4967, "EPSG", 4967, "GEOGCS[\"RGFG95\", DATUM[\"Reseau Geodesique Francais Guyane 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4971, new SridInfo(4971, "EPSG", 4971, "GEOGCS[\"RGR92\", DATUM[\"Reseau Geodesique de la Reunion 1992\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4973, new SridInfo(4973, "EPSG", 4973, "GEOGCS[\"RRAF 1991\", DATUM[\"Reseau de Reference des Antilles Francaises 1991\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4975, new SridInfo(4975, "EPSG", 4975, "GEOGCS[\"SIRGAS\", DATUM[\"Sistema de Referencia Geocentrico para America del Sur 1995\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4977, new SridInfo(4977, "EPSG", 4977, "GEOGCS[\"SWEREF99\", DATUM[\"SWEREF99\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4979, new SridInfo(4979, "EPSG", 4979, "GEOGCS[\"WGS 84\", DATUM[\"World Geodetic System 1984\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4981, new SridInfo(4981, "EPSG", 4981, "GEOGCS[\"Yemen NGN96\", DATUM[\"Yemen National Geodetic Network 1996\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4983, new SridInfo(4983, "EPSG", 4983, "GEOGCS[\"IGM95\", DATUM[\"Istituto Geografico Militaire 1995\", ELLIPSOID[\"WGS 84\", 6378137, 298.257223563]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4985, new SridInfo(4985, "EPSG", 4985, "GEOGCS[\"WGS 72\", DATUM[\"World Geodetic System 1972\", ELLIPSOID[\"WGS 72\", 6378135, 298.26]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.52));
  		_sridList.Add(4987, new SridInfo(4987, "EPSG", 4987, "GEOGCS[\"WGS 72BE\", DATUM[\"WGS 72 Transit Broadcast Ephemeris\", ELLIPSOID[\"WGS 72\", 6378135, 298.26]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378135.0, 6356750.52));
  		_sridList.Add(4989, new SridInfo(4989, "EPSG", 4989, "GEOGCS[\"SIRGAS 2000\", DATUM[\"Sistema de Referencia Geocentrico para America del Sur 2000\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4991, new SridInfo(4991, "EPSG", 4991, "GEOGCS[\"Lao 1993\", DATUM[\"Lao 1993\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4993, new SridInfo(4993, "EPSG", 4993, "GEOGCS[\"Lao 1997\", DATUM[\"Lao National Datum 1997\", ELLIPSOID[\"Krassowsky 1940\", 6378245, 298.3]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378245.0, 6356863.019));
  		_sridList.Add(4995, new SridInfo(4995, "EPSG", 4995, "GEOGCS[\"PRS92\", DATUM[\"Philippine Reference System 1992\", ELLIPSOID[\"Clarke 1866\", 6378206.4, 294.978698213898]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378206.4, 6356583.8));
  		_sridList.Add(4997, new SridInfo(4997, "EPSG", 4997, "GEOGCS[\"MAGNA-SIRGAS\", DATUM[\"Marco Geocentrico Nacional de Referencia\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(4999, new SridInfo(4999, "EPSG", 4999, "GEOGCS[\"RGPF\", DATUM[\"Reseau Geodesique de la Polynesie Francaise\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(7843, new SridInfo(7843, "EPSG", 7843, "GEOGCS[\"GDA2020\", DATUM[\"Geocentric Datum of Australia 2020\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(7844, new SridInfo(7844, "EPSG", 7844, "GEOGCS[\"GDA2020\", DATUM[\"Geocentric Datum of Australia 2020\", ELLIPSOID[\"GRS 1980\", 6378137, 298.257222101]], PRIMEM[\"Greenwich\", 0], UNIT[\"Degree\", 0.0174532925199433]]", "metre", 1.0, 6378137.0, 6356752.314));
  		_sridList.Add(104001, new SridInfo(104001, "Microsoft", 104001, "GEOGCS[\"Unit Sphere\", DATUM[\"Unit Sphere\", SPHEROID[\"Sphere\", 1.0, 0.0]], PRIMEM[\"Greenwich\",0.0], UNIT[\"Degree\", 0.0174532925199433]]", "radian", 1.0, 1.0, 1.0));
  	}

  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable InitMethod()
  	{
  		return _sridList;
  	}

  	public static void FillRow(object obj, out int spatial_reference_id, out string authority_name, out int authorized_spatial_reference_id, out string well_known_text, out string unit_of_measure, out double unit_conversion_factor)
  	{
  		SridInfo value = ((KeyValuePair<int, SridInfo>)obj).Value;
  		spatial_reference_id = value.spatial_reference_id;
  		authority_name = value.authority_name;
  		authorized_spatial_reference_id = value.authorized_spatial_reference_id;
  		well_known_text = value.well_known_text;
  		unit_of_measure = value.unit_of_measure;
  		unit_conversion_factor = value.unit_conversion_factor;
  	}

  	public static bool SridExists(int srid)
  	{
  		return _sridList.ContainsKey(srid);
  	}

  	public static EllipsoidParameters GetEllipsoidParameters(int srid)
  	{
  		SridInfo sridInfo = _sridList[srid];
  		return new EllipsoidParameters(sridInfo.semi_major_axis, sridInfo.semi_minor_axis);
  	}
  }
  internal struct Vector3
  {
  	public double x;

  	public double y;

  	public double z;

  	public Vector3(double x, double y, double z)
  	{
  		this.x = x;
  		this.y = y;
  		this.z = z;
  	}
  }
  internal static class TiledProjection
  {
  	private const double WORSPACE_BOUND = 562949953421312.0;

  	private const double m_sqrt3 = 1.7320508075688772;

  	private const double m_sqrtThird = 0.5773502691896257;

  	private const double m_sqrt2Thirds = 0.816496580927726;

  	private static readonly double M_SQRT2;

  	private static readonly double m_extent;

  	private static readonly double m_scale;

  	private static readonly double m_inverseConstantTerm;

  	static TiledProjection()
  	{
  		M_SQRT2 = Math.Sqrt(2.0);
  		m_extent = 281474976710656.0;
  		double num = 1.0;
  		m_scale = m_extent / (1.224744871391589 * num);
  		m_inverseConstantTerm = 1.7320508075688772 * m_scale;
  	}

  	public static Vector3 InverseProject(double x, double y)
  	{
  		double num = ((y >= x) ? ((!(y >= 0.0 - x)) ? x : (0.0 - y)) : ((!(y >= 0.0 - x)) ? y : (0.0 - x)));
  		num = m_inverseConstantTerm + M_SQRT2 * num;
  		double num2 = Math.Sqrt(x * x + y * y + num * num);
  		return new Vector3(x / num2, y / num2, num / num2);
  	}
  }
  internal class InverseProjection : IGeometrySink
  {
  	private IGeographySink sink;

  	private double lastX;

  	private double lastY;

  	public const long SizeX = 562949953421312L;

  	public const long SizeY = 1125899906842624L;

  	private const double s_toDegrees = 180.0 / Math.PI;

  	public InverseProjection(IGeographySink sink)
  	{
  		this.sink = sink;
  	}

  	public void SetSrid(int srid)
  	{
  		sink.SetSrid(4326);
  	}

  	public void BeginGeometry(OpenGisGeometryType type)
  	{
  		sink.BeginGeography((OpenGisGeographyType)type);
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		Vector3 v = Convert(x, y);
  		sink.BeginFigure(Latitude(v), Longitude(v), z, m);
  		lastX = x;
  		lastY = y;
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		Vector3 v = Convert((x + lastX) / 2.0, (y + lastY) / 2.0);
  		sink.AddLine(Latitude(v), Longitude(v), z, m);
  		v = Convert(x, y);
  		sink.AddLine(Latitude(v), Longitude(v), z, m);
  		lastX = x;
  		lastY = y;
  	}

  	public void EndFigure()
  	{
  		sink.EndFigure();
  	}

  	public void EndGeometry()
  	{
  		sink.EndGeography();
  	}

  	public static Vector3 Convert(double x, double y)
  	{
  		if (y >= 0.0)
  		{
  			Vector3 vector = TiledProjection.InverseProject(x, y - 281474976710656.0);
  			return new Vector3(vector.x, vector.y, vector.z);
  		}
  		Vector3 vector2 = TiledProjection.InverseProject(x, y + 281474976710656.0);
  		return new Vector3(vector2.x, 0.0 - vector2.y, 0.0 - vector2.z);
  	}

  	private static double Latitude(Vector3 v)
  	{
  		if (v.z >= 1.0)
  		{
  			return 90.0;
  		}
  		if (v.z <= -1.0)
  		{
  			return -90.0;
  		}
  		double num = Math.Asin(v.z) * (180.0 / Math.PI);
  		if (!(Math.Abs(num) < 1E-12))
  		{
  			return num;
  		}
  		return 0.0;
  	}

  	private static double Longitude(Vector3 v)
  	{
  		if (v.x == 0.0 && v.y == 0.0)
  		{
  			return 0.0;
  		}
  		return Math.Atan2(v.y, v.x) * (180.0 / Math.PI);
  	}

  	public static SqlGeography Unproject(SqlGeometry geom)
  	{
  		SqlGeographyBuilder sqlGeographyBuilder = new SqlGeographyBuilder();
  		geom.Populate(new InverseProjection(sqlGeographyBuilder));
  		return sqlGeographyBuilder.ConstructedGeography;
  	}
  }
  internal class GridCell
  {
  	public readonly int id;

  	public readonly byte attribute;

  	public readonly byte[] wkb;

  	public GridCell(int id, byte attribute, byte[] wkb)
  	{
  		this.id = id;
  		this.attribute = attribute;
  		this.wkb = wkb;
  	}
  }
  public class SpatialGridCoverage
  {
  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable Planar(SqlGeometry geometry, double rootX, double rootY, double maxX, double maxY, int rows, int columns)
  	{
  		if (maxX <= rootX)
  		{
  			throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidBoundingBox, "xmax", "xmin"));
  		}
  		if (maxY <= rootY)
  		{
  			throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidBoundingBox, "ymax", "ymin"));
  		}
  		if (geometry == null || geometry.IsNull || !geometry.GeoData.GetIsValid())
  		{
  			return new object[0];
  		}
  		if (geometry.STIsEmpty().Value)
  		{
  			return new object[1] { GetRootCell(rootX, rootY, maxX - rootX, maxY - rootY) };
  		}
  		return GridCoverage(geometry, rootX, rootY, maxX - rootX, maxY - rootY, rows, columns, unproject: false);
  	}

  	[SqlFunction(FillRowMethodName = "FillRow")]
  	public static IEnumerable Geodetic(SqlGeography geography, int rows, int columns)
  	{
  		if (geography == null || geography.IsNull || !geography.GeoData.GetIsValid())
  		{
  			return new object[0];
  		}
  		if (geography.STIsEmpty().Value)
  		{
  			return new object[1]
  			{
  				new GridCell(0, 0, null)
  			};
  		}
  		return GridCoverage(geography, -281474976710656.0, -562949953421312.0, 562949953421312.0, 1125899906842624.0, rows, columns, unproject: true);
  	}

  	private static IEnumerable GridCoverage(ISqlSpatialGridIndexable obj, double rootX, double rootY, double width, double height, int rows, int columns, bool unproject)
  	{
  		bool[,] touched = new bool[rows, columns];
  		bool[,] contained = new bool[rows, columns];
  		int cCellsTouched = 0;
  		int cCellsContained = 0;
  		bool fGeometryExceedsGrid = false;
  		bool fHasAmbiguousTouchedCells = false;
  		obj.GetGridCoverage(isTopmostGrid: true, rootX, rootY, width, height, 0.0, 0.0, rows, columns, touched, contained, out cCellsTouched, out cCellsContained, out fGeometryExceedsGrid, out fHasAmbiguousTouchedCells);
  		double cellWidth = width / (double)columns;
  		double cellHeight = height / (double)rows;
  		for (int iRow = 0; iRow < rows; iRow++)
  		{
  			for (int iCol = 0; iCol < columns; iCol++)
  			{
  				if (touched[iRow, iCol] || contained[iRow, iCol])
  				{
  					SqlGeometry sqlGeometry = CreateBox(OpenGisGeometryType.Polygon, rootX + (double)iCol * cellWidth, rootY + (double)iRow * cellHeight, cellWidth, cellHeight);
  					byte[] wkb = (unproject ? InverseProjection.Unproject(sqlGeometry).STAsBinary().Value : sqlGeometry.STAsBinary().Value);
  					yield return new GridCell(iRow * rows + iCol + 1, (byte)(contained[iRow, iCol] ? 2u : ((!fHasAmbiguousTouchedCells) ? 1u : 0u)), wkb);
  				}
  			}
  		}
  		if (fGeometryExceedsGrid && !unproject)
  		{
  			yield return GetRootCell(rootX, rootY, width, height);
  		}
  	}

  	private static GridCell GetRootCell(double rootX, double rootY, double width, double height)
  	{
  		SqlGeometry sqlGeometry = CreateBox(OpenGisGeometryType.LineString, rootX, rootY, width, height);
  		return new GridCell(0, 0, sqlGeometry.STAsBinary().Value);
  	}

  	public static void FillRow(object obj, out int id, out byte attribute, out byte[] wkb)
  	{
  		GridCell gridCell = (GridCell)obj;
  		id = gridCell.id;
  		attribute = gridCell.attribute;
  		wkb = gridCell.wkb;
  	}

  	private static SqlGeometry CreateBox(OpenGisGeometryType type, double xmin, double ymin, double width, double height)
  	{
  		SqlGeometryBuilder sqlGeometryBuilder = new SqlGeometryBuilder();
  		sqlGeometryBuilder.SetSrid(0);
  		sqlGeometryBuilder.BeginGeometry(type);
  		sqlGeometryBuilder.BeginFigure(xmin, ymin);
  		sqlGeometryBuilder.AddLine(xmin + width, ymin);
  		sqlGeometryBuilder.AddLine(xmin + width, ymin + height);
  		sqlGeometryBuilder.AddLine(xmin, ymin + height);
  		sqlGeometryBuilder.AddLine(xmin, ymin);
  		sqlGeometryBuilder.EndFigure();
  		sqlGeometryBuilder.EndGeometry();
  		return sqlGeometryBuilder.ConstructedGeometry;
  	}
  }
  internal static class ListExtensions
  {
  	private static bool isGracefulOomHandlingSet;

  	private static bool gracefulOomHandling;

  	private const int x_fSpatialMaxClrArraySizeHandling = 16;

  	public const int Limit = 2147483591;

  	public static bool FGracefulOomHandling
  	{
  		get
  		{
  			if (!isGracefulOomHandlingSet)
  			{
  				SqlGeography.UpdateClrFeatureSwitchMap();
  				gracefulOomHandling = (SqlGeography.ClrFeatureSwitchMap() & 0x10) != 0;
  				Thread.MemoryBarrier();
  				isGracefulOomHandlingSet = true;
  			}
  			return gracefulOomHandling;
  		}
  	}

  	public static void AddSafe<T>(this List<T> list, T obj)
  	{
  		if (list.Capacity == list.Count && FGracefulOomHandling)
  		{
  			int maxCapacity = list.GetMaxCapacity();
  			if (2L * (long)list.Capacity > maxCapacity)
  			{
  				if (list.Capacity >= maxCapacity)
  				{
  					throw new InvalidOperationException(SpatialRes.StrListCapacityExceeded);
  				}
  				list.Capacity = maxCapacity;
  			}
  		}
  		list.Add(obj);
  	}

  	public static int GetMaxCapacity<T>(this List<T> list)
  	{
  		return 2147483591 / list.GetObjectSize();
  	}

  	public static int GetObjectSize<T>(this List<T> list)
  	{
  		int result = Marshal.SizeOf(typeof(T));
  		if (typeof(T) == typeof(char))
  		{
  			result = 2;
  		}
  		return result;
  	}
  }
  internal class GeometryValidator : Validator
  {
  	public GeometryValidator()
  		: base("Geometry")
  	{
  	}

  	protected override void ValidateSrid(int srid)
  	{
  		if (!IsSridValid(srid))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSridOutOfRange));
  		}
  	}

  	internal static bool IsSridValid(int srid)
  	{
  		if (0 <= srid)
  		{
  			return srid <= 999999;
  		}
  		return false;
  	}

  	protected override void ValidatePolygonRing(int iRing, int cPoints, double firstX, double firstY, double lastX, double lastY)
  	{
  		if (cPoints < 4)
  		{
  			if (iRing == 1)
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonExteriorRingHasTooFewPoints));
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonInteriorRingHasTooFewPoints, iRing - 1));
  		}
  		if (firstX != lastX || firstY != lastY)
  		{
  			if (iRing == 1)
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonExteriorRingNotARing));
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonInteriorRingNotARing, iRing - 1));
  		}
  	}
  }
  internal class GeographyValidator : Validator
  {
  	internal const double MaxLongitude = 15069.0;

  	internal const double MaxLatitude = 90.0;

  	public GeographyValidator()
  		: base("Geography")
  	{
  	}

  	protected override void ValidateSrid(int srid)
  	{
  		if (!SridList.SridExists(srid))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGeographySridIsNotValid));
  		}
  	}

  	protected override void ValidatePoint(double x, double y, double? z, double? m)
  	{
  		base.ValidatePoint(x, y, z, m);
  		if (!IsLatitudeValid(x))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGeographyCoordinatesLatitudeIsNotValid, x));
  		}
  		if (!IsLongitudeValid(y))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrGeographyCoordinatesLongitudeIsNotValid, y));
  		}
  	}

  	internal static bool IsLatitudeValid(double latitude)
  	{
  		if (latitude >= -90.0)
  		{
  			return latitude <= 90.0;
  		}
  		return false;
  	}

  	internal static bool IsLongitudeValid(double longitude)
  	{
  		if (longitude >= -15069.0)
  		{
  			return longitude <= 15069.0;
  		}
  		return false;
  	}

  	private static bool AreLongitudesEqual(double a, double b)
  	{
  		if (a != b)
  		{
  			return (a - b) % 360.0 == 0.0;
  		}
  		return true;
  	}

  	protected override bool AcceptsFullGlobe()
  	{
  		return true;
  	}

  	protected override void ValidatePolygonRing(int iRing, int cPoints, double firstX, double firstY, double lastX, double lastY)
  	{
  		if (cPoints < 4)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonRingHasTooFewPoints, iRing));
  		}
  		if (firstX != lastX || !AreLongitudesEqual(firstY, lastY))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonRingNotARing, iRing));
  		}
  	}
  }
  internal abstract class Validator : GeoDataSink
  {
  	internal enum State
  	{
  		SetSrid,
  		Geometry,
  		Point,
  		Point1,
  		Point2,
  		LineString,
  		LineString1,
  		LineString2,
  		Polygon,
  		Polygon1,
  		MultiPoint,
  		MultiLineString,
  		MultiPolygon,
  		GeometryCollection,
  		FullGlobe,
  		CircularString,
  		CircularString1,
  		CircularString2,
  		CompoundCurve,
  		CompoundCurve1,
  		CompoundCurve2,
  		CompoundCurveLine0,
  		CompoundCurveArc0,
  		CompoundCurveLine,
  		CompoundCurveArc,
  		CurvePolygon,
  		CurvePolygon0,
  		CurvePolygonCC,
  		CurvePolygon1,
  		CurvePolygonLine0,
  		CurvePolygonArc0,
  		CurvePolygonLine,
  		CurvePolygonArc,
  		Finish
  	}

  	private enum Transition
  	{
  		SetSrid,
  		Begin,
  		Begin_Point,
  		Begin_LineString,
  		Begin_Polygon,
  		Begin_MultiPoint,
  		Begin_MultiLineString,
  		Begin_MultiPolygon,
  		Begin_GeometryCollection,
  		Begin_FullGlobe,
  		Begin_CircularString,
  		Begin_CompoundCurve,
  		Begin_CurvePolygon,
  		BeginFigure,
  		AddLine,
  		AddCircularArc,
  		AddSegmentLine,
  		AddSegmentArc,
  		StartSimpleRing,
  		StartCompoundCurveRing,
  		EndFigure,
  		End,
  		Finish
  	}

  	private string _name;

  	private Stack<State> _stack = new Stack<State>(16);

  	private Transition _transition;

  	private int _srid = -1;

  	protected double _firstX;

  	protected double _firstY;

  	protected double _lastX;

  	protected double _lastY;

  	protected double? _lastZ;

  	protected int _pointCount;

  	protected int _depth;

  	private int _ringCount;

  	public Validator(string name)
  	{
  		_name = name;
  		_stack.Push(State.Finish);
  		_stack.Push(State.Geometry);
  		_stack.Push(State.SetSrid);
  	}

  	public void SetSrid(int srid)
  	{
  		Execute(Transition.SetSrid);
  		if (_srid == -1)
  		{
  			ValidateSrid(srid);
  			_srid = srid;
  		}
  		else if (_srid != srid)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrSetSridMismatch));
  		}
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_depth++;
  		switch (type)
  		{
  		case OpenGisType.Point:
  			Execute(Transition.Begin_Point);
  			break;
  		case OpenGisType.LineString:
  			Execute(Transition.Begin_LineString);
  			break;
  		case OpenGisType.Polygon:
  			Execute(Transition.Begin_Polygon);
  			break;
  		case OpenGisType.MultiPoint:
  			Execute(Transition.Begin_MultiPoint);
  			break;
  		case OpenGisType.MultiLineString:
  			Execute(Transition.Begin_MultiLineString);
  			break;
  		case OpenGisType.MultiPolygon:
  			Execute(Transition.Begin_MultiPolygon);
  			break;
  		case OpenGisType.GeometryCollection:
  			Execute(Transition.Begin_GeometryCollection);
  			break;
  		case OpenGisType.FullGlobe:
  			if (!AcceptsFullGlobe())
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidType, _name, type));
  			}
  			Execute(Transition.Begin_FullGlobe);
  			break;
  		case OpenGisType.CircularString:
  			Execute(Transition.Begin_CircularString);
  			break;
  		case OpenGisType.CompoundCurve:
  			Execute(Transition.Begin_CompoundCurve);
  			break;
  		case OpenGisType.CurvePolygon:
  			Execute(Transition.Begin_CurvePolygon);
  			break;
  		default:
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidType, _name, type));
  		}
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		Execute(Transition.BeginFigure);
  		ValidatePoint(x, y, z, m);
  		_firstX = x;
  		_firstY = y;
  		_lastZ = z;
  		_pointCount = 1;
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		Execute(Transition.AddLine);
  		ValidatePoint(x, y, z, m);
  		_lastX = x;
  		_lastY = y;
  		_lastZ = z;
  		_pointCount++;
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		ValidatePoint(x1, y1, z1, m1);
  		ValidatePoint(x2, y2, z2, m2);
  		if (_lastZ != z1 || _lastZ != z2)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrArcNeedToHaveEqualZ));
  		}
  		_lastX = x2;
  		_lastY = y2;
  		_lastZ = z2;
  		_pointCount += 2;
  		Execute(Transition.AddCircularArc);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		switch (type)
  		{
  		case SegmentType.FirstLine:
  			Execute(Transition.AddSegmentLine);
  			break;
  		case SegmentType.FirstArc:
  			Execute(Transition.AddSegmentArc);
  			break;
  		}
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		if (type == FigureAttributes.Curve)
  		{
  			Execute(Transition.StartCompoundCurveRing);
  		}
  		else
  		{
  			Execute(Transition.StartSimpleRing);
  		}
  	}

  	public void EndFigure()
  	{
  		Execute(Transition.EndFigure);
  	}

  	public void EndGeo()
  	{
  		Execute(Transition.End);
  		_depth--;
  	}

  	public void Finish()
  	{
  		Execute(Transition.Finish);
  	}

  	private void Execute(Transition transition)
  	{
  		_transition = transition;
  		switch (_stack.Peek())
  		{
  		case State.SetSrid:
  			if (transition == Transition.SetSrid)
  			{
  				Return();
  			}
  			else
  			{
  				Expected(Transition.SetSrid);
  			}
  			break;
  		case State.Geometry:
  			switch (transition)
  			{
  			case Transition.Begin_Point:
  				Jump(State.Point);
  				break;
  			case Transition.Begin_LineString:
  				Jump(State.LineString);
  				break;
  			case Transition.Begin_Polygon:
  				Jump(State.Polygon);
  				break;
  			case Transition.Begin_MultiPoint:
  				Jump(State.MultiPoint);
  				break;
  			case Transition.Begin_MultiLineString:
  				Jump(State.MultiLineString);
  				break;
  			case Transition.Begin_MultiPolygon:
  				Jump(State.MultiPolygon);
  				break;
  			case Transition.Begin_GeometryCollection:
  				Jump(State.GeometryCollection);
  				break;
  			case Transition.Begin_FullGlobe:
  				if (_depth != 1)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrFullGlobeCannotBePartOfGeometryCollection));
  				}
  				Jump(State.FullGlobe);
  				break;
  			case Transition.Begin_CircularString:
  				Jump(State.CircularString);
  				break;
  			case Transition.Begin_CompoundCurve:
  				Jump(State.CompoundCurve);
  				break;
  			case Transition.Begin_CurvePolygon:
  				Jump(State.CurvePolygon);
  				break;
  			default:
  				Expected(Transition.Begin);
  				break;
  			}
  			break;
  		case State.Point:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.Point1);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.Point1:
  			if (transition == Transition.EndFigure)
  			{
  				Jump(State.Point2);
  			}
  			else
  			{
  				Expected(Transition.EndFigure);
  			}
  			break;
  		case State.Point2:
  			if (transition == Transition.End)
  			{
  				Return();
  			}
  			else
  			{
  				Expected(Transition.End);
  			}
  			break;
  		case State.LineString:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.LineString1);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.LineString1:
  			switch (transition)
  			{
  			case Transition.AddLine:
  				break;
  			case Transition.EndFigure:
  				if (_pointCount < 2)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrLineStringNeedsTwoPoints));
  				}
  				Jump(State.LineString2);
  				break;
  			default:
  				Expected(Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.LineString2:
  			if (transition == Transition.End)
  			{
  				Return();
  			}
  			else
  			{
  				Expected(Transition.End);
  			}
  			break;
  		case State.Polygon:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.Polygon1);
  				break;
  			case Transition.End:
  				_ringCount = 0;
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.Polygon1:
  			switch (transition)
  			{
  			case Transition.AddLine:
  				break;
  			case Transition.EndFigure:
  				_ringCount++;
  				ValidatePolygonRing(_ringCount, _pointCount, _firstX, _firstY, _lastX, _lastY);
  				Jump(State.Polygon);
  				break;
  			default:
  				Expected(Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.MultiPoint:
  			switch (transition)
  			{
  			case Transition.SetSrid:
  				break;
  			case Transition.Begin_Point:
  				Call(State.Point);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.SetSrid, Transition.Begin_Point, Transition.End);
  				break;
  			}
  			break;
  		case State.MultiLineString:
  			switch (transition)
  			{
  			case Transition.SetSrid:
  				break;
  			case Transition.Begin_LineString:
  				Call(State.LineString);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.SetSrid, Transition.Begin_LineString, Transition.End);
  				break;
  			}
  			break;
  		case State.MultiPolygon:
  			switch (transition)
  			{
  			case Transition.SetSrid:
  				break;
  			case Transition.Begin_Polygon:
  				Call(State.Polygon);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.SetSrid, Transition.Begin_Polygon, Transition.End);
  				break;
  			}
  			break;
  		case State.GeometryCollection:
  			switch (transition)
  			{
  			case Transition.SetSrid:
  				break;
  			case Transition.Begin_Point:
  				Call(State.Point);
  				break;
  			case Transition.Begin_LineString:
  				Call(State.LineString);
  				break;
  			case Transition.Begin_Polygon:
  				Call(State.Polygon);
  				break;
  			case Transition.Begin_MultiPoint:
  				Call(State.MultiPoint);
  				break;
  			case Transition.Begin_MultiLineString:
  				Call(State.MultiLineString);
  				break;
  			case Transition.Begin_MultiPolygon:
  				Call(State.MultiPolygon);
  				break;
  			case Transition.Begin_GeometryCollection:
  				Call(State.GeometryCollection);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			case Transition.Begin_FullGlobe:
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrFullGlobeCannotBePartOfGeometryCollection));
  			case Transition.Begin_CircularString:
  				Call(State.CircularString);
  				break;
  			case Transition.Begin_CompoundCurve:
  				Call(State.CompoundCurve);
  				break;
  			case Transition.Begin_CurvePolygon:
  				Call(State.CurvePolygon);
  				break;
  			default:
  				Expected(Transition.SetSrid, Transition.Begin, Transition.End);
  				break;
  			}
  			break;
  		case State.FullGlobe:
  			if (transition == Transition.End)
  			{
  				Return();
  				break;
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrFullGlobeCannotHaveElements));
  		case State.CircularString:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.CircularString1);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.CircularString1:
  			switch (transition)
  			{
  			case Transition.AddCircularArc:
  				break;
  			case Transition.EndFigure:
  				if (_pointCount < 3)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrCircularStringNeedsThreePoints));
  				}
  				Jump(State.CircularString2);
  				break;
  			default:
  				Expected(Transition.AddCircularArc, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CircularString2:
  			if (transition == Transition.End)
  			{
  				Return();
  			}
  			else
  			{
  				Expected(Transition.End);
  			}
  			break;
  		case State.CompoundCurve:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.CompoundCurve1);
  				break;
  			case Transition.AddSegmentLine:
  				Jump(State.CompoundCurveLine0);
  				break;
  			case Transition.AddSegmentArc:
  				Jump(State.CompoundCurveArc0);
  				break;
  			case Transition.End:
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.CompoundCurve1:
  			switch (transition)
  			{
  			case Transition.AddLine:
  			case Transition.AddCircularArc:
  				break;
  			case Transition.EndFigure:
  				if (_pointCount < 2)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrCompoundCurveNeedsTwoPoints));
  				}
  				Jump(State.CompoundCurve2);
  				break;
  			default:
  				Expected(Transition.AddCircularArc, Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CompoundCurve2:
  			if (transition == Transition.End)
  			{
  				Return();
  			}
  			else
  			{
  				Expected(Transition.End);
  			}
  			break;
  		case State.CompoundCurveLine0:
  			if (transition == Transition.BeginFigure)
  			{
  				Jump(State.CompoundCurveLine);
  			}
  			else
  			{
  				Expected(Transition.BeginFigure);
  			}
  			break;
  		case State.CompoundCurveLine:
  			switch (transition)
  			{
  			case Transition.AddLine:
  			case Transition.AddSegmentLine:
  				break;
  			case Transition.AddSegmentArc:
  				Jump(State.CompoundCurveArc);
  				break;
  			case Transition.EndFigure:
  				if (_pointCount < 2)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrLineStringNeedsTwoPoints));
  				}
  				Jump(State.CompoundCurve2);
  				break;
  			default:
  				Expected(Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CompoundCurveArc0:
  			if (transition == Transition.BeginFigure)
  			{
  				Jump(State.CompoundCurveArc);
  			}
  			else
  			{
  				Expected(Transition.BeginFigure);
  			}
  			break;
  		case State.CompoundCurveArc:
  			switch (transition)
  			{
  			case Transition.AddCircularArc:
  			case Transition.AddSegmentArc:
  				break;
  			case Transition.AddSegmentLine:
  				Jump(State.CompoundCurveLine);
  				break;
  			case Transition.EndFigure:
  				if (_pointCount < 3)
  				{
  					throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrCircularStringNeedsThreePoints));
  				}
  				Jump(State.CompoundCurve2);
  				break;
  			default:
  				Expected(Transition.AddCircularArc, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CurvePolygon:
  			switch (transition)
  			{
  			case Transition.BeginFigure:
  				Jump(State.CurvePolygon1);
  				break;
  			case Transition.StartSimpleRing:
  				Jump(State.CurvePolygon0);
  				break;
  			case Transition.StartCompoundCurveRing:
  				Jump(State.CurvePolygonCC);
  				break;
  			case Transition.End:
  				_ringCount = 0;
  				Return();
  				break;
  			default:
  				Expected(Transition.BeginFigure, Transition.End);
  				break;
  			}
  			break;
  		case State.CurvePolygon0:
  			if (transition == Transition.BeginFigure)
  			{
  				Jump(State.CurvePolygon1);
  			}
  			else
  			{
  				Expected(Transition.BeginFigure);
  			}
  			break;
  		case State.CurvePolygonCC:
  			switch (transition)
  			{
  			case Transition.AddSegmentLine:
  				Jump(State.CurvePolygonLine0);
  				break;
  			case Transition.AddSegmentArc:
  				Jump(State.CurvePolygonArc0);
  				break;
  			default:
  				Expected(Transition.AddSegmentLine, Transition.AddSegmentArc);
  				break;
  			}
  			break;
  		case State.CurvePolygon1:
  			switch (transition)
  			{
  			case Transition.AddLine:
  			case Transition.AddCircularArc:
  				break;
  			case Transition.EndFigure:
  				_ringCount++;
  				ValidatePolygonRing(_ringCount, _pointCount, _firstX, _firstY, _lastX, _lastY);
  				Jump(State.CurvePolygon);
  				break;
  			default:
  				Expected(Transition.AddCircularArc, Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CurvePolygonLine0:
  			if (transition == Transition.BeginFigure)
  			{
  				Jump(State.CurvePolygonLine);
  			}
  			else
  			{
  				Expected(Transition.BeginFigure);
  			}
  			break;
  		case State.CurvePolygonLine:
  			switch (transition)
  			{
  			case Transition.AddLine:
  			case Transition.AddSegmentLine:
  				break;
  			case Transition.AddSegmentArc:
  				Jump(State.CurvePolygonArc);
  				break;
  			case Transition.EndFigure:
  				Jump(State.CurvePolygon1);
  				Execute(Transition.EndFigure);
  				break;
  			default:
  				Expected(Transition.AddLine, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.CurvePolygonArc0:
  			if (transition == Transition.BeginFigure)
  			{
  				Jump(State.CurvePolygonArc);
  			}
  			else
  			{
  				Expected(Transition.BeginFigure);
  			}
  			break;
  		case State.CurvePolygonArc:
  			switch (transition)
  			{
  			case Transition.AddCircularArc:
  			case Transition.AddSegmentArc:
  				break;
  			case Transition.AddSegmentLine:
  				Jump(State.CurvePolygonLine);
  				break;
  			case Transition.EndFigure:
  				Jump(State.CurvePolygon1);
  				Execute(Transition.EndFigure);
  				break;
  			default:
  				Expected(Transition.AddCircularArc, Transition.EndFigure);
  				break;
  			}
  			break;
  		case State.Finish:
  			if (transition == Transition.Finish)
  			{
  				break;
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrNoMoreCallsExpected, ToString(transition)));
  		}
  	}

  	private void Call(State state)
  	{
  		if (_stack.Count > GeoData.MaxGeometryCollectionDepth)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrNestingOverflow, _transition, GeoData.MaxGeometryCollectionDepth + 1, GeoData.MaxGeometryCollectionDepth));
  		}
  		_stack.Push(state);
  	}

  	private void Return()
  	{
  		_stack.Pop();
  	}

  	private void Jump(State state)
  	{
  		_stack.Pop();
  		_stack.Push(state);
  	}

  	protected virtual void ValidateSrid(int srid)
  	{
  	}

  	protected virtual void ValidatePoint(double x, double y, double? z, double? m)
  	{
  		if (!IsPointValid(x, y, z, m))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPointCoordinateIsNotValid));
  		}
  	}

  	protected abstract void ValidatePolygonRing(int iRing, int cPoints, double firstX, double firstY, double lastX, double lastY);

  	internal static bool IsPointValid(double x, double y, double? z, double? m)
  	{
  		if (IsFinite(x) && IsFinite(y) && (!z.HasValue || IsFinite(z.Value)))
  		{
  			if (m.HasValue)
  			{
  				return IsFinite(m.Value);
  			}
  			return true;
  		}
  		return false;
  	}

  	internal static bool IsFinite(double a)
  	{
  		if (!double.IsNaN(a))
  		{
  			return !double.IsInfinity(a);
  		}
  		return false;
  	}

  	private void Expected(Transition what)
  	{
  		throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedCall, ToString(what), ToString(_transition)));
  	}

  	private void Expected(Transition what, Transition what2)
  	{
  		throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedCall2, ToString(what), ToString(what2), ToString(_transition)));
  	}

  	private void Expected(Transition what, Transition what2, Transition what3)
  	{
  		throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedCall2, ToString(what) + ", " + ToString(what2), ToString(what3), ToString(_transition)));
  	}

  	private string ToString(Transition a)
  	{
  		if (a == Transition.Begin || a == Transition.End)
  		{
  			return a.ToString() + _name;
  		}
  		string text = a.ToString();
  		if (!text.Contains("_"))
  		{
  			return text;
  		}
  		return text.Replace("_", _name + "(") + ")";
  	}

  	protected virtual bool AcceptsFullGlobe()
  	{
  		return false;
  	}
  }
  internal class ValidityDetails
  {
  	private static uint GetNextUint(uint u)
  	{
  		if (u == uint.MaxValue)
  		{
  			return u;
  		}
  		return u + 1;
  	}

  	private static string ConstructMessage(ValidityState state, uint detail1ZeroBased, uint detail2ZeroBased, bool geography)
  	{
  		uint nextUint = GetNextUint(detail1ZeroBased);
  		uint nextUint2 = GetNextUint(detail2ZeroBased);
  		switch (state)
  		{
  		case ValidityState.InvalidUnknown:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidUnknown);
  		case ValidityState.InvalidIsolatedPoint:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidIsolatedPoint, nextUint);
  		case ValidityState.InvalidRingOverlap:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidRingOverlap);
  		case ValidityState.InvalidSplitRing:
  			if (nextUint == uint.MaxValue)
  			{
  				return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidSplitRingUnknown);
  			}
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidSplitRing, nextUint);
  		case ValidityState.InvalidDegeneratesToPoint:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidDegeneratesToPoint, nextUint);
  		case ValidityState.InvalidDegeneratePolygon:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidDegeneratePolygon, nextUint, nextUint2);
  		case ValidityState.InvalidOpenRing:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidOpenRing, nextUint);
  		case ValidityState.InvalidRedundantRing:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidRedundantRing, nextUint);
  		case ValidityState.InvalidExteriorRing:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidExteriorRing, nextUint);
  		case ValidityState.InvalidRingOutOfPlace:
  			if (geography)
  			{
  				return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidGeographyRingOutOfPlace, nextUint, nextUint2);
  			}
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidGeometryRingOutOfPlace, nextUint, nextUint2);
  		case ValidityState.InvalidEdgeOverlap:
  			if (nextUint == nextUint2)
  			{
  				return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidEdgeOverlapSameCurve, nextUint);
  			}
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidEdgeOverlap, nextUint, nextUint2);
  		case ValidityState.InvalidPolygon:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidPolygon);
  		case ValidityState.InvalidAntipodalEdge:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidAntipodalEdge, nextUint, nextUint2 - 1);
  		default:
  			return string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidUnknown);
  		}
  	}

  	public static string GetMessage(ValidityState state, uint detail1, uint detail2, uint entry, bool geography)
  	{
  		if (state == ValidityState.Valid)
  		{
  			return SpatialRes.StrValid;
  		}
  		if (entry == 1)
  		{
  			return ConstructMessage(state, detail1, detail2, geography);
  		}
  		return ConstructMessage(state, detail1, detail2, geography) + string.Format(CultureInfo.InvariantCulture, SpatialRes.StrInvalidEntry, entry);
  	}
  }
  internal class WellKnownBinaryWriter : GeoDataSink
  {
  	public const uint FullGlobeByte = 126u;

  	private Stream _stream;

  	private BinaryWriter _writer;

  	private Context _context;

  	private bool _writeZ;

  	private bool _writeM;

  	private Stack<long> _offsets = new Stack<long>();

  	private Stack<uint> _counts = new Stack<uint>();

  	private double _pointX;

  	private double _pointY;

  	private double _lastX;

  	private double _lastY;

  	private double? _pointZ;

  	private double? _pointM;

  	private double? _lastZ;

  	private double? _lastM;

  	public WellKnownBinaryWriter(Stream stream, bool writeZ, bool writeM)
  	{
  		_stream = stream;
  		_writer = new BinaryWriter(stream);
  		_writeZ = writeZ;
  		_writeM = writeM;
  	}

  	public void SetSrid(int srid)
  	{
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_context.Begin(type);
  		if (_context.Container != OpenGisType.MultiPoint)
  		{
  			Increment();
  		}
  		if (type != OpenGisType.Point)
  		{
  			WriteHeader(type);
  			if (type != OpenGisType.FullGlobe)
  			{
  				Push(0u);
  			}
  		}
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_context.BeginFigure();
  		switch (_context.Type)
  		{
  		case OpenGisType.Point:
  			_pointX = x;
  			_pointY = y;
  			_pointZ = z;
  			_pointM = m;
  			break;
  		case OpenGisType.LineString:
  		case OpenGisType.CircularString:
  		case OpenGisType.CompoundCurve:
  		case OpenGisType.CurvePolygon:
  			Increment();
  			WritePoint(x, y, z, m);
  			break;
  		case OpenGisType.Polygon:
  			Increment();
  			Push(1u);
  			WritePoint(x, y, z, m);
  			break;
  		case OpenGisType.MultiPoint:
  		case OpenGisType.MultiLineString:
  		case OpenGisType.MultiPolygon:
  		case OpenGisType.GeometryCollection:
  			break;
  		}
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_context.AddLine();
  		Increment();
  		WritePoint(x, y, z, m);
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_context.AddLine();
  		Increment();
  		WritePoint(x1, y1, z1, m1);
  		Increment();
  		WritePoint(x2, y2, z2, m2);
  	}

  	public void AddSegment(SegmentType type)
  	{
  		if (_context.HasFigureStarted)
  		{
  			Pop();
  		}
  		Increment();
  		switch (type)
  		{
  		case SegmentType.FirstArc:
  			WriteHeader(OpenGisType.CircularString);
  			break;
  		case SegmentType.FirstLine:
  			WriteHeader(OpenGisType.LineString);
  			break;
  		}
  		Push(0u);
  		if (_context.HasFigureStarted)
  		{
  			Increment();
  			WritePoint(_lastX, _lastY, _lastZ, _lastM);
  		}
  		_context.StartSegment();
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		switch (type)
  		{
  		case FigureAttributes.Line:
  			WriteHeader(OpenGisType.LineString);
  			break;
  		case FigureAttributes.Arc:
  			WriteHeader(OpenGisType.CircularString);
  			break;
  		case FigureAttributes.Curve:
  			WriteHeader(OpenGisType.CompoundCurve);
  			break;
  		}
  		Increment();
  		Push(0u);
  		_context.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		if (_context.Type == OpenGisType.Polygon || _context.Type == OpenGisType.CurvePolygon || _context.Type == OpenGisType.CompoundCurve)
  		{
  			Pop();
  			if (_context.CurrentRing == FigureAttributes.Curve)
  			{
  				Pop();
  			}
  		}
  		_context.EndFigure();
  	}

  	public void EndGeo()
  	{
  		if (_context.Type == OpenGisType.Point)
  		{
  			if (_context.Figures > 0)
  			{
  				if (_context.Container == OpenGisType.MultiPoint)
  				{
  					Increment();
  				}
  				WriteHeader(OpenGisType.Point);
  				WritePoint(_pointX, _pointY, _pointZ, _pointM);
  			}
  			else if (_context.Container != OpenGisType.MultiPoint)
  			{
  				WriteHeader(OpenGisType.MultiPoint);
  				WriteCount(0u);
  			}
  		}
  		else if (_context.Type != OpenGisType.FullGlobe)
  		{
  			Pop();
  		}
  		_context.End();
  	}

  	public void Finish()
  	{
  	}

  	private void Increment()
  	{
  		if (_counts.Count > 0)
  		{
  			_counts.Push(_counts.Pop() + 1);
  		}
  	}

  	private void Push(uint count)
  	{
  		_offsets.Push(_stream.Position);
  		_counts.Push(count);
  		_stream.Seek(4L, SeekOrigin.Current);
  	}

  	private void Pop()
  	{
  		long position = _stream.Position;
  		_stream.Seek(_offsets.Pop(), SeekOrigin.Begin);
  		WriteCount(_counts.Pop());
  		_stream.Seek(position, SeekOrigin.Begin);
  	}

  	private void WriteCount(uint count)
  	{
  		_writer.Write(count);
  	}

  	private void WritePoint(double x, double y, double? z, double? m)
  	{
  		_writer.Write(x);
  		_writer.Write(y);
  		if (_writeZ)
  		{
  			_writer.Write(z.HasValue ? z.Value : double.NaN);
  		}
  		if (_writeM)
  		{
  			_writer.Write(m.HasValue ? m.Value : double.NaN);
  		}
  		if (_context.Type == OpenGisType.CompoundCurve || (_context.Type == OpenGisType.CurvePolygon && _context.CurrentRing == FigureAttributes.Curve))
  		{
  			_lastX = x;
  			_lastY = y;
  			_lastZ = z;
  			_lastM = m;
  		}
  	}

  	private void WriteHeader(OpenGisType t)
  	{
  		_writer.Write((byte)(BitConverter.IsLittleEndian ? 1 : 0));
  		uint num = (uint)((t == OpenGisType.FullGlobe) ? ((OpenGisType)126) : t);
  		if (_writeZ)
  		{
  			num += 1000;
  		}
  		if (_writeM)
  		{
  			num += 2000;
  		}
  		_writer.Write(num);
  	}
  }
  internal class WellKnownBinaryReader
  {
  	internal enum ByteOrder
  	{
  		XDR,
  		NDR
  	}

  	private const uint MinAlternativeWKBTypeValue = 1000001u;

  	private const uint MaxAlternativeWKBTypeValue = 1000003u;

  	private const uint ZRange = 1000u;

  	private const uint MRange = 2000u;

  	private const uint ZMRange = 3000u;

  	private readonly SqlBytes _bytes;

  	private readonly GeoDataSink _sink;

  	private int _currentIndex;

  	public WellKnownBinaryReader(SqlBytes bytes, GeoDataSink sink)
  	{
  		if (bytes == null || bytes.IsNull || bytes.Length == 0L)
  		{
  			throw new FormatException(SpatialRes.StrGenericWKBError);
  		}
  		_bytes = bytes;
  		_sink = sink;
  	}

  	public void Read(OpenGisType type, int srid)
  	{
  		_sink.SetSrid(srid);
  		ParseWkb(type);
  		if (_currentIndex < _bytes.Length)
  		{
  			throw new FormatException(SpatialRes.StrGenericWKBError);
  		}
  		_sink.Finish();
  	}

  	private void ParseWkb(OpenGisType type)
  	{
  		bool readZ;
  		bool readM;
  		switch (type)
  		{
  		case OpenGisType.Unknown:
  		{
  			ByteOrder byteOrder12 = (ByteOrder)ReadByte();
  			switch (ReadType(byteOrder12, out readZ, out readM))
  			{
  			case OpenGisType.Point:
  				ParseWkbPointWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case OpenGisType.LineString:
  				ParseWkbLineStringWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case OpenGisType.Polygon:
  				ParseWkbPolygonWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case OpenGisType.MultiPoint:
  				ParseWkbMultiPointWithoutHeader(byteOrder12);
  				break;
  			case OpenGisType.MultiLineString:
  				ParseWkbMultiLineStringWithoutHeader(byteOrder12);
  				break;
  			case OpenGisType.MultiPolygon:
  				ParseWkbMultiPolygonWithoutHeader(byteOrder12);
  				break;
  			case OpenGisType.GeometryCollection:
  				ParseWkbGeometryCollectionWithoutHeader(byteOrder12);
  				break;
  			case OpenGisType.CircularString:
  				ParseWkbCircularStringWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case OpenGisType.CompoundCurve:
  				ParseWkbCompoundCurveWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case OpenGisType.CurvePolygon:
  				ParseWkbCurvePolygonWithoutHeader(byteOrder12, readZ, readM);
  				break;
  			case (OpenGisType)126:
  				ParseWkbFullGlobeWithoutHeader(byteOrder12);
  				break;
  			default:
  				throw new FormatException(SpatialRes.StrGenericWKBError);
  			}
  			break;
  		}
  		case OpenGisType.Point:
  		{
  			ByteOrder byteOrder11 = ReadHeader(OpenGisType.Point, out readZ, out readM);
  			ParseWkbPointWithoutHeader(byteOrder11, readZ, readM);
  			break;
  		}
  		case OpenGisType.LineString:
  		{
  			ByteOrder byteOrder10 = ReadHeader(OpenGisType.LineString, out readZ, out readM);
  			ParseWkbLineStringWithoutHeader(byteOrder10, readZ, readM);
  			break;
  		}
  		case OpenGisType.Polygon:
  		{
  			ByteOrder byteOrder9 = ReadHeader(OpenGisType.Polygon, out readZ, out readM);
  			ParseWkbPolygonWithoutHeader(byteOrder9, readZ, readM);
  			break;
  		}
  		case OpenGisType.MultiPoint:
  		{
  			ByteOrder byteOrder8 = ReadHeader(OpenGisType.MultiPoint, out readZ, out readM);
  			ParseWkbMultiPointWithoutHeader(byteOrder8);
  			break;
  		}
  		case OpenGisType.MultiLineString:
  		{
  			ByteOrder byteOrder7 = ReadHeader(OpenGisType.MultiLineString, out readZ, out readM);
  			ParseWkbMultiLineStringWithoutHeader(byteOrder7);
  			break;
  		}
  		case OpenGisType.MultiPolygon:
  		{
  			ByteOrder byteOrder6 = ReadHeader(OpenGisType.MultiPolygon, out readZ, out readM);
  			ParseWkbMultiPolygonWithoutHeader(byteOrder6);
  			break;
  		}
  		case OpenGisType.GeometryCollection:
  		{
  			ByteOrder byteOrder5 = ReadHeader(OpenGisType.GeometryCollection, out readZ, out readM);
  			ParseWkbGeometryCollectionWithoutHeader(byteOrder5);
  			break;
  		}
  		case OpenGisType.CircularString:
  		{
  			ByteOrder byteOrder4 = ReadHeader(OpenGisType.CircularString, out readZ, out readM);
  			ParseWkbCircularStringWithoutHeader(byteOrder4, readZ, readM);
  			break;
  		}
  		case OpenGisType.CompoundCurve:
  		{
  			ByteOrder byteOrder3 = ReadHeader(OpenGisType.CompoundCurve, out readZ, out readM);
  			ParseWkbCompoundCurveWithoutHeader(byteOrder3, readZ, readM);
  			break;
  		}
  		case OpenGisType.CurvePolygon:
  		{
  			ByteOrder byteOrder2 = ReadHeader(OpenGisType.CompoundCurve, out readZ, out readM);
  			ParseWkbCurvePolygonWithoutHeader(byteOrder2, readZ, readM);
  			break;
  		}
  		case OpenGisType.FullGlobe:
  		{
  			ByteOrder byteOrder = ReadHeader(OpenGisType.FullGlobe, out readZ, out readM);
  			ParseWkbFullGlobeWithoutHeader(byteOrder);
  			break;
  		}
  		}
  	}

  	private void ParseWkbPointWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.Point);
  		ReadFirstPoint(byteOrder, readZ, readM);
  		_sink.EndFigure();
  		_sink.EndGeo();
  	}

  	private void ParseWkbLineStringWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.LineString);
  		uint num = ReadUInt32(byteOrder);
  		if (num != 0)
  		{
  			ReadLineStringPoints(byteOrder, num, readZ, readM);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbPolygonWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.Polygon);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 1u; num2 <= num; num2++)
  		{
  			ReadLinearRing(byteOrder, readZ, readM);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbMultiPointWithoutHeader(ByteOrder byteOrder)
  	{
  		_sink.BeginGeo(OpenGisType.MultiPoint);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 0u; num2 < num; num2++)
  		{
  			ParseWkb(OpenGisType.Point);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbMultiLineStringWithoutHeader(ByteOrder byteOrder)
  	{
  		_sink.BeginGeo(OpenGisType.MultiLineString);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 0u; num2 < num; num2++)
  		{
  			ParseWkb(OpenGisType.LineString);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbMultiPolygonWithoutHeader(ByteOrder byteOrder)
  	{
  		_sink.BeginGeo(OpenGisType.MultiPolygon);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 0u; num2 < num; num2++)
  		{
  			ParseWkb(OpenGisType.Polygon);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbGeometryCollectionWithoutHeader(ByteOrder byteOrder)
  	{
  		_sink.BeginGeo(OpenGisType.GeometryCollection);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 0u; num2 < num; num2++)
  		{
  			ParseWkb(OpenGisType.Unknown);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbFullGlobeWithoutHeader(ByteOrder byteOrder)
  	{
  		_sink.BeginGeo(OpenGisType.FullGlobe);
  		_sink.EndGeo();
  	}

  	private void ParseWkbCircularStringWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.CircularString);
  		uint num = ReadUInt32(byteOrder);
  		if (num != 0)
  		{
  			ReadCircularStringPoints(byteOrder, num, readZ, readM);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbCompoundCurveWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.CompoundCurve);
  		uint num = ReadUInt32(byteOrder);
  		if (num != 0)
  		{
  			ReadCompoundCurve(byteOrder, num, readZ, readM);
  		}
  		_sink.EndGeo();
  	}

  	private void ParseWkbCurvePolygonWithoutHeader(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginGeo(OpenGisType.CurvePolygon);
  		uint num = ReadUInt32(byteOrder);
  		for (uint num2 = 1u; num2 <= num; num2++)
  		{
  			byteOrder = (ByteOrder)ReadByte();
  			switch (ReadType(byteOrder, out readZ, out readM))
  			{
  			case OpenGisType.LineString:
  				_sink.StartRing(FigureAttributes.Line);
  				ReadLinearRing(byteOrder, readZ, readM);
  				break;
  			case OpenGisType.CircularString:
  				_sink.StartRing(FigureAttributes.Arc);
  				ReadArcRing(byteOrder, readZ, readM);
  				break;
  			case OpenGisType.CompoundCurve:
  				_sink.StartRing(FigureAttributes.Curve);
  				ReadCurveRing(byteOrder, readZ, readM);
  				break;
  			default:
  				throw new FormatException(SpatialRes.StrGenericWKBError);
  			}
  		}
  		_sink.EndGeo();
  	}

  	private void ReadFirstPoint(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.BeginFigure(ReadDouble(byteOrder), ReadDouble(byteOrder), readZ ? ReadOptDouble(byteOrder) : null, readM ? ReadOptDouble(byteOrder) : null);
  	}

  	private void ReadNextPoint(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.AddLine(ReadDouble(byteOrder), ReadDouble(byteOrder), readZ ? ReadOptDouble(byteOrder) : null, readM ? ReadOptDouble(byteOrder) : null);
  	}

  	private void ReadNextArc(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		_sink.AddCircularArc(ReadDouble(byteOrder), ReadDouble(byteOrder), readZ ? ReadOptDouble(byteOrder) : null, readM ? ReadOptDouble(byteOrder) : null, ReadDouble(byteOrder), ReadDouble(byteOrder), readZ ? ReadOptDouble(byteOrder) : null, readM ? ReadOptDouble(byteOrder) : null);
  	}

  	private void ReadLinearRing(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		uint num = ReadUInt32(byteOrder);
  		if (num == 0)
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  		ReadLineStringPoints(byteOrder, num, readZ, readM);
  	}

  	private void ReadLineStringPoints(ByteOrder byteOrder, uint cPoints, bool readZ, bool readM)
  	{
  		ReadFirstPoint(byteOrder, readZ, readM);
  		for (uint num = 1u; num < cPoints; num++)
  		{
  			ReadNextPoint(byteOrder, readZ, readM);
  		}
  		_sink.EndFigure();
  	}

  	private void ReadArcRing(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		uint num = ReadUInt32(byteOrder);
  		if (num == 0)
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  		ReadCircularStringPoints(byteOrder, num, readZ, readM);
  	}

  	private void ReadCircularStringPoints(ByteOrder byteOrder, uint cPoints, bool readZ, bool readM)
  	{
  		ReadFirstPoint(byteOrder, readZ, readM);
  		for (uint num = 1u; num < cPoints; num += 2)
  		{
  			ReadNextArc(byteOrder, readZ, readM);
  		}
  		_sink.EndFigure();
  	}

  	private void ReadCurveRing(ByteOrder byteOrder, bool readZ, bool readM)
  	{
  		uint num = ReadUInt32(byteOrder);
  		if (num == 0)
  		{
  			_sink.BeginFigure(0.0, 0.0, null, null);
  			_sink.EndFigure();
  		}
  		ReadCompoundCurve(byteOrder, num, readZ, readM);
  	}

  	private void ReadCompoundCurve(ByteOrder byteOrder, uint cSubCurves, bool readZ, bool readM)
  	{
  		double num = 0.0;
  		double num2 = 0.0;
  		double? num3 = null;
  		double? num4 = null;
  		double? num5 = null;
  		double? num6 = null;
  		for (uint num7 = 0u; num7 < cSubCurves; num7++)
  		{
  			byteOrder = (ByteOrder)ReadByte();
  			bool flag = ReadIsArcHeader(byteOrder, out readZ, out readM);
  			uint num8 = ReadUInt32(byteOrder);
  			if (num8 < 2)
  			{
  				throw new FormatException(SpatialRes.StrGenericWKBError);
  			}
  			double num9 = ReadDouble(byteOrder);
  			double num10 = ReadDouble(byteOrder);
  			num3 = (readZ ? ReadOptDouble(byteOrder) : null);
  			num4 = (readM ? ReadOptDouble(byteOrder) : null);
  			if (num7 == 0)
  			{
  				_sink.BeginFigure(num9, num10, num3, num4);
  				num = num9;
  				num2 = num10;
  				num5 = num3;
  				num6 = num4;
  			}
  			else if (num9 != num || num10 != num2 || num3 != num5 || num4 != num6)
  			{
  				throw new FormatException(SpatialRes.StrCompoundCurveMismatch);
  			}
  			uint num11 = 1u;
  			while (num11 < num8)
  			{
  				num9 = ReadDouble(byteOrder);
  				num10 = ReadDouble(byteOrder);
  				num3 = (readZ ? ReadOptDouble(byteOrder) : null);
  				num4 = (readM ? ReadOptDouble(byteOrder) : null);
  				num11++;
  				if (flag)
  				{
  					num = ReadDouble(byteOrder);
  					num2 = ReadDouble(byteOrder);
  					num5 = (readZ ? ReadOptDouble(byteOrder) : null);
  					num6 = (readM ? ReadOptDouble(byteOrder) : null);
  					num11++;
  					_sink.AddCircularArc(num9, num10, num3, num4, num, num2, num5, num6);
  				}
  				else
  				{
  					num = num9;
  					num2 = num10;
  					num5 = num3;
  					num6 = num4;
  					_sink.AddLine(num9, num10, num3, num4);
  				}
  			}
  		}
  		_sink.EndFigure();
  	}

  	private ByteOrder ReadHeader(OpenGisType geoTypeExpected, out bool readZ, out bool readM)
  	{
  		ByteOrder byteOrder = (ByteOrder)ReadByte();
  		if (ReadType(byteOrder, out readZ, out readM) != geoTypeExpected)
  		{
  			throw new FormatException(SpatialRes.StrGenericWKBError);
  		}
  		return byteOrder;
  	}

  	private bool ReadIsArcHeader(ByteOrder byteOrder, out bool readZ, out bool readM)
  	{
  		OpenGisType openGisType = ReadType(byteOrder, out readZ, out readM);
  		switch (openGisType)
  		{
  		case OpenGisType.LineString:
  			_sink.AddSegment(SegmentType.FirstLine);
  			break;
  		case OpenGisType.CircularString:
  			_sink.AddSegment(SegmentType.FirstArc);
  			break;
  		default:
  			throw new FormatException(SpatialRes.StrGenericWKBError);
  		}
  		return openGisType == OpenGisType.CircularString;
  	}

  	private uint ReadUInt32(ByteOrder byteOrder)
  	{
  		return BitConverter.ToUInt32(ReadBytes(4, byteOrder), 0);
  	}

  	private double ReadDouble(ByteOrder byteOrder)
  	{
  		return BitConverter.ToDouble(ReadBytes(8, byteOrder), 0);
  	}

  	private double? ReadOptDouble(ByteOrder byteOrder)
  	{
  		double num = ReadDouble(byteOrder);
  		if (!double.IsNaN(num))
  		{
  			return num;
  		}
  		return null;
  	}

  	private byte ReadByte()
  	{
  		return _bytes[_currentIndex++];
  	}

  	private byte[] ReadBytes(int n, ByteOrder byteOrder)
  	{
  		byte[] array = new byte[n];
  		if (_bytes.Read(_currentIndex, array, 0, array.Length) != array.Length)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedEndOfInput));
  		}
  		_currentIndex += n;
  		ToMachineEndianess(array, byteOrder);
  		return array;
  	}

  	private OpenGisType ReadType(ByteOrder byteOrder, out bool readZ, out bool readM)
  	{
  		uint num = ReadUInt32(byteOrder);
  		if (1000001 <= num && num <= 1000003)
  		{
  			num -= 999993;
  			readZ = false;
  			readM = false;
  		}
  		else if (3000 <= num && num < 4000)
  		{
  			readZ = true;
  			readM = true;
  			num -= 3000;
  		}
  		else if (2000 <= num && num < 3000)
  		{
  			readZ = false;
  			readM = true;
  			num -= 2000;
  		}
  		else if (1000 <= num && num < 2000)
  		{
  			readZ = true;
  			readM = false;
  			num -= 1000;
  		}
  		else
  		{
  			readZ = false;
  			readM = false;
  		}
  		return (OpenGisType)num;
  	}

  	private static void ToMachineEndianess(byte[] buffer, ByteOrder byteOrder)
  	{
  		if (byteOrder == ByteOrder.NDR != BitConverter.IsLittleEndian)
  		{
  			for (int i = 0; i < buffer.Length / 2; i++)
  			{
  				byte b = buffer[i];
  				buffer[i] = buffer[buffer.Length - 1 - i];
  				buffer[buffer.Length - 1 - i] = b;
  			}
  		}
  	}
  }
  internal class WellKnownTextWriter : GeoDataSink
  {
  	private TextWriter _writer;

  	private bool _writePointZM;

  	private Context _context;

  	private int _shapes;

  	private double _lastX;

  	private double _lastY;

  	private double? _lastZ;

  	private double? _lastM;

  	public WellKnownTextWriter(TextWriter writer, bool writePointZM)
  	{
  		_writer = writer;
  		_writePointZM = writePointZM;
  		_shapes = 0;
  	}

  	public void SetSrid(int srid)
  	{
  	}

  	public void BeginGeo(OpenGisType type)
  	{
  		_context.Begin(type);
  		if (OpenGisTypes.IsCollection(_context.Container))
  		{
  			_writer.Write((_shapes == 0) ? "(" : ", ");
  			_shapes++;
  		}
  		if (!OpenGisTypes.IsMultiType(_context.Container))
  		{
  			_writer.Write(OpenGisTypes.ToString(type));
  			if (type != OpenGisType.FullGlobe)
  			{
  				_writer.Write(' ');
  			}
  		}
  		if (OpenGisTypes.IsCollection(type))
  		{
  			_shapes = 0;
  		}
  	}

  	public void BeginFigure(double x, double y, double? z, double? m)
  	{
  		_context.BeginFigure();
  		if (_context.Type == OpenGisType.Polygon)
  		{
  			_writer.Write(_context.IsFirstFigure ? "(" : ", ");
  		}
  		_writer.Write('(');
  		WritePoint(x, y, z, m);
  	}

  	public void AddLine(double x, double y, double? z, double? m)
  	{
  		_writer.Write(", ");
  		WritePoint(x, y, z, m);
  		_context.AddLine();
  	}

  	public void AddCircularArc(double x1, double y1, double? z1, double? m1, double x2, double y2, double? z2, double? m2)
  	{
  		_writer.Write(", ");
  		WritePoint(x1, y1, z1, m1);
  		_writer.Write(", ");
  		WritePoint(x2, y2, z2, m2);
  		_context.AddArc();
  	}

  	public void AddSegment(SegmentType type)
  	{
  		if (!_context.HasFigureStarted)
  		{
  			_writer.Write("(");
  			if (type == SegmentType.FirstArc)
  			{
  				_writer.Write(OpenGisTypes.ToString(OpenGisType.CircularString));
  				_writer.Write(' ');
  			}
  		}
  		else
  		{
  			_writer.Write("), ");
  			if (type == SegmentType.FirstArc)
  			{
  				_writer.Write(OpenGisTypes.ToString(OpenGisType.CircularString));
  				_writer.Write(' ');
  			}
  			_writer.Write('(');
  			WritePoint(_lastX, _lastY, _lastZ, _lastM);
  		}
  		_context.StartSegment();
  	}

  	public void StartRing(FigureAttributes type)
  	{
  		_writer.Write((_context.Figures == 0) ? "(" : ", ");
  		switch (type)
  		{
  		case FigureAttributes.Arc:
  			_writer.Write(OpenGisTypes.ToString(OpenGisType.CircularString));
  			_writer.Write(' ');
  			break;
  		case FigureAttributes.Curve:
  			_writer.Write(OpenGisTypes.ToString(OpenGisType.CompoundCurve));
  			_writer.Write(' ');
  			break;
  		}
  		_context.StartRing(type);
  	}

  	public void EndFigure()
  	{
  		if (_context.CurrentRing == FigureAttributes.Curve)
  		{
  			_writer.Write(')');
  		}
  		_context.EndFigure();
  		_writer.Write(')');
  	}

  	public void EndGeo()
  	{
  		if (_context.Figures > 0 && (_context.Type == OpenGisType.Polygon || _context.Type == OpenGisType.CurvePolygon || _context.Type == OpenGisType.CompoundCurve))
  		{
  			_writer.Write(')');
  		}
  		if (_context.Figures == 0 && !OpenGisTypes.IsCollection(_context.Type) && _context.Type != OpenGisType.FullGlobe)
  		{
  			_writer.Write("EMPTY");
  		}
  		if (OpenGisTypes.IsCollection(_context.Type))
  		{
  			_writer.Write((_shapes == 0) ? "EMPTY" : ")");
  		}
  		_shapes = -1;
  		_context.End();
  	}

  	public void Finish()
  	{
  	}

  	private void WritePoint(double x, double y, double? z, double? m)
  	{
  		_writer.Write(x.ToString("R", CultureInfo.InvariantCulture));
  		_writer.Write(' ');
  		_writer.Write(y.ToString("R", CultureInfo.InvariantCulture));
  		if (_writePointZM)
  		{
  			if (z.HasValue)
  			{
  				_writer.Write(' ');
  				_writer.Write(z.Value.ToString("R", CultureInfo.InvariantCulture));
  			}
  			else if (m.HasValue)
  			{
  				_writer.Write(" NULL");
  			}
  			if (m.HasValue)
  			{
  				_writer.Write(' ');
  				_writer.Write(m.Value.ToString("R", CultureInfo.InvariantCulture));
  			}
  		}
  		if (_context.Type == OpenGisType.CompoundCurve || (_context.Type == OpenGisType.CurvePolygon && _context.CurrentRing == FigureAttributes.Curve))
  		{
  			_lastX = x;
  			_lastY = y;
  			_lastZ = z;
  			_lastM = m;
  		}
  	}
  }
  internal class WellKnownTextReader
  {
  	private enum MultiPointParseStyle
  	{
  		Unknown,
  		UsesExampleSyntax,
  		UsesBNFSyntax
  	}

  	private GeoDataSink _sink;

  	private SqlChars _chars;

  	private char _current;

  	private int _nextIndex;

  	private int _streamLength;

  	private bool _readEndOfStream;

  	private char Current => _current;

  	private int Length => _streamLength;

  	private bool CanRead => _nextIndex < Length;

  	public WellKnownTextReader(SqlChars chars, GeoDataSink sink)
  	{
  		if (chars.Length == 0L)
  		{
  			throw new FormatException(SpatialRes.StrEmptyTextError);
  		}
  		_sink = sink;
  		_chars = chars;
  		_nextIndex = 1;
  		_current = _chars[0L];
  		_streamLength = (int)chars.Length;
  	}

  	public void Read(OpenGisType type, int srid)
  	{
  		_sink.SetSrid(srid);
  		ParseTaggedText(type);
  		SkipWhiteSpaces();
  		if (!_readEndOfStream)
  		{
  			throw new FormatException(SpatialRes.StrGenericTextError);
  		}
  		_sink.Finish();
  	}

  	private void ParseTaggedText(OpenGisType type)
  	{
  		if (type == OpenGisType.Unknown)
  		{
  			SkipWhiteSpaces();
  			type = OpenGisTypes.ParseLabel(PeekNChars(20));
  		}
  		_sink.BeginGeo(type);
  		RecognizeToken(OpenGisTypes.ToString(type));
  		switch (type)
  		{
  		case OpenGisType.Point:
  			ParsePointText(parseParentheses: true);
  			break;
  		case OpenGisType.LineString:
  			ParseLineStringText();
  			break;
  		case OpenGisType.Polygon:
  			ParsePolygonText();
  			break;
  		case OpenGisType.MultiPoint:
  			ParseMultiPointText();
  			break;
  		case OpenGisType.MultiLineString:
  			ParseMultiLineStringText();
  			break;
  		case OpenGisType.MultiPolygon:
  			ParseMultiPolygonText();
  			break;
  		case OpenGisType.GeometryCollection:
  			ParseGeometryCollectionText();
  			break;
  		case OpenGisType.CircularString:
  			ParseCircularStringText();
  			break;
  		case OpenGisType.CompoundCurve:
  			ParseCompoundCurveText();
  			break;
  		case OpenGisType.CurvePolygon:
  			ParseCurvePolygonText();
  			break;
  		}
  		_sink.EndGeo();
  	}

  	private void ParsePointText(bool parseParentheses)
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			if (parseParentheses)
  			{
  				RecognizeToken('(');
  			}
  			_sink.BeginFigure(RecognizeDouble(), RecognizeDouble(), RecognizeOptionalDouble(), RecognizeOptionalDouble());
  			_sink.EndFigure();
  			if (parseParentheses)
  			{
  				RecognizeToken(')');
  			}
  		}
  	}

  	private void ParseLineStringText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			_sink.BeginFigure(RecognizeDouble(), RecognizeDouble(), RecognizeOptionalDouble(), RecognizeOptionalDouble());
  			while (RecognizeOptionalToken(','))
  			{
  				_sink.AddLine(RecognizeDouble(), RecognizeDouble(), RecognizeOptionalDouble(), RecognizeOptionalDouble());
  			}
  			_sink.EndFigure();
  			RecognizeToken(')');
  		}
  	}

  	private void ParsePolygonText()
  	{
  		if (RecognizeEmptyGeometry())
  		{
  			return;
  		}
  		RecognizeToken('(');
  		do
  		{
  			if (RecognizeEmptyGeometry())
  			{
  				_sink.BeginFigure(0.0, 0.0, null, null);
  				_sink.EndFigure();
  			}
  			ParseLineStringText();
  		}
  		while (RecognizeOptionalToken(','));
  		RecognizeToken(')');
  	}

  	private void ParseMultiPointText()
  	{
  		if (RecognizeEmptyGeometry())
  		{
  			return;
  		}
  		RecognizeToken('(');
  		MultiPointParseStyle multiPointParseStyle = MultiPointParseStyle.Unknown;
  		do
  		{
  			if (multiPointParseStyle == MultiPointParseStyle.Unknown)
  			{
  				SkipWhiteSpaces();
  				if ('E' != char.ToUpperInvariant(Current))
  				{
  					multiPointParseStyle = ((Current != '(') ? MultiPointParseStyle.UsesExampleSyntax : MultiPointParseStyle.UsesBNFSyntax);
  				}
  			}
  			_sink.BeginGeo(OpenGisType.Point);
  			ParsePointText(multiPointParseStyle == MultiPointParseStyle.UsesBNFSyntax);
  			_sink.EndGeo();
  		}
  		while (RecognizeOptionalToken(','));
  		RecognizeToken(')');
  	}

  	private void ParseMultiLineStringText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			do
  			{
  				_sink.BeginGeo(OpenGisType.LineString);
  				ParseLineStringText();
  				_sink.EndGeo();
  			}
  			while (RecognizeOptionalToken(','));
  			RecognizeToken(')');
  		}
  	}

  	private void ParseMultiPolygonText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			do
  			{
  				_sink.BeginGeo(OpenGisType.Polygon);
  				ParsePolygonText();
  				_sink.EndGeo();
  			}
  			while (RecognizeOptionalToken(','));
  			RecognizeToken(')');
  		}
  	}

  	private void ParseGeometryCollectionText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			do
  			{
  				ParseTaggedText(OpenGisType.Unknown);
  			}
  			while (RecognizeOptionalToken(','));
  			RecognizeToken(')');
  		}
  	}

  	private void ParseCircularStringText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			_sink.BeginFigure(RecognizeDouble(), RecognizeDouble(), RecognizeOptionalDouble(), RecognizeOptionalDouble());
  			while (RecognizeOptionalToken(','))
  			{
  				double latitude = RecognizeDouble();
  				double longitude = RecognizeDouble();
  				double? z = RecognizeOptionalDouble();
  				double? m = RecognizeOptionalDouble();
  				RecognizeToken(',');
  				_sink.AddCircularArc(latitude, longitude, z, m, RecognizeDouble(), RecognizeDouble(), RecognizeOptionalDouble(), RecognizeOptionalDouble());
  			}
  			_sink.EndFigure();
  			RecognizeToken(')');
  		}
  	}

  	private void ParseCompoundCurveText()
  	{
  		if (RecognizeEmptyGeometry())
  		{
  			return;
  		}
  		RecognizeToken('(');
  		bool flag = RecognizeArcOrLineStart();
  		RecognizeToken('(');
  		double num = RecognizeDouble();
  		double num2 = RecognizeDouble();
  		double? num3 = RecognizeOptionalDouble();
  		double? num4 = RecognizeOptionalDouble();
  		_sink.BeginFigure(num, num2, num3, num4);
  		while (RecognizeOptionalToken(','))
  		{
  			double num5 = RecognizeDouble();
  			double num6 = RecognizeDouble();
  			double? num7 = RecognizeOptionalDouble();
  			double? num8 = RecognizeOptionalDouble();
  			if (flag)
  			{
  				RecognizeToken(',');
  				num = RecognizeDouble();
  				num2 = RecognizeDouble();
  				num3 = RecognizeOptionalDouble();
  				num4 = RecognizeOptionalDouble();
  				_sink.AddCircularArc(num5, num6, num7, num8, num, num2, num3, num4);
  			}
  			else
  			{
  				_sink.AddLine(num5, num6, num7, num8);
  				num = num5;
  				num2 = num6;
  				num3 = num7;
  				num4 = num8;
  			}
  		}
  		RecognizeToken(')');
  		while (RecognizeOptionalToken(','))
  		{
  			flag = RecognizeArcOrLineStart();
  			RecognizeToken('(');
  			double num9 = RecognizeDouble();
  			double num10 = RecognizeDouble();
  			double? num11 = RecognizeOptionalDouble();
  			double? num12 = RecognizeOptionalDouble();
  			if (num9 != num || num10 != num2 || num11 != num3 || num12 != num4)
  			{
  				throw new FormatException(SpatialRes.StrCompoundCurveMismatch);
  			}
  			while (RecognizeOptionalToken(','))
  			{
  				num9 = RecognizeDouble();
  				num10 = RecognizeDouble();
  				num11 = RecognizeOptionalDouble();
  				num12 = RecognizeOptionalDouble();
  				if (flag)
  				{
  					RecognizeToken(',');
  					num = RecognizeDouble();
  					num2 = RecognizeDouble();
  					num3 = RecognizeOptionalDouble();
  					num4 = RecognizeOptionalDouble();
  					_sink.AddCircularArc(num9, num10, num11, num12, num, num2, num3, num4);
  				}
  				else
  				{
  					_sink.AddLine(num9, num10, num11, num12);
  					num = num9;
  					num2 = num10;
  					num3 = num11;
  					num4 = num12;
  				}
  			}
  			RecognizeToken(')');
  		}
  		_sink.EndFigure();
  		RecognizeToken(')');
  	}

  	private void ParseCurvePolygonText()
  	{
  		if (!RecognizeEmptyGeometry())
  		{
  			RecognizeToken('(');
  			ParseRingText(0);
  			int num = 1;
  			while (RecognizeOptionalToken(','))
  			{
  				ParseRingText(num);
  				num++;
  			}
  			RecognizeToken(')');
  		}
  	}

  	private void ParseRingText(int i)
  	{
  		if (RecognizeEmptyGeometry())
  		{
  			if (i == 0)
  			{
  				throw new FormatException(SpatialRes.StrPolygonExteriorRingHasTooFewPoints);
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrPolygonInteriorRingHasTooFewPoints, i));
  		}
  		if (RecognizeOptionalToken(OpenGisTypes.ToString(OpenGisType.CompoundCurve)))
  		{
  			_sink.StartRing(FigureAttributes.Curve);
  			ParseCompoundCurveText();
  		}
  		else if (RecognizeOptionalToken(OpenGisTypes.ToString(OpenGisType.CircularString)))
  		{
  			_sink.StartRing(FigureAttributes.Arc);
  			ParseCircularStringText();
  		}
  		else
  		{
  			_sink.StartRing(FigureAttributes.Line);
  			ParseLineStringText();
  		}
  	}

  	private void SkipWhiteSpaces()
  	{
  		while (!_readEndOfStream && char.IsWhiteSpace(Current) && ReadChar())
  		{
  		}
  	}

  	private bool CanReadNChars(int c)
  	{
  		if (!_readEndOfStream)
  		{
  			return _nextIndex + c - 1 <= Length;
  		}
  		return false;
  	}

  	private string ReadNChars(int c)
  	{
  		char[] array = new char[c];
  		array[0] = Current;
  		if (c > 1)
  		{
  			_chars.Read(_nextIndex, array, 1, c - 1);
  			_nextIndex += c - 1;
  		}
  		ReadChar();
  		return new string(array);
  	}

  	private bool ReadChar()
  	{
  		bool canRead = CanRead;
  		if (canRead)
  		{
  			_current = _chars[_nextIndex++];
  			return canRead;
  		}
  		_readEndOfStream = true;
  		return canRead;
  	}

  	private string PeekNChars(int n)
  	{
  		char[] array = new char[n];
  		_chars.Read(_nextIndex - 1, array, 0, n);
  		return new string(array);
  	}

  	private bool CurrentIsDoubleSeparator()
  	{
  		if (Current != ',' && Current != ')')
  		{
  			return char.IsWhiteSpace(Current);
  		}
  		return true;
  	}

  	private double RecognizeDouble()
  	{
  		StringBuilder stringBuilder = new StringBuilder(30);
  		SkipWhiteSpaces();
  		if (_readEndOfStream)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrExpectedNumber, _nextIndex, ""));
  		}
  		do
  		{
  			if (stringBuilder.Length >= 30)
  			{
  				throw new FormatException(SpatialRes.StrGenericTextError);
  			}
  			stringBuilder.Append(Current);
  		}
  		while (ReadChar() && !CurrentIsDoubleSeparator());
  		string text = stringBuilder.ToString();
  		if (!double.TryParse(text, NumberStyles.Float, CultureInfo.InvariantCulture, out var result))
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrExpectedNumber, _nextIndex - 1, text));
  		}
  		return result;
  	}

  	private double? RecognizeOptionalDouble()
  	{
  		if (RecognizeOptionalKeyword("NULL") || CurrentIsDoubleSeparator() || _readEndOfStream)
  		{
  			return null;
  		}
  		return RecognizeDouble();
  	}

  	private bool RecognizeEmptyGeometry()
  	{
  		return RecognizeOptionalKeyword("EMPTY");
  	}

  	private bool RecognizeOptionalKeyword(string keyword)
  	{
  		SkipWhiteSpaces();
  		if (char.ToUpperInvariant(keyword[0]) == char.ToUpperInvariant(Current))
  		{
  			RecognizeToken(keyword);
  			if (!_readEndOfStream && (char.IsLetter(Current) || char.IsDigit(Current)))
  			{
  				throw new FormatException(SpatialRes.StrGenericTextError);
  			}
  			return true;
  		}
  		return false;
  	}

  	private bool RecognizeOptionalToken(char token)
  	{
  		SkipWhiteSpaces();
  		if (Current == token)
  		{
  			ReadChar();
  			return true;
  		}
  		return false;
  	}

  	private void RecognizeToken(char token)
  	{
  		SkipWhiteSpaces();
  		if (_readEndOfStream)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedEndOfInput));
  		}
  		if (Current != token)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnrecognizedToken, token, _nextIndex - 1, $"{Current}"));
  		}
  		ReadChar();
  	}

  	private void RecognizeToken(string token)
  	{
  		SkipWhiteSpaces();
  		if (!CanReadNChars(token.Length))
  		{
  			if (_readEndOfStream)
  			{
  				throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnexpectedEndOfInput));
  			}
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnrecognizedToken, token, _nextIndex - 1, $"{Current}"));
  		}
  		string text = ReadNChars(token.Length);
  		if (string.Compare(token, text, StringComparison.OrdinalIgnoreCase) != 0)
  		{
  			throw new FormatException(string.Format(CultureInfo.InvariantCulture, SpatialRes.StrUnrecognizedToken, token, _nextIndex - token.Length, text));
  		}
  	}

  	private bool RecognizeOptionalToken(string token)
  	{
  		SkipWhiteSpaces();
  		if (!CanReadNChars(token.Length))
  		{
  			return false;
  		}
  		string strB = PeekNChars(token.Length);
  		if (string.Compare(token, strB, StringComparison.OrdinalIgnoreCase) == 0)
  		{
  			ReadNChars(token.Length);
  			return true;
  		}
  		return false;
  	}

  	private bool RecognizeArcOrLineStart()
  	{
  		if (RecognizeOptionalKeyword(OpenGisTypes.ToString(OpenGisType.CircularString)))
  		{
  			_sink.AddSegment(SegmentType.FirstArc);
  			return true;
  		}
  		_sink.AddSegment(SegmentType.FirstLine);
  		return false;
  	}
  }
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class SpatialRes
  {
  	private static ResourceManager resourceMan;

  	private static CultureInfo resourceCulture;

  	[EditorBrowsable(EditorBrowsableState.Advanced)]
  	internal static ResourceManager ResourceManager
  	{
  		get
  		{
  			if (resourceMan == null)
  			{
  				resourceMan = new ResourceManager("Microsoft.SqlServer.Types.SpatialRes", typeof(SpatialRes).Assembly);
  			}
  			return resourceMan;
  		}
  	}

  	[EditorBrowsable(EditorBrowsableState.Advanced)]
  	internal static CultureInfo Culture
  	{
  		get
  		{
  			return resourceCulture;
  		}
  		set
  		{
  			resourceCulture = value;
  		}
  	}

  	internal static string StrAntipodalEdge => ResourceManager.GetString("StrAntipodalEdge", resourceCulture);

  	internal static string StrArcNeedToHaveEqualZ => ResourceManager.GetString("StrArcNeedToHaveEqualZ", resourceCulture);

  	internal static string StrBufferPassedIllegalDistance => ResourceManager.GetString("StrBufferPassedIllegalDistance", resourceCulture);

  	internal static string StrBufferWithTolerancePassedIllegalTolerance => ResourceManager.GetString("StrBufferWithTolerancePassedIllegalTolerance", resourceCulture);

  	internal static string StrBufferWouldWrapAround => ResourceManager.GetString("StrBufferWouldWrapAround", resourceCulture);

  	internal static string StrCircularStringNeedsThreePoints => ResourceManager.GetString("StrCircularStringNeedsThreePoints", resourceCulture);

  	internal static string StrCompoundCurveMismatch => ResourceManager.GetString("StrCompoundCurveMismatch", resourceCulture);

  	internal static string StrCompoundCurveNeedsTwoPoints => ResourceManager.GetString("StrCompoundCurveNeedsTwoPoints", resourceCulture);

  	internal static string StrCurveToLinePassedIllegalTolerance => ResourceManager.GetString("StrCurveToLinePassedIllegalTolerance", resourceCulture);

  	internal static string StrEmptyTextError => ResourceManager.GetString("StrEmptyTextError", resourceCulture);

  	internal static string StrExpectedNumber => ResourceManager.GetString("StrExpectedNumber", resourceCulture);

  	internal static string StrFullGlobeCannotBePartOfGeometryCollection => ResourceManager.GetString("StrFullGlobeCannotBePartOfGeometryCollection", resourceCulture);

  	internal static string StrFullGlobeCannotHaveElements => ResourceManager.GetString("StrFullGlobeCannotHaveElements", resourceCulture);

  	internal static string StrGenericTextError => ResourceManager.GetString("StrGenericTextError", resourceCulture);

  	internal static string StrGenericWKBError => ResourceManager.GetString("StrGenericWKBError", resourceCulture);

  	internal static string StrGeographyCoordinatesLatitudeIsNotValid => ResourceManager.GetString("StrGeographyCoordinatesLatitudeIsNotValid", resourceCulture);

  	internal static string StrGeographyCoordinatesLongitudeIsNotValid => ResourceManager.GetString("StrGeographyCoordinatesLongitudeIsNotValid", resourceCulture);

  	internal static string StrGeographyInputIsNotValid => ResourceManager.GetString("StrGeographyInputIsNotValid", resourceCulture);

  	internal static string StrGeographySridIsNotValid => ResourceManager.GetString("StrGeographySridIsNotValid", resourceCulture);

  	internal static string StrGLLibraryNotLoaded => ResourceManager.GetString("StrGLLibraryNotLoaded", resourceCulture);

  	internal static string StrGmlArcMustHaveExactlyThreePoints => ResourceManager.GetString("StrGmlArcMustHaveExactlyThreePoints", resourceCulture);

  	internal static string StrGmlMayNotHaveAttributes => ResourceManager.GetString("StrGmlMayNotHaveAttributes", resourceCulture);

  	internal static string StrGmlMustHaveSingleTag => ResourceManager.GetString("StrGmlMustHaveSingleTag", resourceCulture);

  	internal static string StrGmlMustHaveValidTag => ResourceManager.GetString("StrGmlMustHaveValidTag", resourceCulture);

  	internal static string StrIncompatibleGeographySinks => ResourceManager.GetString("StrIncompatibleGeographySinks", resourceCulture);

  	internal static string StrIncompatibleGeometrySinks => ResourceManager.GetString("StrIncompatibleGeometrySinks", resourceCulture);

  	internal static string StrInstanceIsNotValid => ResourceManager.GetString("StrInstanceIsNotValid", resourceCulture);

  	internal static string StrInstanceOfPassedIllegalType => ResourceManager.GetString("StrInstanceOfPassedIllegalType", resourceCulture);

  	internal static string StrInvalidAntipodalEdge => ResourceManager.GetString("StrInvalidAntipodalEdge", resourceCulture);

  	internal static string StrInvalidBoundingBox => ResourceManager.GetString("StrInvalidBoundingBox", resourceCulture);

  	internal static string StrInvalidDegeneratePolygon => ResourceManager.GetString("StrInvalidDegeneratePolygon", resourceCulture);

  	internal static string StrInvalidDegeneratesToPoint => ResourceManager.GetString("StrInvalidDegeneratesToPoint", resourceCulture);

  	internal static string StrInvalidEdgeOverlap => ResourceManager.GetString("StrInvalidEdgeOverlap", resourceCulture);

  	internal static string StrInvalidEdgeOverlapSameCurve => ResourceManager.GetString("StrInvalidEdgeOverlapSameCurve", resourceCulture);

  	internal static string StrInvalidEntry => ResourceManager.GetString("StrInvalidEntry", resourceCulture);

  	internal static string StrInvalidExteriorRing => ResourceManager.GetString("StrInvalidExteriorRing", resourceCulture);

  	internal static string StrInvalidGeographyInputHemisphere => ResourceManager.GetString("StrInvalidGeographyInputHemisphere", resourceCulture);

  	internal static string StrInvalidGeographyRingOutOfPlace => ResourceManager.GetString("StrInvalidGeographyRingOutOfPlace", resourceCulture);

  	internal static string StrInvalidGeometryRingOutOfPlace => ResourceManager.GetString("StrInvalidGeometryRingOutOfPlace", resourceCulture);

  	internal static string StrInvalidIsolatedPoint => ResourceManager.GetString("StrInvalidIsolatedPoint", resourceCulture);

  	internal static string StrInvalidOpenRing => ResourceManager.GetString("StrInvalidOpenRing", resourceCulture);

  	internal static string StrInvalidPolygon => ResourceManager.GetString("StrInvalidPolygon", resourceCulture);

  	internal static string StrInvalidRedundantRing => ResourceManager.GetString("StrInvalidRedundantRing", resourceCulture);

  	internal static string StrInvalidRingOverlap => ResourceManager.GetString("StrInvalidRingOverlap", resourceCulture);

  	internal static string StrInvalidSplitRing => ResourceManager.GetString("StrInvalidSplitRing", resourceCulture);

  	internal static string StrInvalidSplitRingUnknown => ResourceManager.GetString("StrInvalidSplitRingUnknown", resourceCulture);

  	internal static string StrInvalidType => ResourceManager.GetString("StrInvalidType", resourceCulture);

  	internal static string StrInvalidUnknown => ResourceManager.GetString("StrInvalidUnknown", resourceCulture);

  	internal static string StrLinearRingHasTooFewPoints => ResourceManager.GetString("StrLinearRingHasTooFewPoints", resourceCulture);

  	internal static string StrLineStringNeedsTwoPoints => ResourceManager.GetString("StrLineStringNeedsTwoPoints", resourceCulture);

  	internal static string StrListCapacityExceeded => ResourceManager.GetString("StrListCapacityExceeded", resourceCulture);

  	internal static string StrNestingOverflow => ResourceManager.GetString("StrNestingOverflow", resourceCulture);

  	internal static string StrNoMoreCallsExpected => ResourceManager.GetString("StrNoMoreCallsExpected", resourceCulture);

  	internal static string StrPlatformNotSupported => ResourceManager.GetString("StrPlatformNotSupported", resourceCulture);

  	internal static string StrPointCoordinateIsNotValid => ResourceManager.GetString("StrPointCoordinateIsNotValid", resourceCulture);

  	internal static string StrPolygonExteriorRingHasTooFewPoints => ResourceManager.GetString("StrPolygonExteriorRingHasTooFewPoints", resourceCulture);

  	internal static string StrPolygonExteriorRingNotARing => ResourceManager.GetString("StrPolygonExteriorRingNotARing", resourceCulture);

  	internal static string StrPolygonInteriorRingHasTooFewPoints => ResourceManager.GetString("StrPolygonInteriorRingHasTooFewPoints", resourceCulture);

  	internal static string StrPolygonInteriorRingNotARing => ResourceManager.GetString("StrPolygonInteriorRingNotARing", resourceCulture);

  	internal static string StrPolygonRingHasTooFewPoints => ResourceManager.GetString("StrPolygonRingHasTooFewPoints", resourceCulture);

  	internal static string StrPolygonRingNotARing => ResourceManager.GetString("StrPolygonRingNotARing", resourceCulture);

  	internal static string StrPosListHasOddCoordinates => ResourceManager.GetString("StrPosListHasOddCoordinates", resourceCulture);

  	internal static string StrPosListIsEmpty => ResourceManager.GetString("StrPosListIsEmpty", resourceCulture);

  	internal static string StrPosMustHaveTwoCoordinates => ResourceManager.GetString("StrPosMustHaveTwoCoordinates", resourceCulture);

  	internal static string StrReducePassedIllegalTolerance => ResourceManager.GetString("StrReducePassedIllegalTolerance", resourceCulture);

  	internal static string StrSetSridMismatch => ResourceManager.GetString("StrSetSridMismatch", resourceCulture);

  	internal static string StrSingleSideReducePassedIllegalAreaDelta => ResourceManager.GetString("StrSingleSideReducePassedIllegalAreaDelta", resourceCulture);

  	internal static string StrSridOutOfRange => ResourceManager.GetString("StrSridOutOfRange", resourceCulture);

  	internal static string StrSTCurveNIndexTooSmall => ResourceManager.GetString("StrSTCurveNIndexTooSmall", resourceCulture);

  	internal static string StrSTGeometryNIndexTooSmall => ResourceManager.GetString("StrSTGeometryNIndexTooSmall", resourceCulture);

  	internal static string StrSTInteriorRingNIndexTooSmall => ResourceManager.GetString("StrSTInteriorRingNIndexTooSmall", resourceCulture);

  	internal static string StrSTPointNIndexTooSmall => ResourceManager.GetString("StrSTPointNIndexTooSmall", resourceCulture);

  	internal static string StrSTRelatePassedIntersectionPatternMatrixWithIncorrectSize => ResourceManager.GetString("StrSTRelatePassedIntersectionPatternMatrixWithIncorrectSize", resourceCulture);

  	internal static string StrSTRelatePassedIntersectionPatternMatrixWithNotValidCharacter => ResourceManager.GetString("StrSTRelatePassedIntersectionPatternMatrixWithNotValidCharacter", resourceCulture);

  	internal static string StrUnexpectedCall => ResourceManager.GetString("StrUnexpectedCall", resourceCulture);

  	internal static string StrUnexpectedCall2 => ResourceManager.GetString("StrUnexpectedCall2", resourceCulture);

  	internal static string StrUnexpectedEndOfInput => ResourceManager.GetString("StrUnexpectedEndOfInput", resourceCulture);

  	internal static string StrUnexpectedVersion => ResourceManager.GetString("StrUnexpectedVersion", resourceCulture);

  	internal static string StrUnknownLabelInWKT => ResourceManager.GetString("StrUnknownLabelInWKT", resourceCulture);

  	internal static string StrUnrecognizedToken => ResourceManager.GetString("StrUnrecognizedToken", resourceCulture);

  	internal static string StrValid => ResourceManager.GetString("StrValid", resourceCulture);

  	internal static string StrWrongCompatibilityLevel => ResourceManager.GetString("StrWrongCompatibilityLevel", resourceCulture);

  	internal SpatialRes()
  	{
  	}
  }
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class ordpathres
  {
  	private static ResourceManager resourceMan;

  	private static CultureInfo resourceCulture;

  	[EditorBrowsable(EditorBrowsableState.Advanced)]
  	internal static ResourceManager ResourceManager
  	{
  		get
  		{
  			if (resourceMan == null)
  			{
  				resourceMan = new ResourceManager("Microsoft.SqlServer.Types.ordpathres", typeof(ordpathres).Assembly);
  			}
  			return resourceMan;
  		}
  	}

  	[EditorBrowsable(EditorBrowsableState.Advanced)]
  	internal static CultureInfo Culture
  	{
  		get
  		{
  			return resourceCulture;
  		}
  		set
  		{
  			resourceCulture = value;
  		}
  	}

  	internal static string ArgumentNotSqlHierarchyId => ResourceManager.GetString("ArgumentNotSqlHierarchyId", resourceCulture);

  	internal static string BadOrdpath => ResourceManager.GetString("BadOrdpath", resourceCulture);

  	internal static string BadOrdpathString => ResourceManager.GetString("BadOrdpathString", resourceCulture);

  	internal static string ChildOrder => ResourceManager.GetString("ChildOrder", resourceCulture);

  	internal static string NegativeInput => ResourceManager.GetString("NegativeInput", resourceCulture);

  	internal static string NonNullInput => ResourceManager.GetString("NonNullInput", resourceCulture);

  	internal static string NotAChild => ResourceManager.GetString("NotAChild", resourceCulture);

  	internal static string NullInput => ResourceManager.GetString("NullInput", resourceCulture);

  	internal static string NullRefInput => ResourceManager.GetString("NullRefInput", resourceCulture);

  	internal static string OrdpathTooLong => ResourceManager.GetString("OrdpathTooLong", resourceCulture);

  	internal static string ReparentArgs => ResourceManager.GetString("ReparentArgs", resourceCulture);

  	internal static string ResultTooLong => ResourceManager.GetString("ResultTooLong", resourceCulture);

  	internal ordpathres()
  	{
  	}
  }
  internal struct SComponent
  {
  	public enum ESType
  	{
  		ORD_COMPONENT,
  		NAMESPACE_PREFIX_COMPONENT,
  		ATTRIBUTE_COMPONENT
  	}

  	public ESType type;

  	public long ord;

  	public int lNID;
  }
  internal class OrdPath
  {
  	public enum EOrdPathConst
  	{
  		MAX_CACHED_LEVELS = 5,
  		BINARYIDSIZE = 892
  	}

  	public enum SubType
  	{
  		ORDPATH,
  		DESCENDANT_LIMIT
  	}

  	public enum levelType
  	{
  		CHILD_LEVEL,
  		FAKE_LEVEL
  	}

  	public SubType m_subType;

  	public byte[] m_bytes;

  	public ushort m_bitLength;

  	public uint m_level;

  	public uint m_parsedLevels;

  	public uint m_parentBitLengthIndex;

  	public ushort[] m_bitOffsets;

  	public OrdPath(OrdPath ordPath)
  	{
  		InitArrays();
  		CopyPropertiesFrom(ordPath);
  	}

  	public OrdPath(byte[] bytes, uint byteLength)
  	{
  		InitArrays();
  		Init(bytes, byteLength);
  	}

  	public void InitFromString(string chDottedString)
  	{
  		uint length = (uint)chDottedString.Length;
  		bool flag = false;
  		uint num = 0u;
  		levelType type = levelType.CHILD_LEVEL;
  		ushort bitOffset = 0;
  		m_subType = SubType.ORDPATH;
  		m_level = 0u;
  		m_parsedLevels = 0u;
  		m_bitLength = 0;
  		while (num < length)
  		{
  			bool flag2 = false;
  			if (num < length && chDottedString[(int)num] == '-')
  			{
  				flag2 = true;
  				num++;
  			}
  			long num2 = 0L;
  			uint num3 = num;
  			for (uint num4 = Math.Min(num + 18, length); num < num4 && char.IsDigit(chDottedString[(int)num]); num++)
  			{
  				if (num3 != num && num2 == 0L)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, "/" + chDottedString + "/"));
  				}
  				num2 = num2 * 10 + (int)char.GetNumericValue(chDottedString[(int)num]);
  			}
  			if (num == num3)
  			{
  				flag = true;
  				break;
  			}
  			if (flag2)
  			{
  				num2 = -num2;
  				if (num2 == 0L)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, "/" + chDottedString + "/"));
  				}
  			}
  			if (num == length)
  			{
  				type = levelType.CHILD_LEVEL;
  				m_level++;
  			}
  			else
  			{
  				switch (chDottedString[(int)num])
  				{
  				case '.':
  					type = levelType.FAKE_LEVEL;
  					break;
  				case '/':
  					type = levelType.CHILD_LEVEL;
  					m_level++;
  					break;
  				default:
  					flag = true;
  					break;
  				}
  				num++;
  				if (num == length)
  				{
  					flag = true;
  				}
  			}
  			if (flag)
  			{
  				break;
  			}
  			try
  			{
  				WriteOrdComponent(ref bitOffset, num2, type);
  			}
  			catch (HierarchyIdException)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, "/" + chDottedString + "/"));
  			}
  			if (num < length && chDottedString[(int)num] == '@')
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, "/" + chDottedString + "/"));
  			}
  		}
  		m_bitLength = bitOffset;
  		if (flag)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, "/" + chDottedString + "/"));
  		}
  	}

  	public OrdPath(string chDottedString)
  	{
  		InitArrays();
  		InitFromString(chDottedString);
  	}

  	public OrdPath(long rank)
  	{
  		InitArrays();
  		ushort bitOffset = 0;
  		WriteOrdComponent(ref bitOffset, rank, levelType.CHILD_LEVEL);
  		m_subType = SubType.ORDPATH;
  		m_bitLength = bitOffset;
  		m_level = 1u;
  		m_parsedLevels = 1u;
  		m_parentBitLengthIndex = 0u;
  		m_bitOffsets[0] = 0;
  	}

  	public OrdPath()
  	{
  		m_subType = SubType.ORDPATH;
  		m_level = 0u;
  		m_parsedLevels = 0u;
  		m_bitLength = 0;
  		InitArrays();
  	}

  	public OrdPath CopyPropertiesFrom(OrdPath other)
  	{
  		if (this != other)
  		{
  			m_subType = other.m_subType;
  			m_level = other.m_level;
  			m_parentBitLengthIndex = other.m_parentBitLengthIndex;
  			m_parsedLevels = other.m_parsedLevels;
  			m_bitLength = other.m_bitLength;
  			if (other.m_parsedLevels != 0)
  			{
  				Array.Copy(other.m_bitOffsets, m_bitOffsets, other.m_bitOffsets.Length);
  			}
  			if (m_bitLength > 0)
  			{
  				Array.Copy(other.m_bytes, m_bytes, (m_bitLength + 7) / 8);
  			}
  		}
  		return this;
  	}

  	public void InitArrays()
  	{
  		m_bytes = new byte[892];
  		m_bitOffsets = new ushort[5];
  	}

  	public void Init(byte[] bytes, uint byteLength)
  	{
  		m_subType = SubType.ORDPATH;
  		m_level = uint.MaxValue;
  		m_parsedLevels = 0u;
  		if (byteLength > 892)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		if (byteLength != 0 && bytes[byteLength - 1] == 0)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		Array.Copy(bytes, m_bytes, byteLength);
  		ComputeBitLength(byteLength);
  	}

  	public static bool operator ==(OrdPath ordP1, OrdPath ordP2)
  	{
  		if ((object)ordP1 != null || (object)ordP2 != null)
  		{
  			if ((object)ordP1 != null && (object)ordP2 != null)
  			{
  				return ordP1.Equals(ordP2);
  			}
  			return false;
  		}
  		return true;
  	}

  	public static bool operator !=(OrdPath ordP1, OrdPath ordP2)
  	{
  		return !(ordP1 == ordP2);
  	}

  	public static bool operator >(OrdPath ordP1, OrdPath ordP2)
  	{
  		uint bitLength = ordP1.m_bitLength;
  		uint bitLength2 = ordP2.m_bitLength;
  		CompareBMP compareBMP = OrdPathUtil.BitCompare(ordP1.m_bytes, ordP2.m_bytes, Math.Min(bitLength, bitLength2));
  		if (compareBMP != 0)
  		{
  			return compareBMP == CompareBMP.x_cmpGt;
  		}
  		return bitLength > bitLength2;
  	}

  	public static bool operator <(OrdPath ordP1, OrdPath ordP2)
  	{
  		return ordP2 > ordP1;
  	}

  	public static bool operator >=(OrdPath ordP1, OrdPath ordP2)
  	{
  		return !(ordP1 < ordP2);
  	}

  	public static bool operator <=(OrdPath ordP1, OrdPath ordP2)
  	{
  		return !(ordP1 > ordP2);
  	}

  	public bool IsEqual(byte[] bytes, uint byteLength)
  	{
  		uint num = (uint)((m_bitLength + 7) / 8);
  		if (num == byteLength)
  		{
  			if (num != 0)
  			{
  				return OrdPathUtil.memcmp(m_bytes, bytes, num) == 0;
  			}
  			return true;
  		}
  		return false;
  	}

  	public void SetToRoot()
  	{
  		m_subType = SubType.ORDPATH;
  		m_bitLength = 0;
  		m_level = 0u;
  		m_parsedLevels = 0u;
  	}

  	public bool IsRoot()
  	{
  		if (m_subType == SubType.ORDPATH)
  		{
  			return m_bitLength == 0;
  		}
  		return false;
  	}

  	public uint GetLevel()
  	{
  		if (m_level == uint.MaxValue)
  		{
  			ParseTheBinary();
  		}
  		return m_level;
  	}

  	public static bool SetToAncestor(byte[] bytes, ref uint byteLength, uint levelsUp)
  	{
  		WordTwoBytes wordTwoBytes = default(WordTwoBytes);
  		WordTwoBytes wordTwoBytes2 = default(WordTwoBytes);
  		if (levelsUp == 0)
  		{
  			return true;
  		}
  		if (byteLength == 0)
  		{
  			return false;
  		}
  		uint num = byteLength;
  		byte b = bytes[num - 1];
  		int num2 = (((b & 0xF) != 0) ? (((b & 3) != 0) ? (((b & 1) == 0) ? 1 : 0) : (((b & 7) == 0) ? 3 : 2)) : (((b & 0x3F) != 0) ? (((b & 0x1F) == 0) ? 5 : 4) : (((b & 0x7F) == 0) ? 7 : 6)));
  		ushort num3 = (ushort)((ushort)byteLength * 8 - num2);
  		do
  		{
  			if (num3 == 0)
  			{
  				return false;
  			}
  			int num4 = 0;
  			byte b2;
  			do
  			{
  				if (num >= 2)
  				{
  					wordTwoBytes.bytes.bHighByte = bytes[num - 2];
  				}
  				else
  				{
  					wordTwoBytes.bytes.bHighByte = 1;
  				}
  				wordTwoBytes.bytes.bLowByte = bytes[num - 1];
  				wordTwoBytes2.wTwoBytes = (ushort)(wordTwoBytes.wTwoBytes >> num2);
  				if ((wordTwoBytes2.bytes.bLowByte & 0x38) == 40)
  				{
  					if (num3 < 5)
  					{
  						throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  					}
  					num3 -= 5;
  					b2 = 1;
  				}
  				else if ((wordTwoBytes2.bytes.bLowByte & 0x78) == 96)
  				{
  					if (num3 < 6)
  					{
  						throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  					}
  					num3 -= 6;
  					b2 = 1;
  				}
  				else if ((wordTwoBytes2.bytes.bLowByte & 0x38) == 8)
  				{
  					if (num3 < 5)
  					{
  						throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  					}
  					num3 -= 5;
  					b2 = 0;
  				}
  				else
  				{
  					int fIRST_POSITIVE_STAGE = CStages.FIRST_POSITIVE_STAGE;
  					int num5 = CStages.FIRST_POSITIVE_STAGE - 1;
  					int num6;
  					ushort num7;
  					do
  					{
  						if (fIRST_POSITIVE_STAGE > CStages.LAST_POSITIVE_STAGE && num5 < CStages.FIRST_NEGATIVE_STAGE)
  						{
  							throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  						}
  						bool flag = fIRST_POSITIVE_STAGE <= CStages.LAST_POSITIVE_STAGE && (num5 < CStages.FIRST_NEGATIVE_STAGE || CStages.stages[fIRST_POSITIVE_STAGE].totalLength <= CStages.stages[num5].totalLength);
  						num6 = ((!flag) ? num5-- : fIRST_POSITIVE_STAGE++);
  						if (num3 < CStages.stages[num6].totalLength)
  						{
  							throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  						}
  						num7 = (ushort)(num3 - CStages.stages[num6].totalLength);
  						if (num7 == 0)
  						{
  							wordTwoBytes2.bytes.bHighByte = 1;
  							wordTwoBytes2.bytes.bLowByte = bytes[0];
  							continue;
  						}
  						uint num8 = (uint)(num7 - 1);
  						uint num9 = num8 / 8;
  						wordTwoBytes.bytes.bHighByte = bytes[num9];
  						if (num9 < byteLength - 1)
  						{
  							wordTwoBytes.bytes.bLowByte = bytes[num9 + 1];
  						}
  						wordTwoBytes2.wTwoBytes = (ushort)(wordTwoBytes.wTwoBytes >> (int)(7 - num8 % 8));
  					}
  					while (CStages.decode[wordTwoBytes2.bytes.bLowByte] != num6);
  					num3 = num7;
  					b2 = (byte)(wordTwoBytes2.bytes.bHighByte & 1);
  				}
  				num4++;
  				num = (uint)((num3 + 7) / 8);
  				num2 = 7 - (num3 + 7) % 8;
  			}
  			while (b2 == 0);
  		}
  		while (--levelsUp != 0);
  		byteLength = num;
  		if (num2 != 0)
  		{
  			byte b3 = (byte)((1 << num2) - 1);
  			bytes[num - 1] &= (byte)(~b3);
  		}
  		return true;
  	}

  	public void SetToAncestor(OrdPathMark mark)
  	{
  		ushort usBitLength = mark.m_usBitLength;
  		if (usBitLength < m_bitLength)
  		{
  			int num = (usBitLength + 7) / 8 - 1;
  			m_bytes[num] = (byte)(m_bytes[num] & ~((1 << 7 - (usBitLength - 1) % 8) - 1));
  			m_bitLength = usBitLength;
  			m_level = uint.MaxValue;
  			m_parsedLevels = 0u;
  		}
  	}

  	public void SetToAncestor(uint levelsUp)
  	{
  		if (!IsValid())
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		if (m_level == uint.MaxValue)
  		{
  			ParseTheBinary();
  		}
  		if (levelsUp > m_level)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		for (uint num = 0u; num < levelsUp; num++)
  		{
  			if (m_parsedLevels == 0)
  			{
  				ParseTheBinary();
  			}
  			m_bitLength = m_bitOffsets[m_parentBitLengthIndex];
  			if (m_parentBitLengthIndex == 0)
  			{
  				m_parentBitLengthIndex = 4u;
  			}
  			else
  			{
  				m_parentBitLengthIndex--;
  			}
  			m_parsedLevels--;
  			m_level--;
  		}
  		if (m_bitLength % 8 != 0)
  		{
  			byte b = (byte)((128 >> m_bitLength % 8 - 1) - 1);
  			m_bytes[m_bitLength / 8] &= (byte)(~b);
  		}
  	}

  	public void SetToDescendantLimit()
  	{
  		if (!IsValid())
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		if (IsRoot())
  		{
  			ushort bitOffset = 0;
  			WriteOrdComponent(ref bitOffset, CStages.stages[CStages.LAST_POSITIVE_STAGE].highOrd, levelType.CHILD_LEVEL);
  			m_bitLength = bitOffset;
  		}
  		ushort num = (ushort)(m_bitLength - 1);
  		byte b = (byte)(128 >> num % 8);
  		ushort num2 = (ushort)(num / 8);
  		while (true)
  		{
  			m_bytes[num2] += b;
  			if (m_bytes[num2] != 0)
  			{
  				break;
  			}
  			if (num2 == 0)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  			}
  			num2--;
  			b = 1;
  		}
  		m_subType = SubType.DESCENDANT_LIMIT;
  	}

  	public bool IsAncestorOf(OrdPath descendant, bool fSelfIsAncestor)
  	{
  		if (!IsValid() || !descendant.IsValid())
  		{
  			return false;
  		}
  		if (descendant.m_bitLength < m_bitLength || (descendant.m_bitLength == m_bitLength && !fSelfIsAncestor))
  		{
  			return false;
  		}
  		return OrdPathUtil.BitCompare(m_bytes, descendant.m_bytes, m_bitLength) == CompareBMP.x_cmpEq;
  	}

  	public bool IsAncestorOf(byte[] bytes, uint byteLength, bool fSelfIsAncestor)
  	{
  		uint num = (uint)(m_bitLength + 7) / 8u;
  		if (num > byteLength)
  		{
  			return false;
  		}
  		if (OrdPathUtil.BitCompare(m_bytes, bytes, m_bitLength) != 0)
  		{
  			return false;
  		}
  		if (num == byteLength && (num == 0 || bytes[num - 1] == m_bytes[num - 1]) && !fSelfIsAncestor)
  		{
  			return false;
  		}
  		return true;
  	}

  	public bool IsValid()
  	{
  		return m_subType == SubType.ORDPATH;
  	}

  	public bool IsDescendantLimit()
  	{
  		return m_subType == SubType.DESCENDANT_LIMIT;
  	}

  	public byte[] GetBinary(ref uint byteLength)
  	{
  		byteLength = (uint)((m_bitLength + 7) / 8);
  		return m_bytes;
  	}

  	public override string ToString()
  	{
  		StringBuilder stringBuilder = new StringBuilder("/");
  		if (m_bitLength != 0)
  		{
  			ushort bitOffset = 0;
  			while (bitOffset < m_bitLength)
  			{
  				SComponent component = default(SComponent);
  				levelType type = levelType.CHILD_LEVEL;
  				ExtractComponent(ref bitOffset, ref component, ref type);
  				stringBuilder.Append(component.ord);
  				stringBuilder.Append((type != 0) ? "." : "/");
  			}
  		}
  		return stringBuilder.ToString();
  	}

  	public OrdPathMark GetMark()
  	{
  		OrdPathMark result = default(OrdPathMark);
  		result.m_usBitLength = m_bitLength;
  		return result;
  	}

  	public void ComputeBitLength(uint byteLength)
  	{
  		ushort num = (ushort)(byteLength * 8);
  		if (byteLength != 0)
  		{
  			byte b = m_bytes[byteLength - 1];
  			byte b2 = 1;
  			while ((b & b2) == 0)
  			{
  				num--;
  				b2 <<= 1;
  			}
  		}
  		m_bitLength = num;
  	}

  	public void GetBits(ushort startBit, ushort nBits, out byte bits)
  	{
  		if (startBit + nBits > m_bitLength)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		ushort num = (ushort)(8 - startBit % 8);
  		byte b = (byte)((1 << (int)num) - 1);
  		bits = (byte)((num <= nBits) ? ((m_bytes[startBit / 8] & b) << nBits - num) : ((m_bytes[startBit / 8] & b) >> num - nBits));
  		if (nBits > num)
  		{
  			uint num2 = (uint)(nBits - num);
  			bits |= (byte)(m_bytes[startBit / 8 + 1] >> (int)(8 - num2));
  		}
  	}

  	public void GetBits(ushort startBit, ushort nBits, out ulong bits)
  	{
  		if (startBit + nBits > m_bitLength)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		uint num = (uint)startBit % 8u;
  		uint num2 = Math.Min(nBits, 8 - num);
  		uint num3 = 8 - num - num2;
  		uint num4 = (uint)startBit / 8u;
  		bits = (((ulong)m_bytes[num4] >> (int)num3) & (ulong)((1 << (int)num2) - 1)) << (int)(nBits - num2);
  		num4++;
  		for (int num5 = (int)(nBits - num2); num5 > 0; num5 -= 8)
  		{
  			if (num5 >= 8)
  			{
  				bits |= (ulong)m_bytes[num4++] << num5 - 8;
  			}
  			else
  			{
  				bits |= (ulong)m_bytes[num4++] >> 8 - num5;
  			}
  		}
  	}

  	public void AppendBits(ref ushort bitOffset, ulong x, ushort nBits)
  	{
  		if (nBits != 0)
  		{
  			if (bitOffset + nBits > 7136)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ResultTooLong, "AppendBits"));
  			}
  			ushort num = (ushort)(bitOffset % 8);
  			ushort num2 = (ushort)Math.Min(nBits, 8 - num);
  			ushort num3 = (ushort)(8 - num - num2);
  			uint num4 = (uint)bitOffset / 8u;
  			int num5 = (1 << (int)num) - 1 << 8 - num;
  			int num6 = (1 << (int)num2) - 1 << 8 - num - num2;
  			m_bytes[num4] = (byte)((m_bytes[num4] & num5) | ((int)(x >> nBits - num2 << (int)num3) & num6));
  			num4++;
  			for (int num7 = nBits - num2; num7 > 0; num7 -= 8)
  			{
  				m_bytes[num4++] = (byte)((num7 > 8) ? (x >> num7 - 8) : (x << 8 - num7));
  			}
  			bitOffset += nBits;
  		}
  	}

  	public void ParseCodeBits(ref ushort startBit, out uint stage)
  	{
  		if (m_bitLength == startBit)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		int num = 8;
  		ushort num2 = (ushort)Math.Min(m_bitLength - startBit, num);
  		GetBits(startBit, num2, out byte bits);
  		bits = (byte)(bits << num - num2);
  		stage = CStages.decode[bits];
  		if (stage == 255)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		startBit += CStages.stages[stage].codeLength;
  	}

  	public void ExtractComponent(ref ushort bitOffset, ref SComponent component, ref levelType type)
  	{
  		ParseCodeBits(ref bitOffset, out var stage);
  		if (stage == CStages.NAMESPACE_PREFIX_STAGE || stage == CStages.ATTRIBUTE_STAGE)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		component.type = SComponent.ESType.ORD_COMPONENT;
  		ExtractOrd(ref bitOffset, stage, ref component.ord);
  		GetBits(bitOffset, (ushort)1, out byte bits);
  		bitOffset++;
  		type = ((bits != 1) ? levelType.FAKE_LEVEL : levelType.CHILD_LEVEL);
  		if (component.type == SComponent.ESType.ORD_COMPONENT && type == levelType.FAKE_LEVEL)
  		{
  			component.ord--;
  		}
  	}

  	public void ExtractOrdComponent(ref ushort bitOffset, ref long ord, ref levelType type)
  	{
  		ParseCodeBits(ref bitOffset, out var stage);
  		if (stage < CStages.FIRST_NEGATIVE_STAGE)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  		}
  		ExtractOrd(ref bitOffset, stage, ref ord);
  		GetBits(bitOffset, (ushort)1, out ulong bits);
  		bitOffset++;
  		type = ((bits != 1) ? levelType.FAKE_LEVEL : levelType.CHILD_LEVEL);
  		if (type == levelType.FAKE_LEVEL)
  		{
  			ord--;
  		}
  	}

  	public void ExtractOrdComponentFake(OrdPath parent, bool fLeft, ref ushort bitOffset, ref long ord, ref levelType type)
  	{
  		ExtractOrdComponent(ref bitOffset, ref ord, ref type);
  		if (type == levelType.CHILD_LEVEL && bitOffset != m_bitLength)
  		{
  			string arg = (fLeft ? "child1" : "child2");
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.NotAChild, arg, this, parent));
  		}
  	}

  	public void ExtractOrd(ref ushort bitOffset, uint stage, ref long ord)
  	{
  		GetBits(bitOffset, CStages.stages[stage].ordLengthExpanded, out ulong bits);
  		bitOffset += CStages.stages[stage].ordLengthExpanded;
  		if (CStages.stages[stage].ordLengthExpanded > 3)
  		{
  			if (CStages.stages[stage].ordLengthExpanded > 5)
  			{
  				if (CStages.stages[stage].ordLengthExpanded > 9)
  				{
  					if (CStages.stages[stage].ordLengthExpanded > 16)
  					{
  						if (CStages.stages[stage].ordLengthExpanded > 38)
  						{
  							bits = (bits & 0x3FFFFFFFFFL) | ((bits & 0xFFFFFF8000000000uL) >> 1);
  						}
  						bits = (bits & 0xFFFF) | ((bits & 0xFFFFFFFFFFFE0000uL) >> 1);
  					}
  					bits = (bits & 0x1FF) | ((bits & 0xFFFFFFFFFFFFFC00uL) >> 1);
  				}
  				bits = (bits & 0x1F) | ((bits & 0xFFFFFFFFFFFFFFC0uL) >> 1);
  			}
  			bits = (bits & 7) | ((bits & 0xFFFFFFFFFFFFFFF0uL) >> 1);
  		}
  		ord = (long)bits + CStages.stages[stage].lowOrd;
  	}

  	public void WriteComponent(ref ushort bitOffset, ref SComponent component, levelType type)
  	{
  		switch (component.type)
  		{
  		case SComponent.ESType.NAMESPACE_PREFIX_COMPONENT:
  			WriteNamespacePrefix(ref bitOffset, component.ord, component.lNID);
  			break;
  		case SComponent.ESType.ATTRIBUTE_COMPONENT:
  			WriteAttribute(ref bitOffset, component.ord, component.lNID);
  			break;
  		case SComponent.ESType.ORD_COMPONENT:
  			WriteOrdComponent(ref bitOffset, component.ord, type);
  			break;
  		}
  	}

  	public void WriteNamespacePrefix(ref ushort bitOffset, long ord, int lNID)
  	{
  		AppendBits(ref bitOffset, CStages.stages[CStages.NAMESPACE_PREFIX_STAGE].code, CStages.stages[CStages.NAMESPACE_PREFIX_STAGE].codeLength);
  		WriteOrdComponent(ref bitOffset, ord, levelType.FAKE_LEVEL);
  		WriteOrdComponent(ref bitOffset, lNID, levelType.CHILD_LEVEL);
  	}

  	public void WriteAttribute(ref ushort bitOffset, long ord, int lNID)
  	{
  		AppendBits(ref bitOffset, CStages.stages[CStages.ATTRIBUTE_STAGE].code, CStages.stages[CStages.ATTRIBUTE_STAGE].codeLength);
  		WriteOrdComponent(ref bitOffset, ord, levelType.FAKE_LEVEL);
  		WriteOrdComponent(ref bitOffset, lNID, levelType.CHILD_LEVEL);
  	}

  	public void WriteOrd(ref ushort bitOffset, long ord)
  	{
  		if (ord < CStages.stages[CStages.FIRST_NEGATIVE_STAGE].lowOrd || ord > CStages.stages[CStages.LAST_POSITIVE_STAGE].highOrd)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ResultTooLong, "WriteOrd"));
  		}
  		uint stage = CStages.GetStage(ord);
  		int num = (int)stage;
  		AppendBits(ref bitOffset, CStages.stages[num].code, CStages.stages[num].codeLength);
  		long num2 = ord - CStages.stages[num].lowOrd;
  		if (CStages.stages[num].ordLengthExpanded > 3)
  		{
  			num2 = (num2 & 7) | 8 | ((num2 & -8) << 1);
  			if (CStages.stages[stage].ordLengthExpanded > 5)
  			{
  				num2 = (num2 & 0x1F) | ((num2 & -32) << 1);
  				if (CStages.stages[stage].ordLengthExpanded > 9)
  				{
  					num2 = (num2 & 0x1FF) | ((num2 & -512) << 1);
  					if (CStages.stages[stage].ordLengthExpanded > 16)
  					{
  						num2 = (num2 & 0xFFFF) | ((num2 & -65536) << 1);
  						if (CStages.stages[stage].ordLengthExpanded > 38)
  						{
  							num2 = (num2 & 0x3FFFFFFFFFL) | ((num2 & -274877906944L) << 1);
  						}
  					}
  				}
  			}
  		}
  		AppendBits(ref bitOffset, (ulong)num2, CStages.stages[num].ordLengthExpanded);
  	}

  	public void WriteOrdComponent(ref ushort bitOffset, long ord, levelType type)
  	{
  		if (type == levelType.FAKE_LEVEL)
  		{
  			ord++;
  		}
  		WriteOrd(ref bitOffset, ord);
  		AppendBits(ref bitOffset, (ulong)((type == levelType.CHILD_LEVEL) ? 1 : 0), 1);
  	}

  	public void ParseTheBinary()
  	{
  		if (m_bitLength == 0)
  		{
  			m_level = 0u;
  		}
  		else
  		{
  			if ((m_parsedLevels >= 1 && m_parentBitLengthIndex == m_parsedLevels - 1 && m_bitOffsets[0] == 0) || m_parsedLevels == 5)
  			{
  				return;
  			}
  			m_level = 1u;
  			m_bitOffsets[0] = 0;
  			int num = 0;
  			byte b = CStages.decode[m_bytes[0]];
  			int num2 = -1;
  			int num3 = m_bitLength - 1;
  			int num4 = (m_bitLength + 7) / 8;
  			while (true)
  			{
  				WordTwoBytes wordTwoBytes = default(WordTwoBytes);
  				WordTwoBytes wordTwoBytes2 = default(WordTwoBytes);
  				if (b == byte.MaxValue)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  				}
  				if (b < CStages.FIRST_NEGATIVE_STAGE)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  				}
  				num2 += CStages.stages[b].totalLength;
  				if (num2 >= num3)
  				{
  					break;
  				}
  				int num5 = num2 >> 3;
  				wordTwoBytes.bytes.bHighByte = m_bytes[num5];
  				if (num5 + 1 < num4)
  				{
  					wordTwoBytes.bytes.bLowByte = m_bytes[num5 + 1];
  				}
  				else
  				{
  					wordTwoBytes.bytes.bLowByte = 0;
  				}
  				wordTwoBytes2.wTwoBytes = (ushort)(wordTwoBytes.wTwoBytes >> (~num2 & 7));
  				b = CStages.decode[wordTwoBytes2.bytes.bLowByte];
  				if ((wordTwoBytes2.wTwoBytes & 0x100) != 0)
  				{
  					num++;
  					if (num == 5)
  					{
  						num = 0;
  						m_level += 5u;
  					}
  					m_bitOffsets[num] = (ushort)(num2 + 1);
  				}
  			}
  			if (num2 != num3)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  			}
  			m_level += (uint)num;
  			m_parsedLevels = Math.Min(m_level, 5u);
  			m_parentBitLengthIndex = (uint)num;
  		}
  	}

  	public override bool Equals(object obj)
  	{
  		if (obj is OrdPath ordPath)
  		{
  			if (m_subType == ordPath.m_subType && m_bitLength == ordPath.m_bitLength)
  			{
  				return OrdPathUtil.BitCompare(m_bytes, ordPath.m_bytes, m_bitLength) == CompareBMP.x_cmpEq;
  			}
  			return false;
  		}
  		return false;
  	}

  	public override int GetHashCode()
  	{
  		return ((((((-563465607 * -1521134295 + m_subType.GetHashCode()) * -1521134295 + EqualityComparer<byte[]>.Default.GetHashCode(m_bytes)) * -1521134295 + m_bitLength.GetHashCode()) * -1521134295 + m_level.GetHashCode()) * -1521134295 + m_parsedLevels.GetHashCode()) * -1521134295 + m_parentBitLengthIndex.GetHashCode()) * -1521134295 + EqualityComparer<ushort[]>.Default.GetHashCode(m_bitOffsets);
  	}
  }
  [StructLayout(LayoutKind.Explicit, Pack = 8)]
  internal struct WordTwoBytes
  {
  	public struct TwoBytes
  	{
  		public byte bLowByte;

  		public byte bHighByte;
  	}

  	[FieldOffset(0)]
  	public ushort wTwoBytes;

  	[FieldOffset(0)]
  	public TwoBytes bytes;
  }
  internal struct OrdPathMark
  {
  	public ushort m_usBitLength;
  }
  internal enum CompareBMP
  {
  	x_cmpEq,
  	x_cmpGt,
  	x_cmpLt
  }
  [Serializable]
  [CLSCompliant(true)]
  public class HierarchyIdException : Exception
  {
  	protected HierarchyIdException(SerializationInfo info, StreamingContext context)
  		: base(info, context)
  	{
  	}

  	public HierarchyIdException(string message, Exception innerException)
  		: base(message, innerException)
  	{
  	}

  	public HierarchyIdException(string message)
  		: base(message)
  	{
  	}

  	public HierarchyIdException()
  	{
  	}
  }
  internal static class OrdPathUtil
  {
  	internal static CompareBMP BitCompare(byte[] bytes1, byte[] bytes2, uint bitLength)
  	{
  		if (bitLength == 0)
  		{
  			return CompareBMP.x_cmpEq;
  		}
  		uint num = bitLength / 8;
  		int num2 = memcmp(bytes1, bytes2, num);
  		if (num2 < 0)
  		{
  			return CompareBMP.x_cmpLt;
  		}
  		if (num2 > 0)
  		{
  			return CompareBMP.x_cmpGt;
  		}
  		int num3 = 255 << (int)(8 - bitLength % 8);
  		int num4 = bytes1[num] & num3;
  		int num5 = bytes2[num] & num3;
  		if (num4 < num5)
  		{
  			return CompareBMP.x_cmpLt;
  		}
  		if (num4 > num5)
  		{
  			return CompareBMP.x_cmpGt;
  		}
  		return CompareBMP.x_cmpEq;
  	}

  	internal static int memcmp(byte[] arr1, byte[] arr2, uint length)
  	{
  		for (uint num = 0u; num < length; num++)
  		{
  			if (arr1[num] < arr2[num])
  			{
  				return -1;
  			}
  			if (arr1[num] > arr2[num])
  			{
  				return 1;
  			}
  		}
  		return 0;
  	}
  }
  internal struct Stage
  {
  	public ushort ordLength;

  	public ushort ordLengthExpanded;

  	public ushort code;

  	public ushort codeLength;

  	public ushort totalLength;

  	public long highOrd;

  	public long lowOrd;
  }
  [StructLayout(LayoutKind.Sequential, Size = 1)]
  internal struct CStages
  {
  	public enum ECodeBits
  	{
  		MIN_CODEBITS = 2,
  		MAX_CODEBITS = 8,
  		INVALID_DECODE = 255
  	}

  	public static readonly ushort N_STAGES;

  	public static readonly ushort NAMESPACE_PREFIX_STAGE;

  	public static readonly ushort ATTRIBUTE_STAGE;

  	public static readonly ushort FIRST_NEGATIVE_STAGE;

  	public static readonly ushort FIRST_POSITIVE_STAGE;

  	public static readonly ushort LAST_POSITIVE_STAGE;

  	public static readonly Stage[] stages;

  	public static readonly byte[] decode;

  	static CStages()
  	{
  		N_STAGES = 15;
  		NAMESPACE_PREFIX_STAGE = 0;
  		ATTRIBUTE_STAGE = 1;
  		FIRST_NEGATIVE_STAGE = 2;
  		FIRST_POSITIVE_STAGE = 7;
  		LAST_POSITIVE_STAGE = 14;
  		stages = new Stage[15]
  		{
  			new Stage
  			{
  				ordLength = 0,
  				ordLengthExpanded = 0,
  				code = 2,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 0,
  				ordLengthExpanded = 0,
  				code = 3,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 48,
  				ordLengthExpanded = 53,
  				code = 4,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 32,
  				ordLengthExpanded = 36,
  				code = 5,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 12,
  				ordLengthExpanded = 15,
  				code = 6,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 6,
  				ordLengthExpanded = 8,
  				code = 2,
  				codeLength = 4,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 3,
  				ordLengthExpanded = 3,
  				code = 7,
  				codeLength = 5,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 2,
  				ordLengthExpanded = 2,
  				code = 1,
  				codeLength = 2,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 2,
  				ordLengthExpanded = 2,
  				code = 4,
  				codeLength = 3,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 3,
  				ordLengthExpanded = 3,
  				code = 5,
  				codeLength = 3,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 6,
  				ordLengthExpanded = 8,
  				code = 6,
  				codeLength = 3,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 10,
  				ordLengthExpanded = 13,
  				code = 14,
  				codeLength = 4,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 12,
  				ordLengthExpanded = 15,
  				code = 30,
  				codeLength = 5,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 32,
  				ordLengthExpanded = 36,
  				code = 62,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			},
  			new Stage
  			{
  				ordLength = 48,
  				ordLengthExpanded = 53,
  				code = 63,
  				codeLength = 6,
  				totalLength = 0,
  				highOrd = 0L,
  				lowOrd = 0L
  			}
  		};
  		decode = new byte[256];
  		for (int i = FIRST_NEGATIVE_STAGE; i <= LAST_POSITIVE_STAGE; i++)
  		{
  			stages[i].totalLength = (ushort)(stages[i].codeLength + stages[i].ordLengthExpanded + 1);
  		}
  		stages[FIRST_POSITIVE_STAGE].lowOrd = 0L;
  		stages[FIRST_POSITIVE_STAGE].highOrd = (1 << (int)stages[FIRST_POSITIVE_STAGE].ordLength) - 1;
  		for (int j = FIRST_POSITIVE_STAGE + 1; j < N_STAGES; j++)
  		{
  			stages[j].lowOrd = stages[j - 1].lowOrd + (1L << (int)stages[j - 1].ordLength);
  			stages[j].highOrd = stages[j].lowOrd + (1L << (int)stages[j].ordLength) - 1;
  		}
  		for (int num = FIRST_POSITIVE_STAGE - 1; num >= FIRST_NEGATIVE_STAGE; num--)
  		{
  			stages[num].lowOrd = stages[num + 1].lowOrd - (1L << (int)stages[num].ordLength);
  			stages[num].highOrd = stages[num + 1].lowOrd - 1;
  		}
  		for (int k = 0; k < 256; k++)
  		{
  			decode[k] = byte.MaxValue;
  		}
  		for (int l = 0; l < N_STAGES; l++)
  		{
  			int num2 = 8 - stages[l].codeLength;
  			int num3 = 1 << num2;
  			for (int m = 0; m < num3; m++)
  			{
  				decode[(stages[l].code << num2) | m] = (byte)l;
  			}
  		}
  	}

  	public static ushort GetStage(long ord)
  	{
  		ushort num = FIRST_POSITIVE_STAGE;
  		while (ord > stages[num].highOrd)
  		{
  			num++;
  		}
  		while (ord < stages[num].lowOrd)
  		{
  			num--;
  		}
  		return num;
  	}
  }
  internal class XmlIdGenerator
  {
  	private struct Ord
  	{
  		public long ord;

  		public ushort bitOffset;
  	}

  	private readonly OrdPath m_ordpathCurrent = new OrdPath();

  	private ushort m_ordcount;

  	private long m_rightLimit;

  	private static readonly int x_cMAX_XMLDT_Depth = 128;

  	private Ord[] m_ords;

  	private OrdPathMark m_omParent;

  	private bool m_fFakeLevelGenerated;

  	private long m_rightLimit2;

  	private bool m_fHaveNextID;

  	public XmlIdGenerator()
  	{
  		m_ords = new Ord[x_cMAX_XMLDT_Depth + 1];
  	}

  	public void Init(OrdPath pordpathParent, OrdPath pordpathLeft, OrdPath pordpathRight)
  	{
  		bool flag = false;
  		bool flag2 = false;
  		if (pordpathLeft != null && pordpathLeft.IsValid())
  		{
  			if (pordpathParent == null)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  			}
  			if (!pordpathParent.IsAncestorOf(pordpathLeft, fSelfIsAncestor: false))
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.NotAChild, "child1", pordpathLeft, pordpathParent));
  			}
  			ushort bitOffset = pordpathParent.m_bitLength;
  			SComponent component = default(SComponent);
  			OrdPath.levelType type = OrdPath.levelType.CHILD_LEVEL;
  			pordpathLeft.ExtractComponent(ref bitOffset, ref component, ref type);
  			flag = true;
  		}
  		if (pordpathRight != null && pordpathRight.IsValid())
  		{
  			if (pordpathParent == null)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  			}
  			if (!pordpathParent.IsAncestorOf(pordpathRight, fSelfIsAncestor: false))
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.NotAChild, "child2", pordpathRight, pordpathParent));
  			}
  			ushort bitOffset2 = pordpathParent.m_bitLength;
  			SComponent component2 = default(SComponent);
  			OrdPath.levelType type2 = OrdPath.levelType.CHILD_LEVEL;
  			pordpathRight.ExtractComponent(ref bitOffset2, ref component2, ref type2);
  			flag2 = true;
  		}
  		m_rightLimit = CStages.stages[CStages.LAST_POSITIVE_STAGE].highOrd + 1;
  		m_ordcount = 0;
  		OrdPath.levelType type3 = OrdPath.levelType.CHILD_LEVEL;
  		OrdPath.levelType type4 = OrdPath.levelType.CHILD_LEVEL;
  		ushort bitOffset3 = 0;
  		ushort bitOffset4 = 0;
  		long ord = 0L;
  		long ord2 = 0L;
  		if (flag && flag2)
  		{
  			bitOffset3 = (bitOffset4 = pordpathParent.m_bitLength);
  			ushort bitOffset5;
  			while (true)
  			{
  				bitOffset5 = bitOffset3;
  				pordpathLeft.ExtractOrdComponentFake(pordpathParent, fLeft: true, ref bitOffset3, ref ord, ref type3);
  				pordpathRight.ExtractOrdComponentFake(pordpathParent, fLeft: false, ref bitOffset4, ref ord2, ref type4);
  				if (ord != ord2 || type3 != type4)
  				{
  					break;
  				}
  				if (type3 == OrdPath.levelType.CHILD_LEVEL)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ChildOrder, pordpathLeft, pordpathRight));
  				}
  			}
  			m_ordpathCurrent.CopyPropertiesFrom(pordpathLeft);
  			if (ord > ord2)
  			{
  				throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ChildOrder, pordpathLeft, pordpathRight));
  			}
  			if (ord == ord2)
  			{
  				if (type3 == OrdPath.levelType.FAKE_LEVEL)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ChildOrder, pordpathLeft, pordpathRight));
  				}
  				m_ordpathCurrent.WriteOrdComponent(ref bitOffset5, ord, OrdPath.levelType.FAKE_LEVEL);
  				pordpathRight.ExtractOrdComponentFake(pordpathParent, fLeft: false, ref bitOffset4, ref ord2, ref type4);
  				m_ords[0].ord = ord2 - 2;
  				m_ords[0].bitOffset = bitOffset5;
  				m_rightLimit = ord2;
  			}
  			else if (ord2 > ord + 1)
  			{
  				m_ords[0].ord = ord;
  				m_ords[0].bitOffset = bitOffset5;
  				m_rightLimit = ord2;
  			}
  			else
  			{
  				m_ordpathCurrent.WriteOrdComponent(ref bitOffset5, ord, OrdPath.levelType.FAKE_LEVEL);
  				if (type3 == OrdPath.levelType.FAKE_LEVEL)
  				{
  					pordpathLeft.ExtractOrdComponentFake(pordpathParent, fLeft: true, ref bitOffset3, ref ord, ref type3);
  					m_ords[0].ord = ord;
  				}
  				else
  				{
  					m_ords[0].ord = 0L;
  				}
  				m_ords[0].bitOffset = bitOffset5;
  			}
  		}
  		else if (flag)
  		{
  			m_ordpathCurrent.CopyPropertiesFrom(pordpathParent);
  			bitOffset3 = pordpathParent.m_bitLength;
  			pordpathLeft.ExtractOrdComponentFake(pordpathParent, fLeft: true, ref bitOffset3, ref ord, ref type3);
  			m_ords[0].ord = ord;
  			m_ords[0].bitOffset = pordpathParent.m_bitLength;
  		}
  		else if (flag2)
  		{
  			m_ordpathCurrent.CopyPropertiesFrom(pordpathParent);
  			bitOffset4 = pordpathParent.m_bitLength;
  			pordpathRight.ExtractOrdComponentFake(pordpathParent, fLeft: false, ref bitOffset4, ref ord2, ref type4);
  			m_ords[0].ord = ord2 - 2;
  			m_ords[0].bitOffset = pordpathParent.m_bitLength;
  			m_rightLimit = ord2;
  		}
  		else
  		{
  			if (pordpathParent != null)
  			{
  				m_ordpathCurrent.CopyPropertiesFrom(pordpathParent);
  				m_ords[0].bitOffset = pordpathParent.m_bitLength;
  			}
  			else
  			{
  				m_ordpathCurrent.SetToRoot();
  				m_ords[0].bitOffset = 0;
  			}
  			m_ords[0].ord = 0L;
  		}
  		while (pordpathRight != null && pordpathRight.m_bitLength != bitOffset4)
  		{
  			pordpathRight.ExtractOrdComponentFake(pordpathParent, fLeft: false, ref bitOffset4, ref ord2, ref type4);
  		}
  		while (pordpathLeft != null && pordpathLeft.m_bitLength != bitOffset3)
  		{
  			pordpathLeft.ExtractOrdComponentFake(pordpathParent, fLeft: true, ref bitOffset3, ref ord, ref type3);
  		}
  		m_ordcount = 1;
  		if (pordpathParent == null)
  		{
  			m_ordpathCurrent.m_level = 1u;
  		}
  		else
  		{
  			m_ordpathCurrent.m_level = pordpathParent.GetLevel() + 1;
  			m_omParent = pordpathParent.GetMark();
  		}
  		m_ordpathCurrent.m_parsedLevels = 0u;
  		m_fFakeLevelGenerated = false;
  		m_fHaveNextID = false;
  	}

  	public OrdPath GetNextID()
  	{
  		if (m_fHaveNextID)
  		{
  			m_fHaveNextID = false;
  		}
  		else
  		{
  			if (m_ordcount == 1 && m_ords[0].ord + 1 == m_rightLimit)
  			{
  				m_ordpathCurrent.WriteOrdComponent(ref m_ords[0].bitOffset, m_ords[0].ord, OrdPath.levelType.FAKE_LEVEL);
  				m_ords[0].ord = 0L;
  				m_rightLimit2 = m_rightLimit;
  				m_rightLimit = CStages.stages[CStages.LAST_POSITIVE_STAGE].highOrd + 1;
  			}
  			else
  			{
  				m_ords[m_ordcount - 1].ord++;
  				if (m_ords[m_ordcount - 1].ord > CStages.stages[CStages.LAST_POSITIVE_STAGE].highOrd)
  				{
  					throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpath));
  				}
  			}
  			ushort bitOffset = m_ords[m_ordcount - 1].bitOffset;
  			m_ordpathCurrent.WriteOrdComponent(ref bitOffset, m_ords[m_ordcount - 1].ord, OrdPath.levelType.CHILD_LEVEL);
  			m_ordpathCurrent.m_bitLength = bitOffset;
  		}
  		return m_ordpathCurrent;
  	}
  }
  [CLSCompliant(true)]
  [SqlUserDefinedType(Format.UserDefined, IsByteOrdered = true, MaxByteSize = 892, Name = "SqlHierarchyId")]
  public struct SqlHierarchyId : IBinarySerialize, INullable, IComparable
  {
  	private OrdPath ordpath;

  	private static readonly SqlHierarchyId sm_null;

  	public static SqlHierarchyId Null
  	{
  		[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  		get
  		{
  			return sm_null;
  		}
  	}

  	public bool IsNull
  	{
  		[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  		get
  		{
  			return ordpath == null;
  		}
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public static SqlHierarchyId GetRoot()
  	{
  		SqlHierarchyId result = default(SqlHierarchyId);
  		result.ordpath = new OrdPath();
  		return result;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = true, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public SqlHierarchyId GetDescendant(SqlHierarchyId child1, SqlHierarchyId child2)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		XmlIdGenerator xmlIdGenerator = new XmlIdGenerator();
  		xmlIdGenerator.Init(ordpath, child1.ordpath, child2.ordpath);
  		SqlHierarchyId result = default(SqlHierarchyId);
  		result.ordpath = xmlIdGenerator.GetNextID();
  		return result;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public SqlBoolean IsDescendantOf(SqlHierarchyId parent)
  	{
  		if (IsNull || parent.IsNull)
  		{
  			return SqlBoolean.Null;
  		}
  		return parent.ordpath.IsAncestorOf(ordpath, fSelfIsAncestor: true);
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public SqlInt16 GetLevel()
  	{
  		if (IsNull)
  		{
  			return SqlInt16.Null;
  		}
  		return (short)ordpath.GetLevel();
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public SqlHierarchyId GetAncestor(int n)
  	{
  		if (IsNull)
  		{
  			return Null;
  		}
  		if (n < 0)
  		{
  			throw new ArgumentOutOfRangeException(string.Format(ordpathres.Culture, ordpathres.NegativeInput));
  		}
  		SqlHierarchyId result = default(SqlHierarchyId);
  		result.ordpath = new OrdPath(ordpath);
  		uint byteLength = (uint)(result.ordpath.m_bitLength + 7) / 8u;
  		if (OrdPath.SetToAncestor(result.ordpath.m_bytes, ref byteLength, (uint)n))
  		{
  			result.ordpath.ComputeBitLength(byteLength);
  			if (result.ordpath.m_level != uint.MaxValue)
  			{
  				result.ordpath.m_level -= (uint)n;
  			}
  			result.ordpath.m_parsedLevels = 0u;
  		}
  		else
  		{
  			result.ordpath = null;
  		}
  		return result;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public SqlHierarchyId GetReparentedValue(SqlHierarchyId oldRoot, SqlHierarchyId newRoot)
  	{
  		if (IsNull || oldRoot.IsNull || newRoot.IsNull)
  		{
  			return Null;
  		}
  		if (!IsDescendantOf(oldRoot))
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ReparentArgs, oldRoot, this));
  		}
  		SqlHierarchyId result = default(SqlHierarchyId);
  		byte[] bytes = ordpath.m_bytes;
  		_ = oldRoot.ordpath.m_bytes;
  		byte[] bytes2 = newRoot.ordpath.m_bytes;
  		int bitLength = ordpath.m_bitLength;
  		int num = (7 + bitLength) / 8;
  		int bitLength2 = oldRoot.ordpath.m_bitLength;
  		int num2 = (7 + bitLength2) / 8;
  		int bitLength3 = newRoot.ordpath.m_bitLength;
  		int num3 = (7 + bitLength3) / 8;
  		int num4 = bitLength - bitLength2 + bitLength3;
  		int num5 = (7 + num4) / 8;
  		if (num5 > 892)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.ResultTooLong, "GetReparentedValue"));
  		}
  		byte[] array = new byte[num5];
  		Array.Copy(bytes2, array, num3);
  		int num6 = num3 - 1;
  		int num7 = num2 - 1;
  		int num8 = num3 * 8 - bitLength3;
  		int num9 = num2 * 8 - bitLength2;
  		while (num6 < num5)
  		{
  			byte b = 0;
  			if (num7 >= 0)
  			{
  				b = (byte)(bytes[num7] << 8 - num9);
  			}
  			if (num7 + 1 < num)
  			{
  				b |= (byte)(bytes[num7 + 1] >> num9);
  			}
  			if (num6 >= 0)
  			{
  				array[num6] |= (byte)(b >> 8 - num8);
  			}
  			if (num6 + 1 < num5)
  			{
  				array[num6 + 1] = (byte)(b << num8);
  			}
  			num6++;
  			num7++;
  		}
  		result.ordpath = new OrdPath(array, (uint)num5);
  		return result;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	private SqlHierarchyId DescendantLimit()
  	{
  		SqlHierarchyId result = default(SqlHierarchyId);
  		result.ordpath = new OrdPath(ordpath);
  		result.ordpath.SetToDescendantLimit();
  		return result;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public static SqlHierarchyId Parse(SqlString input)
  	{
  		if (input.IsNull)
  		{
  			return Null;
  		}
  		string value = input.Value;
  		if (value.Length == 0 || value[value.Length - 1] != '/' || value[0] != '/')
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, input));
  		}
  		value = value.Substring(0, value.Length - 1);
  		if (value == "/")
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.BadOrdpathString, input));
  		}
  		if (value.Length != 0)
  		{
  			value = value.Substring(1, value.Length - 1);
  		}
  		SqlHierarchyId result = default(SqlHierarchyId);
  		result.ordpath = new OrdPath(value);
  		return result;
  	}

  	public static SqlBoolean operator ==(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath == hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public static SqlBoolean operator !=(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath != hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public static SqlBoolean operator <(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath < hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public static SqlBoolean operator >(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath > hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public static SqlBoolean operator <=(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath <= hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public static SqlBoolean operator >=(SqlHierarchyId hid1, SqlHierarchyId hid2)
  	{
  		if (!hid1.IsNull && !hid2.IsNull)
  		{
  			return hid1.ordpath >= hid2.ordpath;
  		}
  		return SqlBoolean.Null;
  	}

  	public int CompareTo(object obj)
  	{
  		if (obj is SqlHierarchyId)
  		{
  			return CompareTo((SqlHierarchyId)obj);
  		}
  		throw new ArgumentException(string.Format(ordpathres.Culture, ordpathres.ArgumentNotSqlHierarchyId));
  	}

  	public int CompareTo(SqlHierarchyId hid)
  	{
  		if (IsNull)
  		{
  			if (!hid.IsNull)
  			{
  				return -1;
  			}
  			return 0;
  		}
  		if (hid.IsNull)
  		{
  			return 1;
  		}
  		if (this < hid)
  		{
  			return -1;
  		}
  		if (this > hid)
  		{
  			return 1;
  		}
  		return 0;
  	}

  	public override bool Equals(object obj)
  	{
  		if (obj is SqlHierarchyId sqlHierarchyId)
  		{
  			if (IsNull && sqlHierarchyId.IsNull)
  			{
  				return true;
  			}
  			return (this == sqlHierarchyId).IsTrue;
  		}
  		return false;
  	}

  	public override int GetHashCode()
  	{
  		if (IsNull)
  		{
  			return 0;
  		}
  		uint byteLength = 0u;
  		byte[] binary = ordpath.GetBinary(ref byteLength);
  		int num = 0;
  		for (uint num2 = 0u; num2 < byteLength; num2++)
  		{
  			num ^= binary[num2];
  		}
  		return num;
  	}

  	[SqlMethod(DataAccess = DataAccessKind.None, SystemDataAccess = SystemDataAccessKind.None, InvokeIfReceiverIsNull = false, OnNullCall = false, IsDeterministic = true, IsPrecise = true, IsMutator = false)]
  	public override string ToString()
  	{
  		if (IsNull)
  		{
  			return "NULL";
  		}
  		return ordpath.ToString();
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Read(BinaryReader r)
  	{
  		if (!IsNull)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.NonNullInput, "Read", "this"));
  		}
  		if (r == null)
  		{
  			throw new ArgumentNullException(string.Format(ordpathres.Culture, ordpathres.NullRefInput, "Read", "reader"));
  		}
  		byte[] array = r.ReadBytes(893);
  		if (array.Length > 892)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.OrdpathTooLong, 892));
  		}
  		ordpath = new OrdPath(array, (uint)array.Length);
  	}

  	[SqlMethod(IsDeterministic = true, IsPrecise = true)]
  	public void Write(BinaryWriter w)
  	{
  		if (IsNull)
  		{
  			throw new HierarchyIdException(string.Format(ordpathres.Culture, ordpathres.NullInput, "Write", "this"));
  		}
  		if (w == null)
  		{
  			throw new ArgumentNullException(string.Format(ordpathres.Culture, ordpathres.NullRefInput, "Write", "writer"));
  		}
  		w.Write(ordpath.m_bytes, 0, (ordpath.m_bitLength + 7) / 8);
  	}
  }
databaseId: database.adventureworks2022
schemaVersion: 
lastSchemaModificationAt: 2024-12-16T15:41:06.5500000
script: |+
  CREATE ASSEMBLY [Microsoft.SqlServer.Types]
  FROM
  0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000
  000504500004C0103002B7241630000000000000000E00022200B0130000050050000200000000000000E67050000200000008005000000001000200000001000000400000000000000060000000000000000C00500001000006F34060003006085000010000010000000001000001000000000000010000000000000000000
  0000BC6605004F000000008005008C040000000000000000000000800500A027000000A005000C000000846505001C0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002E746578740
  0000094480500002000000050050000100000000000000000000000000000200000602E727372630000008C040000008005000010000000600500000000000000000000000000400000402E72656C6F6300000C00000000A0050000100000007005000000000000000000000000004000004200000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  0000000000000000000000000000000000F0660500000000004800000002000500ACF50100102A03000900000000000000BC1F050048450000046505008000000000000000000000000000000000000000000000000000000000000000000000003E02037D5400000402047D550000042A7E027B54000004037B54000004330
  F027B55000004037B55000004FE012A162A2E0203280C00000616FE012A133002002E0000000100001103750C0000022C2403A50C0000020A027B54000004067B54000004330F027B55000004067B55000004FE012A162A42027B5400000469027B5500000469612A7A02037D5A00000402047D5B00000402057D5C00000402
  0E047D5D0000042A2202037D5E0000042A3E02037D5F00000402047D600000042A5A02037D6100000402047D6200000402057D630000042A3E02037D6400000402047D650000042A56027B65000004027B64000004027B640000045A5B2A56027B64000004027B65000004027B650000045A5B2A3A027B65000004027B64000
  0045B2A0000001330030079000000000000000203163108038D0C0000022B01147D660000040204163108048D100000022B01147D69000004020E041631090E048D610000012B01147D67000004020E051631090E058D610000012B01147D68000004020E061631090E068D0F0000022B01147D6B0000040205163108058D11
  0000022B01147D6A0000042A00000013300700BF0000000200001102FE151300000202177D6C00000402167D6D00000402177D6E000004037B5C000004282E00000A16FE010A037B5D000004282E00000A16FE010B02171717062D03162B0117072D03162B0117162818000006027B6600000416037B5A000004037B5B00000
  4730B000006A40C000002062C0E027B6700000416037B5C000004A1072C0E027B6800000416037B5D000004A1027B690000041616177312000006A410000002027B6A000004161615177313000006A4110000020228840000062A0013300700430000000000000002FE151300000202177D6C00000402167D6D00000402177D
  6E000004021616171616162818000006027B6A000004161515037313000006A4110000020228840000062AA602FE151300000202167D6C00000402167D6D00000402177D6E0000040203040516161628180000062AE202FE151300000202037D6600000402047D6900000402057D6A00000402167D6C00000402167D6D00000
  402177D6E0000040228840000062A000013300200480000000000000002FE151300000202037D66000004020E047D67000004020E057D6800000402047D6900000402057D6A00000402167D6C00000402167D6D00000402177D6E0000040228840000062A13300200500000000000000002FE151300000202037D6600000402
  0E047D67000004020E057D6800000402047D6900000402057D6A000004020E067D6B00000402167D6C00000402167D6D00000402177D6E0000040228840000062AAA02FE151300000202167D6C00000402167D6D00000402177D6E0000040203040516160E0428180000062AAE02FE151300000202167D6C00000402167D6D0
  0000402177D6E000004020304050E040E051628180000062AB202FE151300000202167D6C00000402167D6D00000402177D6E000004020304050E040E050E0628180000062A13300700630000000000000002FE151300000202177D6C00000402167D6D00000402177D6E000004021717171616162818000006027B66000004
  1603A40C000002027B690000041616177312000006A410000002027B6A000004161615177313000006A4110000020228840000062A00133002005500000003000011027B6A000004038F110000027B620000040A2B3B0317580B2B1A027B6A000004078F110000027B62000004063302072A0717580B0702287500000632DD0
  27B6A000004068F110000027B620000040A061533C1152A000000133002001900000004000011020328230000060A15062E040617592A02287500000617592A36027B6A00000403A3110000022A3A027B6A0000040304A4110000022A0000133002003D000000030000110228430000061D3332160A170B2B21027B6A000004
  078F110000027B620000042D0A0617580A06033302072A0717580B0702287500000632D6152A032A00000013300200240000000400001102287500000617590A2B040617590A0603310F020628250000067B620000040333E9062A36027B6900000403A3100000022A6A027B69000004020328250000067B610000040458A31
  00000022A3A027B690000040304A4100000022A36020328250000067B610000042A0000133002003D000000040000110317580A2B040617580A060228750000062F090206287A0000062DEA06022875000006320902282E00000617592A020628250000067B6100000417592A4E027B690000042D02162A027B690000048E69
  2A4A0203282D0000060203282C0000065917582A4A027B6B000004038F0F0000027B5E0000042A00133002005900000005000011027B6B0000042D02162A150A160B2B3F020728290000067B6000000419332C0207283900000617590C2B1C0617580A0206283000000628930000062C060817590C2B040818590C081630E00
  717580B070332BD0617580A062A000000133002005300000003000011027B6B0000042D02152A020328310000060A020328290000067B6000000419332C0203283900000617590B2B1C0206283000000628930000062C060717590B2B040718590B0617580A071630E00617590A062A4A027B69000004038F100000027B5F00
  00042A3A020304282A0000067B5F0000042AAA0302282E00000617592E16027B690000040317588F100000027B5F00000417592A02283700000617592A133003003400000004000011020328250000067B6100000404580A0602282E00000617592E110206175828290000067B5F00000417592A02283700000617592A4E027
  B660000042D02162A027B660000048E692A52020304283600000602030428340000065917582A4A02032835000006020328330000065917582A6E027B66000004020304282A0000067B5F0000040558A30C0000022A6A027B66000004020328290000067B5F0000040458A30C0000022A36027B6600000403A30C0000022A2A
  02283700000617FE012A133002002900000004000011027B670000042D02162A030A2B15027B670000040699282E00000A2D02172A0617580A060431E7162A2A027B6700000414FE032A133002002900000004000011027B680000042D02162A030A2B15027B680000040699282E00000A2D02172A0617580A060431E7162A2
  A027B6800000414FE032A36020328250000067B630000042A22021628420000062A1E027B6C0000042A2202037D6C0000042A2E0228430000061F0BFE012A1E027B6E0000042A2202037D6E0000042A1E027B6D0000042A2202037D6D0000042A0000133002003500000004000011160A2B26020628420000061E2E16020628
  420000061F092E0B020628420000061F0A3302172A0617580A0602287500000632D1162A000000133005005700000006000011036F2F00000A0A020617FE017D6E0000040604300406172F2F0E042C0772010000702B0572150000700B283000000A0507068C62000001048C62000001283100000A733200000A7A02030E041
  6FE010E0428500000062A00133004002C00000007000011036F2F00000A0A020617FE017D6E0000040618300406172F06733300000A7A02030416FE010428500000062A133004002900000007000011036F2F00000A0A020617FE017D6E0000040618300406172F06733300000A7A0203161628500000062A92031758100103
  02282E0000062F14027B69000004038F100000027B600000041933DE032A0000133003006009000008000011036F2F00000A0A02061A28950000067D6C00000402061F2028950000067D6D000004160B061E28950000062C04170B2B1F061F1028950000062C04180B2B11036F3400000A0B07162F06733300000A7A0207163
  108078D0C0000022B01147D66000004160D3898000000027B66000004098F0C000002036F3500000A7D54000004027B66000004098F0C000002036F3500000A7D55000004027B66000004098F0C0000027B54000004282E00000A2D48027B66000004098F0C0000027B55000004282E00000A2D30027B66000004098F0C0000
  027B54000004283600000A2D18027B66000004098F0C0000027B55000004283600000A2C06733300000A7A0917580D09073F61FFFFFF052C5A1613042B50027B6600000411048F0C0000027B54000004283700000A2300000000008056403022027B6600000411048F0C0000027B55000004283700000A2300000000806ECD4
  03606733300000A7A11041758130411040732AB061728950000062C2D02078D610000017D670000041613052B15027B670000041105036F3500000AA111051758130511050732E62B0702147D67000004061828950000062C2D02078D610000017D680000041613062B15027B680000041106036F3500000AA1110617581306
  11060732E62B0702147D68000004160C061E28950000062D0A061F1028950000062C3502178D100000027D69000004027B69000004168F10000002177D60000004027B69000004168F10000002167D5F0000043880010000036F3400000A13070716FE01110716FE012E06733300000A7A1107162F06733300000A7A0211071
  6310911078D100000022B01147D6900000415130816130938CD000000036F2F00000A130A027B6E0000042C15027B6900000411098F10000002177D600000042B5A027B6900000411098F10000002110A7D60000004027B6900000411098F100000027B600000042C15027B6900000411098F100000027B6000000419310673
  3300000A7A027B6900000411098F100000027B60000004193302170C027B6900000411098F10000002036F3400000A7D5F0000041108027B6900000411098F100000027B5F0000043206733300000A7A027B6900000411098F100000027B5F0000041308110917581309110911073F2AFFFFFF16130B2B2D027B69000004110
  B8F100000027B6000000418331202110B2839000006185D2D06733300000A7A110B1758130B110B110732CD11080228370000063206733300000A7A1107163119027B69000004168F100000027B5F0000042C06733300000A7A061E28950000062D0A061F1028950000062C6B02178D110000027D6A000004027B6A00000416
  8F11000002157D62000004027B6A000004168F11000002167D61000004061E28950000062C14027B6A000004168F11000002177D630000042B12027B6A000004168F11000002187D6300000402147D6B0000043831050000036F3400000A130C110C163006733300000A7A02110C8D110000027D6A000004027B6A000004168
  F11000002036F3400000A7D62000004027B6A000004168F11000002036F3400000A7D61000004027B6A000004168F11000002036F2F00000A7D630000040216287A000006130D027B6A000004168F110000027B61000004152E13027B6A000004168F110000027B610000042D3D027B6A000004168F110000027B6200000415
  3329027B6A000004168F110000027B630000041F0B3014027B6A000004168F110000027B63000004163006733300000A7A027B6A000004168F110000027B630000041F0B331E027B690000042D0B027B6600000414FE032B011704602C06733300000A7A027B6A000004168F110000027B6300000428940000062C14110C173
  30F0216287A0000062D06733300000A7A027B6E0000042C1A027B6A000004168F110000027B630000041D3106733300000A7A17130E38F8010000027B6A000004110E8F11000002036F3400000A7D62000004027B6A000004110E8F11000002036F3400000A7D61000004027B6A000004110E8F11000002036F2F00000A7D63
  000004110D02110E287A0000065F130D027B6A000004110E8F110000027B61000004152E28027B6A000004110E17598F110000027B61000004027B6A000004110E8F110000027B61000004302F027B6A000004110E8F110000027B6100000402282E0000062F15027B6A000004110E8F110000027B61000004152F067333000
  00A7A027B6A000004110E8F110000027B62000004163216027B6A000004110E8F110000027B62000004110E3206733300000A7A027B6A000004110E8F110000027B630000041F0B3015027B6A000004110E8F110000027B63000004163006733300000A7A027B6E0000042C1B027B6A000004110E8F110000027B630000041D
  3106733300000A7A027B6A000004027B6A000004110E8F110000027B620000048F110000027B63000004130F027B6A000004110E8F110000027B630000041310110F1D2E24110F1C33051110192E1A110F1B33051110182E10110F1A33051110172E06733300000A7A027B6A000004110E17598F110000027B6300000428940
  000062C2A02110E1759287A0000062D1E027B6A000004110E8F110000027B62000004110E17592E06733300000A7A110E1758130E110E110C3FFFFDFFFF110D027B6900000414FE012E06733300000A7A1613113898010000021111287A0000063A85010000021111287C0000062D18021111282C000006021111282D000006
  3106733300000A7A027B6A00000411118F110000027B63000004192E16027B6A00000411118F110000027B630000041F0A3347021111282D0000061312021111282C00000613132B26042C0A021113286B0000062D13052C0A021113286E0000062D06733300000A7A1113175813131113111231D438F1000000027B6A00000
  411118F110000027B630000041E3336021111282D000006021111282C000006331E027B69000004021111282C0000068F100000027B60000004183BAC000000733300000A7A027B6A00000411118F110000027B630000041F093333021111282D000006021111282C000006331B027B69000004021111282C0000068F100000
  027B60000004192E63733300000A7A027B6A00000411118F110000027B63000004182E15027B6A00000411118F110000027B63000004173333021111282D000006021111282C000006331B027B69000004021111282C0000068F100000027B60000004172E06733300000A7A1111175813111111110C3F5FFEFFFF082C09020
  328510000062B0702147D6B0000040228840000062A133003001301000009000011036F3400000A0A06163006733300000A7A0215284F0000060B170C02068D0F0000027D6B000004160D38B8000000080207283900000633190207284F0000060B0702282E0000063206733300000A7A170C027B6B000004098F0F00000203
  6F2F00000A7D5E000004027B6B000004098F0F0000027B5E0000041304110445040000001C0000002C00000002000000080000002B480817580C2B480818580C0802072839000006313A733300000A7A08173306733300000A7A0817580C2B2408173306733300000A7A0818580C0802072839000006310C733300000A7A733
  300000A7A0917580D09063F41FFFFFF0207284F00000602282E0000062F06733300000A7A08020728390000062E06733300000A7A2A00133003004E0300000A000011022884000006027B6E0000042C0903176F3800000A2B0703186F3800000A160A027B670000042C08061728960000060A027B680000042C080618289600
  00060A027B6C0000042C08061A28960000060A02284300000617331002287B0000062D08061E28960000060A022843000006183312022837000006183309061F1028960000060A0228490000062C09061F2028960000060A03066F3800000A027B660000042D03162B08027B660000048E690B061E28970000062C11061F102
  8970000062C0703076F3900000A160D2B3203027B66000004098F0C0000027B540000046F3A00000A03027B66000004098F0C0000027B550000046F3A00000A0917580D090732CA027B670000042C1F1613042B1503027B670000041104996F3A00000A11041758130411040732E6027B680000042C1F1613052B1503027B68
  0000041105996F3A00000A11051758130511050732E6027B690000042D03162B08027B690000048E690C061E289700000639DB010000061F10289700000639CE010000027B6A0000042D03162B08027B6A0000048E69130603086F3900000A027B6E00000439C100000016130716130838AB000000021108287A0000063A980
  000001902110828420000062E352B2503176F3800000A03027B6900000411078F100000027B5F0000046F3900000A1107175813071107021108282D00000631CF2B5803186F3800000A03027B6900000411078F100000027B5F0000046F3900000A1107175813072B2503166F3800000A03027B6900000411078F100000027B
  5F0000046F3900000A1107175813071107021108282D00000631CF110817581308110811063F4CFFFFFF2B401613092B3603027B6900000411098F100000027B600000046F3800000A03027B6900000411098F100000027B5F0000046F3900000A11091758130911090832C50311066F3900000A16130A2B4E03027B6A00000
  4110A8F110000027B620000046F3900000A03027B6A000004110A8F110000027B610000046F3900000A03027B6A000004110A8F110000027B630000046F3800000A110A1758130A110A110632AC027B6B0000042C3D03027B6B0000048E696F3900000A16130B2B1E03027B6B000004110B8F0F0000027B5E0000046F380000
  0A110B1758130B110B027B6B0000048E6932D62A00001330020052000000030000110228790000062C02162A0228430000061D332C160A170B2B1B027B6A000004078F110000027B620000042D040617580A0717580B0702287500000632DC062A02287D0000062C0902287500000617592A172A72031733100228750000061
  733070271130000022A020328690000062A4E02287B0000062D0902282E00000617592A162A4602287B0000062D0702282E0000062A162A22020328630000062A2A0203175928630000062A22021628630000062A0000133004005A0000000B00001102031759283C0000060A027B670000042D0B23000000000000F8FF2B0A
  027B67000004031759990B027B680000042D0B23000000000000F8FF2B0A027B68000004031759990C067B54000004067B55000004070873100000062A220217285A0000062A3602022837000006285A0000062A4A027B66000004168F0C0000027B540000042A4A027B66000004168F0C0000027B550000042A26027B67000
  00416992A26027B6800000416992A0013300300700000000300001102284300000618330A0203175928670000062A0228430000061E330C0218035A185928680000062A160A160B2B1C0207283000000628930000062C060617580A2B040618580A0717580B0703175932DE02031759283000000628930000062C0802062867
  0000062A020628680000062A13300500550000000000000002286F000006040F01286F000006050E04283B00000A0F0128720000062C16022872000006040F012872000006050E04283B00000A0F0128730000062C16022873000006040F012873000006050E04283B00000A2A000000133002002F0000000C0000110203282
  90000067B600000040A06172E0606182E0A2B10020328640000062A020328650000062A020328660000062A00133009007C0000000D00001102160328380000060A020328290000067B5F0000040B120206171702070706581759283E0000062D03162B01060207070658175928400000062D03162B01062820000006020807
  1606286200000612021616177312000006282B0000061202161615187313000006282600000612020228440000062845000006082A133009007C0000000D00001102160328380000060A020328290000067B5F0000040B120206171702070706581759283E0000062D03162B01060207070658175928400000062D03162B010
  628200000060208071606286200000612021616187312000006282B00000612021616151E7313000006282600000612020228440000062845000006082A13300900B80000000E00001102160328380000060A020328290000067B5F0000040B020328310000060C02032832000006085917580D120406171702070706581759
  283E0000062D03162B01060207070658175928400000062D03162B0106092821000006021104020328290000067B5F000004160628620000060916311502287400000608120428740000061609283B00000A12041616197312000006282B00000612041616151F0973130000062826000006120402284400000628450000061
  1042A133009005D0000000F00001112001817170203031758283E0000062D03162B0118020303175828400000062D03162B011828200000060206031618286200000612001616177312000006282B000006120016161518731300000628260000061200172845000006062A000000133009005D0000000F0000111200191717
  0203031858283E0000062D03162B0119020303185828400000062D03162B011928200000060206031619286200000612001616187312000006282B00000612001616151E731300000628260000061200172845000006062A00000013300800F301000010000011020328270000060B0207287A0000062C210207287C0000062
  D181200020728250000067B63000004281A00000638B2010000020728240000060C08075917580D020728250000067B6100000413041104153B070100000208282D000006130511051104591758130602110428290000067B5F0000041307110502282E00000617592E13021105175828290000067B5F00000417592B080228
  37000006175913081108110759175813090211042831000006130A0211052832000006110A591758130B120011091106090211071108283E0000062D03162B021109021107110828400000062D03162B021109110B282100000602061107161109286200000616130C2B36067B69000004110C02110C1104582829000006A41
  0000002067B69000004110C8F100000027C5F000004254A11075954110C1758130C110C110632C4110B163123022874000006110A1200287400000616110B283B00000A2B0A1200161609281B00000616130D2B61067B6A000004110D02110D07582825000006A411000002067B6A000004110D8F110000027B61000004152E
  18067B6A000004110D8F110000027C61000004254A11045954067B6A000004110D8F110000027C62000004254A075954110D1758130D110D09329A067B6A000004168F11000002157D6200000412000228440000062845000006062A0013300200280000001100001102287B00000616FE010A160B2B0C0207286B0000060A0
  717580B062C090702282E00000632E8062AB2020328390000061731200202032833000006283C0000060202032835000006283C000006280C0000062A162AF20203287A0000062D3102030428380000061731260203040203042834000006283A0000060203040203042836000006283A000006280C0000062A162A00001330
  0200280000000400001102287B0000062C02162A160A2B0F0206286E0000062D02162A0617580A0602282E00000632E8172A13300300B30000001200001102032839000006173002162A0202032833000006283C0000060A0202032835000006283C0000060B067B54000004077B540000043334067B55000004077B5500000
  42E6D067B55000004077B5500000459230000000000807640283C00000A2300000000000000002E47067B540000042300000000008056403311077B540000042300000000008056402E25067B540000042300000000008056C03312077B540000042300000000008056C0FE012A162A172A1E027B660000042A1E027B690000
  042A1E027B6A0000042A1E027B670000042A1E027B680000042A1E027B6B0000042A4E027B6A0000042D02162A027B6A0000048E692A760228720000062C13027B660000042D02162A027B660000048E692A162A760228730000062C13027B660000042D02162A027B660000048E692A162A760228740000062C13027B6B000
  0042D02162A027B6B0000048E692A162A5202287B0000062C0A02287D00000616FE012A162A42020328250000067B6100000415FE012A520228370000062D0A02284600000616FE012A162A7E0302287500000617592E120203175828250000067B6200000403FE012A162A220216287C0000062A2A02288000000618FE012A
  133003006F00000013000011233A8C30E28E79453E0A024F044F332C024F283700000A044F283700000A58065A0B072300000000000000003302060B02024F07595704044F075857034F054F332C034F283700000A054F283700000A58065A0C082300000000000000003302060C03034F08595705054F0858572A001330020
  04C0000000500001102287B0000062C02152A0228460000062C02182A0228430000061D2E08021628810000062A150A160B2B12020728810000060C06082F02080A0717580B070228750000062F04061833E1062A13300200640000000000000002032842000006172E0A020328420000061A3302162A02032842000006182E
  1F020328420000061B2E15020328420000061E2E0B020328420000061F093302172A02032842000006192E15020328420000061C2E0B020328420000061F0A3302182A152A13300300960000000400001102283700000617331E030216283C0000067B5400000457040216283C0000067B5500000457172A0228800000062C0
  2162A170A2B3A0206283C0000067B540000040216283C0000067B54000004331A0206283C0000067B550000040216283C0000067B550000042E02162A0617580A0602283700000632BD030216283C0000067B5400000457040216283C0000067B5500000457172A000013300700AD0000000F0000111200FE15130000021200
  1B17171616162818000006067B66000004160203730B000006A40C000002067B66000004170403730B000006A40C000002067B66000004180405730B000006A40C000002067B66000004190205730B000006A40C000002067B660000041A0203730B000006A40C000002067B690000041616177312000006A410000002067B6
  A000004161615197313000006A41100000212001728450000061200172848000006062A062A82030228430000066F0200000602032886000006036F09000006036F0A0000062A13300400E501000014000011160A0228430000060B071759450B000000010000001C000000310000004B0000008D000000C9000000F5000000
  77010000890100009D010000A70100002A022837000006163E9A010000021603288F000006036F080000062A02282E000006163E7F01000002160328870000062A160C2B0C02080328870000060817580C0802282E00000632EB2A170D2B3403176F020000060209287A0000062D1A02020209282C000006283300000603288
  F000006036F08000006036F090000060917580D0902287500000632C32A1713042B2C03186F02000006021104287A0000062D0F02021104282C000006032887000006036F09000006110417581304110402287500000632CA2A1713052B1C03196F02000006021105032888000006036F090000061105175813051105022875
  00000632DA2A1613061713072B5402110728250000067B6200000413082B15036F0900000602110628250000067B6200000413061106110833E5110713060302110728250000067B630000046F020000060211070306288C0000060A110717581307110702287500000632A22B15036F0900000602110628250000067B62000
  004130611062DE72A02282E00000616312702160328890000062A02282E00000616311502160306288A0000060A2A02160306288B0000060A2A000000133003003500000003000011020328330000060A020328350000060B020604288F0000060617580A2B0C02060428900000060617580A060731F0046F080000062A0000
  00133003002C000000030000110203287A0000062D220203282D0000060A0203282C0000060B2B0C02070428870000060717580B070631F02A133003003500000003000011020328330000060A020328350000060B020604288F0000060617580A2B0C02060428910000060618580A060731F0046F080000062A00000013300
  300CF00000015000011050A020328330000060B020328350000060C04027B6B000004068F0F0000027B5E0000046F06000006020704288F0000060717580B3886000000027B6B000004068F0F0000027B5E0000040D094504000000020000002F000000020000002F0000002B581809331B06052E1704027B6B000004068F0F
  0000027B5E0000046F0600000602070428900000060717580B2B2B1909331B06052E1704027B6B000004068F0F0000027B5E0000046F0600000602070428910000060718580B0617580A07083E73FFFFFF046F08000006062A001330040083000000160000110203287A0000062D780203282D0000060A0203282C0000060B2
  B6204027B69000004078F100000027B600000046F07000006027B69000004078F100000027B600000040C0817594503000000020000000C000000160000002B1F02070428870000062B1502070428890000062B0B02070405288A00000610030717580B0706319A052A00133004007C000000170000110203287A0000062D71
  020328420000060A061E594503000000020000001B000000370000002B4B02282E00000616314A020203282C0000060428890000062B3A02282E000006163131020203282C0000060405288A00000610032B1E02282E00000616311502030405288B00000610032B080203042888000006052A1330030030000000180000111
  200FE150500001B027B670000042C1E027B670000040399282E00000A2D0F1200027B670000040399283D00000A062A1330030030000000180000111200FE150500001B027B680000042C1E027B680000040399282E00000A2D0F1200027B680000040399283D00000A062AB6040203283C0000067B540000040203283C0000
  067B550000040203288D0000060203288E0000066F030000062AB6040203283C0000067B540000040203283C0000067B550000040203288D0000060203288E0000066F040000062A13300B005B00000000000000040203283C0000067B540000040203283C0000067B550000040203288D0000060203288E000006020317582
  83C0000067B5400000402031758283C0000067B5500000402031758288D00000602031758288E0000066F050000062A221F1C806F0000042A2A022C050218FE012A172A4E021D2E0D021C2E09021B2E05021AFE012A172A1E02035F16FE032A120203602A2E0203289500000616FE012A52027B81000004036F010000060203
  7D800000042A0000001330020020000000170000110328020200060A027B81000004066F02000006027B82000004066F350100062A86027B810000040304050E046F03000006027B820000040304050E046F370100062A86027B810000040304050E046F04000006027B820000040304050E046F390100062A1330090031000
  00000000000027B810000040304050E040E050E060E070E086F05000006027B820000040304050E040E050E060E070E086F3A0100062A5E027B810000046F08000006027B820000046F3D0100062A5E027B810000046F09000006027B820000046F3E0100062A8A027B810000046F0A000006027B820000046F43010006027B
  8000000473000300062A133005001B000000180000110203041200FE150500001B061200FE150500001B066F9A0000062A00133005001B000000180000110203041200FE150500001B061200FE150500001B066F9B0000062A001330090030000000180000110203041200FE150500001B061200FE150500001B06050E04120
  0FE150500001B061200FE150500001B066F9C0000062A9202157D800000040273970300067D810000040273320100067D8200000402283E00000A2A52027B84000004036F0100000602037D830000042A00001330020020000000170000110328040200060A027B84000004066F02000006027B85000004066F350100062A86
  027B840000040304050E046F03000006027B850000040304050E046F370100062A86027B840000040304050E046F04000006027B850000040304050E046F390100062A133009003100000000000000027B840000040304050E040E050E060E070E086F05000006027B850000040304050E040E050E060E070E086F3A0100062
  A5E027B840000046F08000006027B850000046F3D0100062A5E027B840000046F09000006027B850000046F3E0100062A8A027B840000046F0A000006027B850000046F43010006027B83000004738C0200062A133005001B000000180000110203041200FE150500001B061200FE150500001B066FA60000062A0013300500
  1B000000180000110203041200FE150500001B061200FE150500001B066FA70000062A001330090030000000180000110203041200FE150500001B061200FE150500001B06050E041200FE150500001B061200FE150500001B066FA80000062A9202157D8300000402739B0300067D840000040273320100067D85000004022
  83E00000A2A52027C8600000419281A01000602167D870000042A0000133003005C0000000F000011036F8D0200062C012A036F92020006036F980200060A120028460000062C25027C8600000419281A010006027C86000004036F99020006281E01000602177D870000042A027C86000004036F98020006036F9902000628
  1B0100062A86027C86000004037B86000004281F010006037B870000042C0702177D870000042A0000133003006F00000019000011027C8600000428210100062C0628950200062A027B870000042C162831010006027C860000042820010006288B0200062A027C8600000428220100062830010006027C860000042820010
  006287B0300060A1200281700000628C0010006027C860000042820010006288B0200062A6602036F3F00000A7D87000004027C860000040328230100062A6603027B870000046F4000000A027C860000040328240100062A1E02283E00000A2A52027C8800000419281A01000602167D890000042A133003005C0000000F00
  0011036F8D0200062C012A036F92020006036F980200060A120028460000062C25027C8800000419281A010006027C88000004036F99020006281E01000602177D890000042A027C88000004036F98020006036F99020006281B0100062A86027C88000004037B88000004281F010006037B890000042C0702177D890000042
  A0000133002007A0000000F000011027C8800000428210100062C0628950200062A027B890000042C162831010006027C880000042820010006288B0200062A027C8800000428220100060A1200287B0000062C11027C88000004282001000673880200062A06027C8800000428200100066C28CB010006027C880000042820
  010006288B0200062A6602036F3F00000A7D89000004027C880000040328230100062A6603027B890000046F4000000A027C880000040328240100062A36027C8A00000418281A0100062A13300300510000000F000011036F8D0200062C012A036F92020006036F980200060A120028460000062C1A283000000A282C04000
  6280100002B284200000A733200000A7A027C8A000004036F98020006036F99020006281B0100062A4A027C8A000004037B8A000004281F0100062ABE027C8A00000428210100062C0628950200062A027C8A0000042822010006027C8A0000042820010006288B0200062A36027C8A0000040328230100062A36027C8A0000
  040328240100062A9E027C8C00000423000000000000F0BF7D590000040228760300067D8D00000402167D8E0000042A13300300D20000000F000011036F8D0200062C012A036F92020006027B8E0000042C012A027B8D00000428760300062E16027B8D000004036F990200062E0802177D8E0000042A02036F990200067D8
  D000004036F980200060A120028490000062C51027C8C0000042300000000000000007D56000004027C8C0000042300000000000000007D57000004027C8C00000423000000000000F03F7D58000004027C8C0000042300000000000010407D590000042A036F980200060A12002837000006163118036F98020006036F9902
  00066C027C8C00000428D20100062A0000133002007400000000000000027B8E0000042D0D037B8D000004287603000633012A037B8E0000042C0802177D8E0000042A027B8D0000042876030006331902037B8D0000047D8D00000402037B8C0000047D8C0000042A027B8D000004037B8D0000042E0802177D8E0000042A0
  27C8C000004037B8C00000428D40100062A13300400A50100001A000011027B8E0000042D0D027B8D0000042876030006330628950200062A027C8C0000047B59000004230000000000000000340C027B8D00000473880200062A027C8C0000047B5900000423000000000000104033112831010006027B8D000004288B0200
  062A027C8C0000047B59000004238165BBBA8CAB4B3C3414027C8C000004238165BBBA8CAB4B3C7D59000004027B8D000004287B0300060A067B64000004067B640000045A067B650000045B0B027C8C0000047B5800000423000000000000F03F2F3D027C8C0000047B5800000423000000000000F0BF311C027C8C0000047
  B58000004284300000A23F8C1631ADCA54C405A2B142300000000008056C02B09230000000000805640027C8C0000047B560000042300000000000000003316027C8C0000047B570000042300000000000000002E27027C8C0000047B57000004027C8C0000047B56000004284400000A23F8C1631ADCA54C405A2B09230000
  0000000000000C08027B8D000004289C020006072300000000000000405A027C8C0000047B59000004284500000A2300000000000000405B284300000A5A6FE80200062A3A02283E00000A02037D900000042A133003001C01000000000000027C93000004032838020006031759450B00000001000000180000002F0000003
  B000000520000006900000080000000AD000000C4000000D0000000970000002A02722700007028D600000602723300007028D60000062A02723B00007028D600000602725100007028D60000062A02726100007028D60000062A02727100007028D600000602728700007028D60000062A0272A100007028D60000060272B7
  00007028D60000062A0272D100007028D60000060272EB00007028D60000062A02720901007028D600000602722501007028D60000062A027B90000004724501007072590100706F4600000A2A0272C501007028D600000602725100007028D60000062A0272D901007028D60000062A0272F701007028D60000062A1330030
  05700000000000000027C930000042839020006027C93000004284002000619333502027C9300000428420200062D0772110200702B05722302007028D600000602723502007028D600000602725100007028D600000602030428D50000062A92027C93000004283A020006027B90000004724B0200706F4700000A02030428
  D50000062AFA027C93000004283C020006027B90000004724B0200706F4700000A02030428D5000006027B90000004724B0200706F4700000A020E050E0628D50000062A00133003009200000000000000027C9300000428430200062C120228D70000060228D70000060228D70000060318332302724F02007028D60000060
  2723B00007028D600000602725100007028D60000062B2102724F02007028D60000060272C501007028D600000602725100007028D6000006027C9300000428430200062C1202027B94000004027B9500000428D5000006027C93000004283D0200062A000013300200930000000000000002027C9300000428440200062C07
  72110200702B05722302007028D600000602726702007028D600000602724F02007028D60000060317594503000000020000001A000000320000002B3B02723B00007028D600000602725100007028D60000062B230272C501007028D600000602725100007028D60000062B0B0272D901007028D6000006027C93000004032
  83E0200062A00133002009800000000000000027C9300000428400200061933140228D70000060228D70000060228D70000062B6A027C9300000428400200061F0933140228D70000060228D70000060228D70000062B47027C9300000428400200061F0A33380228D7000006027C93000004284502000619330C0228D70000
  060228D70000060228D70000060228D70000060228D70000060228D7000006027C93000004283B0200062A133002005300000000000000027C930000042840020006192E33027C9300000428400200061F0B2E24027C9300000428400200061F0A2E15027C9300000428400200061F092E060228D70000060228D7000006027
  C93000004283F0200062ADE027B90000004036F4800000A027B90000004724B0200706F4700000A027B90000004046F4800000A02037D9400000402047D950000042A4A027B900000040372710200706F4600000A2A32027B900000046F4900000A2A5602283E00000A02037D9900000402047D980000042ADA027B98000004
  036F010000060228DF000006027B990000046F4A00000A2D0B2837040006733200000A7A027B980000046F0A0000062A13300400B70000001B000011027B990000046F4B00000A2C6A027B990000046F4C00000A172E0B2836040006733200000A7A027B990000046F4D00000A26027B990000046F4E00000A0A06284F00000
  A2C0C027B990000046F5000000A0A0672A70200701B285100000A2C0B2836040006733200000A7A027B990000046F5200000A26027B990000046F5300000A037245010070285400000A2C13027B990000040372710200706F5500000A2B11027B990000040372590100706F5500000A16FE012A4A027B990000040372710200
  706F5600000A2A5A027B99000004724501007072590100706F5600000A2ABE027B990000046F5700000A26027B990000046F5800000A1F0F3312027B990000046F5900000A03285A00000A2A162A32027B990000046F5B00000A2A0000133003001E01000000000000027B990000046F5C00000A2D06733300000A7A0272270
  0007028DB0000062C070228E00000062A02723B00007028DB0000062C070228E60000062A02726100007028DB0000062C070228F10000062A02727100007028DB0000062C070228FA0000062A0272A100007028DB0000062C070228FB0000062A0272D100007028DB0000062C070228FC0000062A02720901007028DB000006
  2C070228FD0000062A0272C501007028DB0000062C070228E80000062A0272B302007028DB0000062C070228EA0000062A0272D901007028DB0000062C070228EB0000062A0272F701007028DB0000062C070228F50000062A0228DC0000062C070228FE0000062A283000000A2838040006027B990000046F5000000A285D0
  0000A733200000A7AAE027B98000004176F020000060228FF000006021728E3000006022804010006027B980000046F090000062A6E0272BB02007028DA0000062C0D020328E30000060228DE0000062A6E022800010006021628E1000006021628E10000060228030100062A6E02722700007028DA0000062C0D020328E400
  00060228DE0000062A000013300400A40000001C00001102723300007028DA0000062C78027B99000004D00600001B285E00000A146F5F00000A740600001B0A068E2C31068E69182E1D283000000A2860040006068E698C62000001285D00000A733200000A7A0206169906179928020100062B20032D1D283000000A28600
  40006068E698C62000001285D00000A733200000A7A0228DE0000062A032D1B283000000A2860040006168C62000001285D00000A733200000A7A2A6E022800010006021628E4000006021628E40000060228030100062AAA027B98000004186F020000060228FF0000060228E7000006022804010006027B980000046F0900
  00062AB202723B00007028DA0000062C1E0228ED0000062C09021628EE0000062B07021728F00000060228DE0000062AAA027B980000041E6F020000060228FF0000060228E9000006022804010006027B980000046F090000062AE20272C501007028DA0000062C2A0228ED0000062C09021628EF0000062B1302280001000
  6021728F00000060228030100060228DE0000062A13300500F30000001D000011027B980000041E6F020000060228FF0000060272B302007028DA00000639BF0000000228ED0000062C3A02723300007028DB0000062C09021628E40000062B07021628E100000602723300007028DB0000062C080228E50000062B7F0228E2
  0000062B7702280001000602725100007028DA0000062C5E02725100007028DD0000062D4B027B99000004D00600001B285E00000A146F5F00000A740600001B0A068E691C331E160B2B1202060799060717589928020100060718580B07068E6932E82B0B2835040006733200000A7A0228DE0000060228030100060228DE0
  00006022804010006027B980000046F090000062AAE027B980000041F096F020000060228FF0000060228EC000006022804010006027B980000046F090000062A00133002007A000000000000000272D901007028DA0000062C6C2B5702724F02007028DA000006262B2902723B00007028DB0000062C0F0218280101000602
  28E70000062B0D021928010100060228E900000602723B00007028DB0000062DCA0272C501007028DB0000062DBD0228DE00000602724F02007028DB0000062D9C0228DE0000062A6E02723300007028DB0000062D0C0272BB02007028DB0000062A172A9A02723300007028DB0000062C09020328E40000062B07020328E10
  000060228ED0000062DDB2A00000013300200430000000000000002723300007028DB0000062C09020328E40000062B24020328E10000062B1B02723300007028DB0000062C080228E50000062B060228E20000060228ED0000062DDD2A0013300500AE0000001D00001102725100007028DA000006398F0000000272510000
  7028DD0000062D6D027B99000004D00600001B285E00000A146F5F00000A740600001B0A068E2C42068E69185D2C1D283000000A285E040006068E698C62000001285D00000A733200000A7A160B2B1202060799060717589928020100060718580B07068E6932E82B19285F040006733200000A7A032D0B285F04000673320
  0000A7A0228DE0000062A032D0B285F040006733200000A7A2A0000133002007200000004000011027B98000004196F0200000602726100007028DA0000062C4D02726100007028DD0000062D3A0228FF0000060228F2000006022804010006170A2B170228FF000006020628F30000060228040100060617580A0272110200
  7028DB0000062DDC0228DE000006027B980000046F090000062A0000133005009E0000001800001102722302007028DA0000062C5602722302007028DD0000062D080228F40000062B3A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046
  F080000060228DE0000062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000062A0000133005009E0000001800001102721102007028DA0000062C5602721102007028DD0000062D080228F40000062B3A027B98000004230000
  0000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000060228DE0000062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000062A0000133005008F00000018000
  01102723502007028DA0000062C4702723502007028DD0000062C1B283000000A2851040006168C62000001285D00000A733200000A7A0228ED0000062C09021628EE0000062B07021628F00000060228DE0000062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B06
  6F03000006027B980000046F080000062A00133002007300000004000011027B980000041F0A6F020000060272F701007028DA0000062C4D0272F701007028DD0000062D3A0228FF0000060228F6000006022804010006170A2B170228FF000006020628F70000060228040100060617580A02721102007028DB0000062DDC0
  228DE000006027B980000046F090000062A00133005009E0000001800001102722302007028DA0000062C5602722302007028DD0000062D080228F80000062B3A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000060228DE0000
  062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000062A0000133005009E0000001800001102721102007028DA0000062C5602721102007028DD0000062D080228F80000062B3A027B980000042300000000000000002300000
  000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000060228DE0000062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000062A000013300500070100001800001102726702007028DA
  00000639BC00000002726702007028DD0000062C1B283000000A2851040006168C62000001285D00000A733200000A7A02724F02007028DA0000062602723B00007028DB0000062D1A0272C501007028DB0000062D0D0272D901007028DB0000062C5402723B00007028DB0000062C14027B98000004176F070000060228E70
  000062B330272C501007028DB0000062C14027B98000004186F070000060228E90000062B12027B98000004196F070000060228EC0000060228DE0000060228DE0000062A027B980000042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027B980000046F080000062A
  00133002007100000000000000020328DA0000062C67020328DD0000062D582B1F020428DA0000062C16020428DD0000062D0D0E046FD70400060228DE000006020428DB0000062DD8020528DB0000062C25020528DA0000062C1C2B070E046FD7040006027B990000046F5C00000A2DEC0228DE0000060228DE0000062AE60
  27B980000041A6F0200000602727100007072D7020070728700007002FE06E000000673D604000628F9000006027B980000046F090000062AE6027B980000041B6F020000060272A1000070724F02007072B700007002FE06E600000673D604000628F9000006027B980000046F090000062AE6027B980000041C6F02000006
  0272D100007072EF02007072EB00007002FE06F100000673D604000628F9000006027B980000046F090000062AE6027B980000041D6F02000006027209010070720B030070722501007002FE06DF00000673D604000628F9000006027B980000046F090000062AE6027B980000041F0B6F0200000602724501007028DA00000
  62C1302724501007028DD0000062C060228DE000006027B980000046F090000062A5A02167D9A00000402157D9B00000402167D9E0000042A2202167D9B0000042A52027B98000004036F0600000602177D9E0000042A133009001E01000018000011027B9A0000042D2B027B9800000403041200FE150500001B061200FE15
  0500001B066F0300000602167D9E00000438CE000000027B9E0000042C2903027B9F000004330904027BA00000042E0B2827040006733200000A7A02167D9E000004389D000000027B9B000004153321027B9800000403041200FE150500001B061200FE150500001B066F040000062B73027B9B0000042D1E02037D9C00000
  402047D9D00000402027B9B00000417587D9B0000042B4D027B9B000004173344027B98000004027B9C000004027B9D0000041200FE150500001B061200FE150500001B0603041200FE150500001B061200FE150500001B066F0500000602167D9B00000402037D9F00000402047DA000000402027B9A00000417587D9A0000
  042A2202157D9B0000042A56027B9A00000416310B027B980000046F080000062A36027CA100000419281A0100062A9E036F010300062C012A036F04030006027CA1000004036F0A030006036F0B030006281B0100062A4A027CA1000004037BA1000004281F0100062AE6027CA100000428210100062C0628070300062A027
  CA100000428220100062830010006289B010006027CA1000004282001000628FF0200062A36027CA10000040328230100062A36027CA10000040328240100062A36027CA200000419281A0100062A9E036F010300062C012A036F04030006027CA2000004036F0A030006036F0B030006281B0100062A4A027CA2000004037B
  A2000004281F0100062A00000013300200500000000F000011027CA200000428210100062C0628070300062A027CA200000428220100060A1200287B0000062C11027CA2000004282001000673FD0200062A062899010006027CA2000004282001000628FF0200062A36027CA20000040328230100062A36027CA2000004032
  8240100062A36027CA300000418281A0100062A9E036F010300062C012A036F04030006027CA3000004036F0A030006036F0B030006281B0100062A4A027CA3000004037BA3000004281F0100062ABE027CA300000428210100062C0628070300062A027CA30000042822010006027CA3000004282001000628FF0200062A36
  027CA30000040328230100062A36027CA30000040328240100062ACE02157DAB00000402147DAC0000040203175F17FE017DAD0000040203185F18FE017DAE0000040203195F19FE017DAF0000042A0000001330020052000000000000000204281E010006027BAB0000041FFE33012A027BAF0000042C0A0F01287B0000062
  C012A027BAE0000042C180F0128430000061D330E0F01027BAC00000428860000062A0F01027BAC00000428850000062A0000133003008B00000003000011027BAB0000041FFE33012A0204281E0100060F0128370000060A061731560F01284B0000062D4D027BAC000004186F35010006027BAC0000046F36010006160B2B
  17027BAC0000040F0107283C0000066F380100060717580B070632E5027BAC0000046F3D010006027BAC0000046F3E0100062A0F01287B0000062D0D0F01027BAC00000428850000062A00133003008B00000003000011027BAB0000041FFE33012A0204281E0100060F0128370000060A061731560F01284B0000062D4D027
  BAC000004186F35010006027BAC0000046F36010006160B2B17027BAC0000040F0107283C0000066F380100060717580B070632E5027BAC0000046F3D010006027BAC0000046F3E0100062A0F01287B0000062D0D0F01027BAC00000428850000062A00133002004B00000000000000027BAB0000041533290316322502037D
  AB00000402027BAD00000473330100067DAC000004027BAC0000041D6F350100062A03027BAB0000042E0F021FFE7DAB00000402147DAC0000042A0013300200490000000F000011027BAB0000041FFE2E09037BAB0000041533012A037BAB0000041FFE3309021FFE7DAB0000042A02037BAB000004281E0100060F0128220
  100060A1200027BAC00000428860000062A1E027BAB0000042A2A027BAB00000416FE042A13300200210000000F000011027BAC0000046F3E010006027BAC0000046F430100060A1200172845000006062A00000013300500550000000F00001102036F3400000A7DAB000004027BAB0000041632380273320100067DAC0000
  04027BAC0000041D6F350100061200FE1513000002120003181416284C0000061200027BAC00000428860000062A02147DAC0000042A000000133002004B0000000F00001103027BAB0000046F3900000A027BAB000004163235027BAC0000046F3E010006027BAC0000046F430100060A12001628480000061200032852000
  00602157DAB00000402147DAC0000042A00133004003F0000001E000011020223000000000000F07F250A7DB3000004067DB1000004020223000000000000F0FF250A7DB4000004067DB200000402157DB500000402167DB60000042A0013300500730000001F000011036F010300062C012A036F04030006027BB60000042C
  012A027BB5000004152E16027BB5000004036F0B0300062E0802177DB60000042A02036F0B0300067DB5000004036F0A0300060A1200283700000616311E036F0A030006120112021203120428B701000602070809110428270100062A00133003004A0000000000000002027BB100000403286000000A7DB100000402027BB
  200000405286100000A7DB200000402027BB300000404286000000A7DB300000402027BB40000040E04286100000A7DB40000042A0000133005009D00000000000000027BB60000042D09037BB50000041533012A037BB60000042C0802177DB60000042A027BB500000415333D02037BB50000047DB500000402037BB10000
  047DB100000402037BB20000047DB200000402037BB30000047DB300000402037BB40000047DB40000042A027BB5000004037BB50000042E0802177DB60000042A02037BB1000004037BB3000004037BB2000004037BB400000428270100062A000000133004007A00000000000000027BB60000042D09027BB500000415330
  628070300062A027BB100000423000000000000F07F330C027BB500000473FD0200062A027CB1000004027CB3000004027CB2000004027CB4000004287F000006027BB1000004027BB3000004027BB2000004027BB40000042883000006027BB500000428FF0200062A00001B3002004000000020000011026F6200000A036F
  6300000A0A2B16066F6400000A0B078C0A00001B2C0702076F6500000A066F2400000A2DE2DE0A062C06066F2300000ADC026F6600000A2A0110000002000D00222F000A00000000133003005B000000000000007332010006251D6F35010006256F3E0100066F4301000680B70000047FB7000004172845000006733201000
  6251F0B6F35010006256F3E0100066F4301000680B80000047FB80000041728450000067FB80000041628480000062A1A7EB70000042A1A7EB80000042AFE02736700000A7DB900000402736800000A7DBE00000402736900000A7DBF00000402736A00000A7DC000000402283E00000A027BC0000004156F6B00000A2A0000
  0013300200460000000000000002736700000A7DB900000402736800000A7DBE00000402736900000A7DBF00000402736A00000A7DC000000402283E00000A027BC0000004156F6B00000A02037DBA0000042A00001330020073000000210000111200FE15110000021200027BC00000046F6C00000A7D620000041200157D6
  10000041200037D63000004031F093315027BBD0000042D0D02736D00000A7DBD0000042B0C031F0A330702167DC3000004027BC0000004027BBF0000046F6E00000A6F6B00000A027BBF00000406280200002B2A0013300300DE00000022000011170A027BBF000004027BBF0000046F6E00000A17596F6F00000A7B630000
  041E3304180A2B64027BBF000004027BBF0000046F6E00000A17596F6F00000A7B630000041F093304190A2B3F027BBF000004027BBF0000046F6E00000A17596F6F00000A7B630000041F0A331E027BC30000040A06193313027BBD0000042D0B02736D00000A7DBD0000041201FE15100000021201067D600000041201027
  BB90000046F7000000A7D5F00000406193319027BC1000004182E1802187DC200000402187DC10000042B080216172845010006027BBE00000407280300002B2A4A022836010006020304050E0428410100062A36027BB900000403280400002B2A00133005000D02000023000011027BC10000041833230218172845010006
  027BBD000004027BC20000047311000006280500002B38CE010000027BBE000004027BBE0000046F7100000A17596F7200000A7B6000000419336C027BBD000004027BBD0000046F7300000A17596F7400000A7B5E000004172E20027BBD000004027BBD0000046F7300000A17596F7400000A7B5E000004193316027BBD000
  004187311000006280500002B3858010000027BBD000004167311000006280500002B3842010000027BBF000004027BBF0000046F6E00000A17596F6F00000A7B630000041F0A401E010000027BBE000004027BBE0000046F7100000A17596F7200000A7B600000042D3F027BBE000004027BBE0000046F7100000A17596F72
  00000A0A1200177D60000004027BBE000004027BBE0000046F7100000A1759066F7500000A38C0000000027BBE000004027BBE0000046F7100000A17596F7200000A7B6000000418409D000000027BBE000004027BBE0000046F7100000A17596F7200000A0B1201197D60000004027BBD0000042D0B02736D00000A7DBD000
  004027BBE000004027BBE0000046F7100000A1759076F7500000A027BBD000004197311000006280500002B077B5F00000419580C2B15027BBD000004177311000006280500002B0818580C08027BB90000046F7000000A32DD027BBD000004187311000006280500002B02172844010006020304050E0428410100062A0000
  00133005002A02000023000011027BC10000041833330218172845010006027BC200000418330702197DC2000004027BBD000004027BC20000047311000006280500002B38CD010000027BBE000004027BBE0000046F7100000A17596F7200000A7B6000000419336B027BBD000004027BBD0000046F7300000A17596F74000
  00A7B5E0000042C20027BBD000004027BBD0000046F7300000A17596F7400000A7B5E000004183316027BBD000004197311000006280500002B3858010000027BBD000004177311000006280500002B3842010000027BBF000004027BBF0000046F6E00000A17596F6F00000A7B630000041F0A401E010000027BBE00000402
  7BBE0000046F7100000A17596F7200000A7B600000042D3F027BBE000004027BBE0000046F7100000A17596F7200000A0A1200187D60000004027BBE000004027BBE0000046F7100000A1759066F7500000A38C0000000027BBE000004027BBE0000046F7100000A17596F7200000A7B6000000417409D000000027BBE00000
  4027BBE0000046F7100000A17596F7200000A0B1201197D60000004027BBD0000042D0B02736D00000A7DBD000004027BBE000004027BBE0000046F7100000A1759076F7500000A027BBD000004187311000006280500002B077B5F00000418580C2B15027BBD000004167311000006280500002B0817580C08027BB9000004
  6F7000000A32DD027BBD000004197311000006280500002B02172844010006020304050E042841010006020E050E060E070E0828410100062A4602161718284601000602037DC20000042A2202037DC30000042A00000013300600890000000000000002027BBE0000046F7100000A1759027BBF0000046F6E00000A1759284
  0010006027BBF000004027BBF0000046F6E00000A17596F6F00000A7B63000004193340027BB9000004027BB90000046F7000000A1759027BB9000004027BBE000004027BBE0000046F7100000A17596F7200000A7B5F0000046F7600000A6F7700000A02171628450100062A36027BC00000046F7800000A262A0013300300
  4E00000021000011027BBF000004046F6F00000A7B61000004153322027BBF000004046F6F00000A0A1200037D61000004027BBF00000404066F7900000A027BBF000004046F6F00000A7B620000041002041533B32ADA027BB90000040304730B000006280400002B027BBA0000042D1B02027CBB000004052842010006020
  27CBC0000040E0428420100062A000000133003006E000000040000110F02287A00000A2C3E03502D3A03027BB90000046F7000000A737B00000A51160A2B14035023000000000000F8FF6F7C00000A0617580A06027BB90000046F7000000A175932DC03502C2203500F02287A00000A2D0B23000000000000F8FF2B070F02
  287D00000A6F7C00000A2A000013300600A40000002400001102197DC1000004027BB90000046F7000000A1630131414027BBF0000046F7E00000A731C0000062A027BBB0000042C0D027BBB0000046F7F00000A2B01140A027BBC0000042C0D027BBC0000046F7F00000A2B01140B027BBD0000042C1A027BBD0000046F730
  0000A2C0D027BBD0000046F8000000A2B01140C027BB90000046F8100000A027BBE0000046F8200000A027BBF0000046F7E00000A060708731E0000062A2202047DC10000042A2202057DC10000042AEE02283E00000A0214FE064901000673DA0400067DD00000040214FE064B01000673DE0400067DD10000040273570100
  06288300000A7DD20000042AC2027BD30000042D27027CD2000004288400000A742A0000026F56010006027CD2000004288500000A02177DD30000042A4E0E050E04020304056F4A01000681270000022A0013300600390000000F000011027CD2000004288400000A742A000002256F5501000612000304050E04281F00000
  61200172845000006120016284A000006066F520100062A2203026F4C0100062A5E027CD2000004288400000A742A000002036F530100062A5A027CD2000004288400000A742A0000026F540100062A5202283E00000A020319288600000A7DD50000042A3602285001000616288700000A2A46027CD5000004288400000A74
  310000012AA2027BD40000042D1F027CD5000004288800000A2C0B027CD5000004288500000A02177DD40000042A001330040089010000250000111200FE15270000020F01286F0000062C3412000F01286F0000068E697DC5000004020F01286F000006734E0100067DD60000041200027BD60000046F4F0100067DC400000
  40F0128720000062C24020F012872000006734E0100067DD70000041200027BD70000046F4F0100067DC60000040F0128730000062C24020F012873000006734E0100067DD80000041200027BD80000046F4F0100067DC70000040F0128700000062C3412000F0128700000068E697DC9000004020F012870000006734E0100
  067DD90000041200027BD90000046F4F0100067DC800000412000F0128710000068E697DCB000004020F012871000006734E0100067DDA0000041200027BDA0000046F4F0100067DCA0000040F0128740000062C3412000F0128740000068E697DCD000004020F012874000006734E0100067DDB0000041200027BDB0000046
  F4F0100067DCC0000041200020F0128440000062D03162B0117250B7DDC000004077DCE0000041200020F0128490000062D03162B0117250B7DDD000004077DCF000004062A2202037DDD0000042A000013300700DC00000026000011027BD60000042D03142B10027BD60000046F50010006741100001B0A027BD90000042D
  03142B10027BD90000046F50010006741200001B0B027BDA0000042D03142B10027BDA0000046F50010006741300001B0C027BD70000042D03142B10027BD70000046F50010006740600001B0D027BD80000042D03142B10027BD80000046F50010006740600001B1304027BDB0000042D03142B10027BDB0000046F5001000
  6741400001B130512060607080911041105281E0000061206027BDC00000417FE0128450000061206027BDD00000417FE01284A00000611062A133002009D00000000000000027BD60000042C12027BD60000046F5101000602147DD6000004027BD70000042C12027BD70000046F5101000602147DD7000004027BD8000004
  2C12027BD80000046F5101000602147DD8000004027BDB0000042C12027BDB0000046F5101000602147DDB000004027BD90000042C12027BD90000046F5101000602147DD9000004027BDA0000042C12027BDA0000046F5101000602147DDA0000042A5A027BDE0000042D0D02285501000602177DDE0000042A8AD05C00000
  2285E00000A022028100000288900000A14146F8A00000A74630000012A0013300300370000002700001104288B00000A026F8C00000A185A04288B00000A4A288D00000A5402288E00000A0A030604288B00000A4A285801000606288F00000A2A6A0203288B00000A4A289000000A28590100060405285A0100062A000013
  30030035000000280000110E04288B00000A4F0A0203288B00000A4A289000000A0B283000000A072859010006068C61000001285D00000A0405285A0100062A0000001330040046000000290000110E04288B00000A4F0A0E050E06288B00000A4A289000000A0B0203288B00000A4A289000000A0C283000000A082859010
  006068C6100000107289100000A0405285A0100062A000013300300350000002A0000110E04288B00000A4A0A0203288B00000A4A289000000A0B283000000A072859010006068C62000001285D00000A0405285A0100062A00000013300500550000002B0000110E040E05288B00000A4A289000000A0A0E06288B00000A4A
  0B0E07288B00000A4A0C0203288B00000A4A289000000A0D283000000A09285901000606078C62000001088C62000001283100000A0405285A0100062A00000013300400440000002C0000110E04288B00000A4A0A0E05288B00000A490B0203288B00000A4A289000000A0C283000000A082859010006068C62000001078C7
  0000001289100000A0405285A0100062A13300300420000002D0000110203288B00000A4A289000000A16289200000A0A140B0614289300000A2C0C06289400000A75330000010B072D06739500000A0B076F9600000A0405285A0100062A3E0204289700000A02037DDF0000042A1E027BDF0000042A00001B300300960000
  002E000011289800000A289900000A2D11187E9A00000A739B00000A80E30000042A00162869010006167E9A00000A739B00000A80E3000004DE5F0A289C00000A2D0772290300702B0572310300707239030070289D00000A7E9E00000A1628650100067E9E00000A289F00000A2D181728A000000A066FA100000A2867010
  006739B00000A2B0B167E9A00000A739B00000A80E3000004DE002A00000110000000001E001836005F330000015E7269030070028C62000001038C6200000128A200000A2A13300300640000002F0000117FE30000047BA300000A0A06450300000001000000020000001C0000002A2A28340400067FE30000047BA400000A
  28A500000A73A600000A7A729903007028A700000A28A800000A8C7700000128A200000A0B28560400060728A500000A73A900000A7A1330020045000000000000000220C8000480594503000000020000000E0000001A0000002B2402284504000673630100067A02282104000673630100067A02282504000673630100067
  A0228AA00000A2A4E7FE30000047BA300000A2D060228690100062A0000001B3004005A00000030000011286801000673570100060B73570100060C73470100060D0207036F5201000608046F5201000609286A0100062894010006096F4D0100060ADE1E092C06096F2300000ADC082C06086F2300000ADC072C06076F2300
  000ADC062A00000128000002001700233A000A00000000020011003344000A0000000002000B00434E000A000000001B3005004500000031000011286801000673570100060B73470100060C07026F520100060304050828780100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062
  A000000011C0000020011001E2F000A0000000002000B002E39000A000000001B3005004500000031000011286801000673570100060B73470100060C07026F520100060304170828790100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A000000011C0000020011001E2F000A
  0000000002000B002E39000A000000001B3002004200000031000011286801000673570100060B73470100060C07026F5201000608286B0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A0000011C0000020011001B2C000A0000000002000B002B36000A000000003A28680
  1000617020328960100062A3A286801000616020328960100062A3A286801000619020328960100062A3A286801000618020328960100062A1B3003004300000032000011286801000673570100060B73570100060C07026F5201000608036F520100061200286C0100062894010006DE14082C06086F2300000ADC072C0607
  6F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B3003004300000032000011286801000673570100060B73570100060C07026F5201000608036F520100061200286D0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D0
  00A0000000002000B002C37000A000000001B3003004300000032000011286801000673570100060B73570100060C07026F5201000608036F520100061200286E0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B30
  03004300000032000011286801000673570100060B73570100060C07026F5201000608036F520100061200286F0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B30030043000000320000112868010006735701000
  60B73570100060C07026F5201000608036F52010006120028700100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B3003004300000032000011286801000673570100060B73570100060C07026F5201000608036F5201
  0006120028710100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001330030068000000330000112868010006020328A50100060A1A8D7000000125D00802000428AB00000A0B170C160D2B380706099417589313041F2A0
  4096FAC00000A2E1E1F5404096FAC00000A330611041F46330D110404096FAC00000AFE012B01170C0917580D091F09FE04085F2DBF082A1B3003005B0000003400001128680100061F098D620000010A73570100060B73570100060C06734E0100060D07026F5201000608036F520100060628720100062894010006DE1E09
  2C06096F2300000ADC082C06086F2300000ADC072C06076F2300000ADC062A0001280000020020001B3B000A00000000020019002C45000A00000000020013003C4F000A000000001B3002002C00000035000011286801000673570100060B07026F52010006120028730100062894010006DE0A072C06076F2300000ADC062
  A0110000002000B001520000A000000001B3002002C00000035000011286801000673570100060B07026F52010006120028740100062894010006DE0A072C06076F2300000ADC062A0110000002000B001520000A000000001B3002003100000036000011286801000673570100060B07026F52010006120028750100062894
  010006DE0A072C06076F2300000ADC0673220000062A0000000110000002000B001520000A000000001B3002003100000036000011286801000673570100060B07026F52010006120028760100062894010006DE0A072C06076F2300000ADC0673220000062A0000000110000002000B001520000A000000001B3002002C000
  00037000011286801000673570100060B07026F52010006120028770100062894010006DE0A072C06076F2300000ADC062A0110000002000B001520000A000000001B3003004300000038000011286801000673570100060B73570100060C07026F5201000608036F520100061200287A0100062894010006DE14082C06086F
  2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A0000000013300D0098010000390000110E07250D2C08096FAD00000A2D0516E00A2B0A09161628AE00000AE00A0E082513042C0911046FAD00000A2D0516E00B2B0B1104161628AE00000AE00B0E092513052C09110
  56FAD00000A2D0516E00C2B0B1105161628AE00000AE00C0F00286F0000062513072C0611078E692D0616E013062B0B1107168F0C000002E013060F0028720000062513092C0611098E692D0616E013082B0B1109168F61000001E013080F00287300000625130B2C06110B8E692D0616E0130A2B0B110B168F61000001E013
  0A0F00287000000625130D2C06110D8E692D0616E0130C2B0B110D168F10000002E0130C0F00287100000625130F2C06110F8E692D0616E0130E2B0B110F168F11000002E0130E0F0028740000062513112C0611118E692D0616E013102B0B1111168F0F000002E0131028680100060211061108110A110C110E111028E2010
  0060304050E040E050E060E08166FAF00000A0E08176FAF00000A0673B000000A0773B000000A0873B000000A0E0A28AC010006289401000614131114130F14130D14130B141309141307140D1413041413052A133016003D0100003A00001128680100060F00286F000006250B2C05078E692D0516E00A2B0907168F0C0000
  02E00A0F002872000006250D2C05098E692D0516E00C2B0909168F61000001E00C0F0028730000062513052C0611058E692D0616E013042B0B1105168F61000001E013040F0028700000062513072C0611078E692D0616E013062B0B1107168F10000002E013060F0028710000062513092C0611098E692D0616E013082B0B1
  109168F11000002E013080F00287400000625130B2C06110B8E692D0616E0130A2B0B110B168F0F000002E0130A020608110411061108110A28E20100060304050E040E050E060E070E080E090E140E150E0A0E0B0E0C0E0D0E0E73B000000A0E0F73B000000A0E1073B000000A0E1173B000000A0E1273B000000A0E1373B0
  00000A28AE010006289401000614130B141309141307141305140D140B2A0000001B3002002C00000037000011286801000673570100060B07026F520100061200287B0100062894010006DE0A072C06076F2300000ADC062A0110000002000B001520000A000000001B3005002E0000003B000011286801000673570100060
  A06026F520100060304050E04287C0100062894010006DE0A062C06066F2300000ADC2A00000110000002000B001823000A000000001B3002004200000031000011286801000673570100060B73470100060C07026F5201000608287D0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F230000
  0ADC062A0000011C0000020011001B2C000A0000000002000B002B36000A000000001B3002004200000031000011286801000673570100060B73470100060C07026F5201000608287E0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A0000011C0000020011001B2C000A000
  0000002000B002B36000A000000001B3003004300000031000011286801000673570100060B73470100060C07026F520100060308287F0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B30040044
  00000031000011286801000673570100060B73470100060C07026F5201000603040828800100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B002D38000A000000001B3002004200000031000011286801000673570100060B734
  70100060C07026F520100060828810100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A0000011C0000020011001B2C000A0000000002000B002B36000A000000001B3005002E0000003B000011286801000673570100060A06026F520100060304050E04288201000628940100
  06DE0A062C06066F2300000ADC2A00000110000002000B001823000A000000001B3005003F0000003C000011286801000673570100060C080271130000026F5201000603041200120128830100062894010006020716FE01284A000006DE0A082C06086F2300000ADC062A000110000002000B002833000A000000001B30060
  0300000003B000011286801000673570100060A06026F520100060304050E040E0528840100062894010006DE0A062C06066F2300000ADC2A0110000002000B001A25000A000000001B3003004300000031000011286801000673570100060B73470100060C07026F52010006030828850100062894010006086F4D0100060A
  DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B3003002D00000035000011286801000673570100060B07026F5201000603120028860100062894010006DE0A072C06076F2300000ADC062A0000000110000002000B001621000A00000
  0001B3003002D00000035000011286801000673570100060B07026F5201000603120028870100062894010006DE0A072C06076F2300000ADC062A0000000110000002000B001621000A000000001B3006004700000038000011286801000673570100060B73570100060C07026F5201000608036F5201000604050E04120028
  880100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011002031000A0000000002000B00303B000A000000001B300500700000003D000011286801000673570100060B73570100060C73570100060D734701000613040207036F5201000608046F5201000605110428890100062
  89401000611046F4D0100060ADE2A11042C0711046F2300000ADC092C06096F2300000ADC082C06086F2300000ADC072C06076F2300000ADC062A0134000002001E002644000C00000000020017003950000A0000000002001100495A000A0000000002000B005964000A000000003E28680100061702030428BE0100062A3E
  28680100061602030428BE0100062A3E28680100061902030428BE0100062A3E28680100061802030428BE0100062A1B3004004400000032000011286801000673570100060B73570100060C07026F5201000608036F52010006041200288A0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A0
  11C0000020011001D2E000A0000000002000B002D38000A000000001B3004004400000032000011286801000673570100060B73570100060C07026F5201000608036F52010006041200288B0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B00
  2D38000A000000001B3004004400000032000011286801000673570100060B73570100060C07026F5201000608036F52010006041200288C0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B002D38000A000000001B300400440000003200001
  1286801000673570100060B73570100060C07026F5201000608036F52010006041200288D0100062894010006DE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B002D38000A000000001B3004004400000031000011286801000673570100060B73470100060C0702
  6F52010006030408288F0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B002D38000A000000001B3006004700000031000011286801000673570100060B73470100060C07026F520100060304050E0408288E0100062894010
  006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011002031000A0000000002000B00303B000A000000001B3003002D00000035000011286801000673570100060B07026F5201000603120028900100062894010006DE0A072C06076F2300000ADC062A000000011000000200
  0B001621000A000000001B3003002D00000036000011286801000673570100060B07026F5201000603120028910100062894010006DE0A072C06076F2300000ADC062A0000000110000002000B001621000A000000001B3003004300000031000011286801000673570100060B73470100060C07026F5201000603082892010
  0062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A00011C0000020011001C2D000A0000000002000B002C37000A000000001B3005004500000031000011286801000673570100060B73470100060C07026F520100060304050828930100062894010006086F4D0100060ADE14082C
  06086F2300000ADC072C06076F2300000ADC062A000000011C0000020011001E2F000A0000000002000B002E39000A000000001B300300590000003E000011286801000673570100060A73570100060B73470100060C06026F5201000607036F520100060828CD0100062894010006086F4D0100060DDE1E082C06086F23000
  00ADC072C06076F2300000ADC062C06066F2300000ADC092A00000001280000020017002239000A00000000020011003243000A0000000002000B00424D000A000000001B3004005A00000030000011286801000673570100060B73570100060C73470100060D07026F5201000608036F52010006040928CF01000628940100
  06096F4D0100060ADE1E092C06096F2300000ADC082C06086F2300000ADC072C06076F2300000ADC062A00000128000002001700233A000A00000000020011003344000A0000000002000B00434E000A000000001B3003002B0000003B000011286801000673570100060A06026F52010006030428D10100062894010006DE0
  A062C06066F2300000ADC2A000110000002000B001520000A000000004A2868010006020328D301000628940100062A001B300600470000003F000011286801000673570100060A73470100060B06026F520100060304050E040728D50100062894010006076F4D0100060CDE14072C06076F2300000ADC062C06066F230000
  0ADC082A00011C0000020011002031000A0000000002000B00303B000A000000001B300200420000003F000011286801000673570100060A73470100060B06026F520100060728D70100062894010006076F4D0100060CDE14072C06076F2300000ADC062C06066F2300000ADC082A0000011C0000020011001B2C000A00000
  00002000B002B36000A000000001B300300430000003F000011286801000673570100060A73470100060B06026F52010006030728D90100062894010006076F4D0100060CDE14072C06076F2300000ADC062C06066F2300000ADC082A00011C0000020011001C2D000A0000000002000B002C37000A000000001B3002004200
  00003F000011286801000673570100060A73470100060B06026F520100060728DB0100062894010006076F4D0100060CDE14072C06076F2300000ADC062C06066F2300000ADC082A0000011C0000020011001B2C000A0000000002000B002B36000A000000001B3004004400000031000011286801000673570100060B73470
  100060C07026F5201000603170828DD0100062894010006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A011C0000020011001D2E000A0000000002000B002D38000A000000001B3002004200000031000011286801000673570100060B73470100060C07026F520100060828E0010006289401
  0006086F4D0100060ADE14082C06086F2300000ADC072C06076F2300000ADC062A0000011C0000020011001B2C000A0000000002000B002B36000A0000000013300200DE000000400000111200FE15270000020316E02E1D12000F00286F0000068E697DC500000412000373B000000A7DC40000040416E02E0D12000473B00
  0000A7DC60000040516E02E0D12000573B000000A7DC70000040E0416E02E1E12000F0028700000068E697DC900000412000E0473B000000A7DC800000412000F0028710000068E697DCB00000412000E0573B000000A7DCA0000040E0616E02E1E12000F0028740000068E697DCD00000412000E0673B000000A7DCC000004
  12000F0028440000062D03162B01177DCE00000412000F0028490000062D03162B01177DCF000004062A0000133001001400000019000011027BE9000004287B0300060A120028170000062AA60273320100067DE400000402283E00000A02027BE40000047DE50000040228760300067DE90000042A2202037DE90000042A0
  013300300690000000000000002031C2E0B03192E07031F0AFE012B01177DE6000004027BE60000042C320203193308027BE70000042B01167DE8000004027BE80000042D2302031CFE017DE70000040273320100067DE50000042B0C02027BE40000047DE5000004027BE5000004036F350100062A46027BE5000004030405
  0E046F370100062A46027BE50000040304050E046F390100062A000000133009001900000000000000027BE50000040304050E040E050E060E070E086F3A0100062A36027BE5000004036F3B0100062A36027BE5000004036F3C0100062A32027BE50000046F3D0100062A000013300300700000000F000011027BE50000046
  F3E010006027BE60000042C55027BE80000042D4D2831010006027BE50000046F430100060228E401000628C20100060A1200283700000616310D1200027BE4000004288500000602027BE40000047DE500000402167DE600000402167DE700000402167DE80000042A32027BE40000046F430100062A227E01010004029A2A
  0000133005006B0000002A000011170A2B3A7E01010004069A0B02071B6FB100000A2C24026F8C00000A076F8C00000A2E1302076F8C00000A6FAC00000A28B200000A2D0306D22A0617580A067E010100048E6932BC283000000A286F04000602161F206FB300000A6FB400000A285D00000A733200000A7A0A022A0E02D22
  A3E021A2E09021B2E05021CFE012A172A7A02175945030000000200000004000000060000002B061A2A1B2A1C2A162A36021D2E070228050200062A172A3202192E06021F0AFE012A172A1330040068000000000000001F0C8D63000001251772AD030070A2251872B9030070A2251972CF030070A2251A72DF030070A2251B
  72F5030070A2251C7215040070A2251D722F040070A2251E7255040070A2251F097273040070A2251F0A728F040070A2251F0B72A9040070A280010100042A5602283E00000A02037D0201000402047D030100042A66027B02010004036F01000006027B03010004036F010000062A66027B02010004036F02000006027B030
  10004036F020000062A86027B020100040304050E046F03000006027B030100040304050E046F030000062A86027B020100040304050E046F04000006027B030100040304050E046F040000062A0000133009003100000000000000027B020100040304050E040E050E060E070E086F05000006027B030100040304050E040E
  050E060E070E086F050000062A66027B02010004036F06000006027B03010004036F060000062A66027B02010004036F07000006027B03010004036F070000062A5E027B020100046F08000006027B030100046F080000062A5E027B020100046F09000006027B030100046F090000062A5E027B020100046F0A000006027B0
  30100046F0A0000062A3A02283E00000A02037D040100042A36027B04010004036F010000062A36027B04010004036F020000062A46027B040100040403050E046F030000062A46027B040100040403050E046F040000062A133009001900000000000000027B040100040403050E040E060E050E070E086F050000062A3602
  7B04010004036F060000062A36027B04010004036F070000062A32027B040100046F080000062A32027B040100046F090000062A32027B040100046F0A0000062A3E02037D0501000402147D060100042A3E02037D0501000402037D060100042A36027B05010004036FF10100062A4A027B050100040328010200066FF2010
  0062A46027B050100040304050E046FF30100062A46027B050100040304050E046FF40100062A000000133009002C00000000000000027B060100042C19027B060100040304050E040E050E060E070E086FF70100062A283A040006739700000A7A52027B060100042D0B283A040006739700000A7A2A32027B050100046FF5
  0100062A32027B050100046FF60100062A3E02037D0701000402147D080100042A3E02037D0701000402037D080100042A36027B07010004036FF80100062A4A027B070100040328030200066FF90100062A46027B070100040304050E046FFA0100062A46027B070100040304050E046FFB0100062A133009002C000000000
  00000027B080100042C19027B080100040304050E040E050E060E070E086FFE0100062A2839040006739700000A7A52027B080100042D0B2839040006739700000A7A2A32027B070100046FFC0100062A32027B070100046FFD0100062AC202027B090100047D0A01000402037D0901000402027B0B01000417587D0B010004
  02167D0C01000402167D0D0100042A5A02027B0C01000417587D0C01000402177D0D0100042A3E02167D0D01000402167D0E0100042A2202037D0E0100042ABA02027B0B01000417597D0B01000402027B0A0100047D0901000402027B0B010004173003162B011D7D0A0100042A1E027B090100042A1E027B0A0100042A2A0
  27B0C01000417FE012A1E027B0D0100042A1E027B0C0100042A1E027B0E0100042A0000133003004800000000000000024503000000020000000F0000001C0000002B277E17010004030428B500000A2A7E16010004030428B500000A2A7E14010004030428B500000A2A7E14010004030428B500000A2A13300300A0000000
  000000001A8D7B00000125D00502000428AB00000A801001000420002000008011010004200004000080120100041F101F1073B600000A25D00602000428AB00000A80140100041E1E73B600000A25D00902000428AB00000A80150100041A1A73B600000A25D00302000428AB00000A8016010004181873B600000A25D0040
  2000428AB00000A80170100041B1A73B700000A25D00702000428AB00000A80180100042A133005003C0000000400001102283E00000A02037D1C010004021B8D7B0000017D1B010004027B1B01000416169D170A2B11027B1B0100040604061759939D0617580A061A31EB2A3E7E10010004027B1B0100040393932A26027B
  1B01000403932A9202283E00000A02037D1E01000402047D1F01000402057D21010004020E047D220100042A7202283E00000A02037D2001000402047D2101000402057D220100042A7E027B1E010004037B1E010004330F027B1F010004037B1F010004FE012A162A8A027B1E010004037B1E0100043312027B1F010004037
  B1F010004FE0116FE012A172A00133002003000000041000011032D02162A03753D0000020A062D02162A067B1E010004027B1E010004330F067B1E010004027B1E010004FE012A162A1E027B1E0100042A42198D720000022518189D801D0100042A00000013300F002B0000000000000002283E00000A020304050E040E05
  0E060E070E080E090E0A0E0B0E0C0E0D0E0E73550200067D230100042A1E027B230100042A0013300500E80200004200001102283E00000A0273B800000A7D27010004020E0B0E0A73490200067D2601000402167D2C010004020E047D2D01000402167D2E010004177E110100040E0C288D00000A28B900000A100C170A160
  B2B11067E100100040E0A0793935A0A0717580B071A32EB020E0E2D0B2300000000000000002B0F0E0823FCA9F1D24D62503F5A066C5B7D35010004020E0E2D0B2300000000000000002B0F0E0923FCA9F1D24D62503F5A066C5B7D36010004052C2F020E0C027B260100040E0573EC0400067D29010004027B2901000428E4
  040006166FEF04000602197D2B0100042B62042D0702177D2C010004020E0C027B260100040E0573EC0400067D2901000402177D2B0100040E042C11027B2901000428E4040006166FEF04000612020E060E070E080E0928EB04000602177D2A010004027B27010004088C740000026FBA00000A027B2B010004193B0E01000
  00F0D28BB00000A2C0C02037D2401000438F90000000F0D28BC00000A23FFFFFFFFFFFFEF7F335F027B2901000428E4040006186FEF0400067E100100040E0A1693930D1613042B2D1613052B1C027B2901000428E404000611041105186FF004000611051758D1130511050932DF11041758D1130411040932CE02197D2B01
  000438880000000F0D28BC00000A230000000000000000341E0E042C11027B2901000428E4040006166FEF04000602197D2B0100042B5802030F0D28BC00000A027C2E0100046F730300067D2401000423E90B21E7FDFFEF3F0F0D28BC00000A5A130611062300000000000000003618027B2E0100042D10020311066F74030
  0067D250100042B0702177D2E010004027B2B010004193B80000000021A8D1600001B7D32010004021A8D1600001B7D33010004021A8D1600001B7D340100041713072B52027B2601000411076F4A0200061308027B32010004110717591108110873B700000AA2027B33010004110717591108110873B700000AA2027B3401
  0004110717591108110873B700000AA211071758D1130711071A31A92AA202285A020006027B290100046FEE0400062D1302027B290100046FED0400067D28010004172A162A1A73BD00000A7A1E027B280100042A13300500D000000043000011027B2C0100042C02172A027B2401000412001202120112036F72030006037
  B2B020004063409037B2B0200040A2B10037B2B020004073607037B2B0200040B037B2C020004083409037B2C0200040C2B10037B2C020004093607037B2C0200040D037B2B020004037B2D020004581304037B2C020004037B2E020004581305110406340511040A2B08110407360311040B110508340511050C2B08110509
  360311050D0706230000000000003042037B2D0200045A5830160908230000000000003042037B2E0200045A58FE022A172A133008003802000044000011027B2B01000418401F020000027B290100046FF104000617400E02000002177D2B0100043802020000027B270100046FBE00000A2D0C02197D2B01000438E901000
  0027B270100046FBF00000AA5740000020A160C160D16130916130E027B26010004067B290200041758D16F4A020006130B0206110B1204120512061201285B0200061106163005110516310317130E072C70067B290200042D68170D027B2D0100042C4402177D2C010004110B110B5A13041613072B291613082B17027B2F
  010004110711081728C000000A11081758D113081108110B32E311071758D113071107110B32D12B1A11041630051106163110020628590200062C0702177D2C010004067B290200042D0C110411065811055813092B44027B2A010004027B290100046FF20400063604170C2B2D1104110658110558130A110A6A027B2A010
  0046E58027B290100046FF204000617586E3104170C2B04110A13091109163E9C000000082C1102027B2A0100041109587D2A0100042B1102027B2A01000411091759587D2A010004067B2902000417581AFE01130F067B2D020004110B6C5B130C067B2E020004110B6C5B130D110616310B0206110B1106285C0200061105
  1631270206110B1105110F082D12027B2C0100042C07110917FE012B04162B0117110C110D285D02000611041631110206110B1104110F110C110D285E020006092C12027B29010004067B2A020004166FEF040006082C13027B29010004067B2A020004110E6FEF040006027B2B010004173BF2FDFFFF2A133010006202000
  045000011027B2501000414FE0313040E0516540E04165405165402027B33010004037B290200049A7D3001000402027B34010004037B290200049A7D3101000402027B32010004037B290200049A7D2F010004027B300100041604045A28C100000A027B310100041604045A28C100000A027B2F0100041604045A28C10000
  0A027B24010004037B290200042C03162B0117037B2B020004037B2C020004037B2D020004037B2E020004027B35010004027B360100040404027B30010004027B310100040E040E050E0612026F71030006081104602D08027B2E0100042C2C0E054A172F090E044A182F03161304027B30010004027B2F01000404045A28C
  200000A050E044A540E04165411042D0B027B2E010004394B010000160A2B51160B2B3E027B31010004060728C300000A2C2A027B2F01000406071728C000000A027B3101000406071628C000000A0E050E054A17595405054A175854071758D10B07042F060E054A1630B8061758D10A06042F060E054A1630A511042D012A
  027B300100041604045A28C100000A027B25010004037B290200042C03162B0117037B2B020004037B2C020004037B2D020004037B2E020004027B35010004027B360100040404027B30010004027B310100040E040E05120312026F71030006082C13027B300100041604045A28C100000A0E0416540E044A1630060E054A1
  63165160A2B58160B2B46027B2F010004060728C300000A2C32027B31010004060728C300000A2D0F027B30010004060728C300000A2C14027B2F01000406071628C000000A05054A175954071758D10B07042F05054A1630B1061758D10A06042F05054A16309F2A0000133005006D00000046000011160A2B60160B2B4F02
  7B31010004060728C300000A2C3B027B2C0100042C04170C2B02180C0517591003027B29010004037B2A0200040607086FF0040006027B290100046FF10400062D0702187D2B010004071758D10B07042F04051630A9061758D10A06042F04051630982A00000013300800C200000047000011160A38AF000000160B3898000
  000027B30010004060728C300000A398100000005175910030E042D08027B2C0100042C340E052D04170C2B02160C027B29010004037B2A0200040607086FF0040006027B290100046FF10400062D4502187D2B0100042B3C1203037B2B020004076C0E065A58037B2C020004066C0E075A580E060E07037B2A020004060728
  EA040006027B27010004098C740000026FBA00000A071758D10B07042F0705163D5DFFFFFF061758D10A06042F0705163D46FFFFFF2A000013300800B500000048000011160A38A2000000160B388B000000027B2F010004060728C300000A2C7705175910030E042D08027B2C0100042C2A027B29010004037B2A020004060
  7166FF0040006027B290100046FF10400062D4502187D2B0100042B3C1202037B2B020004076C0E055A58037B2C020004066C0E065A580E050E06037B2A020004060728EA040006027B27010004088C740000026FBA00000A071758D10B07042F0705163D6AFFFFFF061758D10A06042F0705163D53FFFFFF2A00000013300F
  00D7000000490000111A8D7B0000010A06160E051759D19D06170E061759D19D06180E071759D19D06190E081759D19D022C19026F010300062D11026F2E0300061304120428C400000A2B01170B072D11026F410300061304120428C400000A2B01160C082D03162B0F026F230300061305120528C500000A0D072D440F0B2
  8BB00000A2C3B026F0A0300061306120628430000061D3329026F0A03000613061206287E0000062C18026F0A03000628E1010006026F0B03000628FF0200061000020807160903040503590E04045906160E090E0B0E0A16FE0373530200062A0013300200210000004100001102743D0000020A03067B200100045104067B
  21010004685305067B22010004542A00000013300F00AF0000004A0000111A8D7B0000010A0616031759D19D0617041759D19D0618051759D19D06190E041759D19D022C19026F8D0200062D11026FBC0200061304120428C400000A2B01170B072D11026FC90200061304120428C400000A2B01160C082D03162B0F026FB20
  200061305120528C500000A0D0208070E062C03172B01160923000000000000F0C22300000000000000C323000000000000004323000000000000104306160E050E070E0616FE0373530200062A0013300200210000004100001102743D0000020A03067B200100045104067B21010004685305067B22010004542A00000013
  3003004E0000004B000011166A0A170217591F1F5F620B2B3A0618620A03075F2D1404075F2D080304100110022B2006176A600A2B1904075F2D0F06196A600A03046610016610022B0506186A600A0717640B071635C2062A0000133004006F0000004C000011160A160B170C2B5703196A5F0D0925196A3603262B406D450
  400000002000000080000000E000000180000002B2806070A0B2B220708600B2B1C0608600A0708600B2B1206070817621759610A08176217596108610B03186410010817620C0817021F1F5F6237A00406540507542A00133003001900000004000011032D03166A2A1F0903591A5A1A580A02061F3F5F62036E602A000000
  133003001C00000004000011032D03166A2A1F0903591A5A1A580A02176A58061F3F5F62176A592A3A024C1F0F6A5F6902024C1A64552A00133006001A00000004000011024C1F0F6A5F690A02024C1A1A1F0906595A581F3F5F6455062AB202283E00000A02037D4801000402047D4901000402057D4A010004020E047D4B0
  10004020E057D4C0100042A0013300400B10100004D0000110273B800000A7D4F01000402283E00000A020E0B2D0B2300000000000000002B160E0423FCA9F1D24D62503F5A2300000000000010415B7D59010004020E0B2D0B2300000000000000002B160E0523FCA9F1D24D62503F5A2300000000000010415B7D5A010004
  020E087D5B01000402191F090E09288D00000A28B900000A7D5C010004020E0A0E08027B5C01000473FF0400067D51010004021720002000000E06288D00000A28B900000A7D5D01000402177D530100040F0728BB00000A2C0C02037D4D01000438940000000F0728BC00000A23FFFFFFFFFFFFEF7F3313027B510100046F0
  405000602197D530100042A0F0728BC00000A230000000000000000340802197D530100042A02030F0728BC00000A027C550100046F730300067D4D01000423E90B21E7FDFFEF3F0F0728BC00000A5A0B072300000000000000003617027B550100042D0F0203076F740300067D4E0100042B0702177D5501000404050E040E
  0573FB0400060A0E0C2C080206286D0200060A066FF9040006027B5C0100043216027B510100040617166F0205000602197D530100042A02177D52010004027B4F010004066FBA00000A2A00000013300500240100004E000011027B4D01000412001202120112036F7203000638F9000000036FF90400062C031A2B021F101
  304037B3F02000411046C5B130506037B3D02000459027B590100045911055B28C600000A130611062300000000000000003FC600000007037B3D02000459027B590100045811055B28C600000A1307110711046C3CA300000011061107409A000000037B4002000411046C5B130808037B3E02000459027B5A010004591108
  5B28C600000A13091109230000000000000000326809037B3E02000459027B5A0100045811085B28C600000A130A110A11046C2F481109110A3342027B5B0100042C17036FF904000616310E027B510100040317176F02050006110511080311096D11066D73FA0400061001036FF9040006027B5C0100043FF6FEFFFF032A1
  33003005D000000030000110E040259045B2300000000000010415A28C600000A690A061632080620000004003203166A2A0E050359055B2300000000000010415A28C600000A690B071632080720000004003203166A2A1F12060728650200061F0928670200062AA2022873020006027B510100046F010500062D1302027B
  510100046F000500067D50010004172A162A1E027B500100042A000013300500D000000043000011027B540100042C02172A027B4D01000412001202120112036F72030006037B3D020004063409037B3D0200040A2B10037B3D020004073607037B3D0200040B037B3E020004083409037B3E0200040C2B10037B3E0200040
  93607037B3E0200040D037B3D020004037B3F020004581304037B3E020004037B40020004581305110406340511040A2B08110407360311040B110508340511050C2B08110509360311050D0706230000000000001042037B3F0200045A5830160908230000000000001042037B400200045A58FE022A172A13300700CD0100
  004F000011027B530100041840B4010000027B510100046F0605000639A401000002177D530100043898010000027B4F0100046FBE00000A2D0802197D530100042A027B4F0100046FBF00000A74780000020A066FF90400062C031A2B021F101305020611051201120212031204287402000611042C2E066FF90400062D260
  716300409163110020628720200062C0702177D54010004027B510100040616166F0205000607095808582D2311042C0C066FF9040006163E09010000027B510100040616166F0205000638F6000000027B5201000407580958085817591306066FF9040006163141090858163003162B0117130A1106027B5D010004311402
  7B5101000406110A166F0205000638B3000000027B5B0100042C0F027B5101000406110A176F020500060211067D52010004027B540100042D27066FF90400061758027B5C0100042F17066FF90400062D0C1106027B5D010004FE022B04162B01171307067B3F02000411056C5B1308067B4002000411056C5B13090916310
  A0206110509287502000608163110020611050811071108110928760200060716311002061105071107110811092877020006027B510100046F050500062C0702187D53010004027B53010004173B5CFEFFFF2A000000133010008902000050000011027B4E01000414FE030C0E0516540E041654051654027B570100042C0F
  027B57010004166FAF00000A042E2902040473B700000A7D5701000402040473B700000A7D5801000402040473B700000A7D560100042B2D027B570100041604045A28C100000A027B580100041604045A28C100000A027B560100041604045A28C100000A027B4D010004036FF90400062C03162B0117037B3D020004037B3
  E020004037B3F020004037B40020004027B59010004027B5A0100040404027B57010004027B580100040E040E050E0612006F710300060608602D08027B550100042C330E054A172F080E044A182F02160C027B57010004027B56010004027B570100046FAD00000A28C200000A050E044A540E041654082D0B027B55010004
  3967010000160D2B571613042B48027B5801000409110428C300000A2C31027B560100040911041728C000000A027B580100040911041628C000000A0E050E054A17595405054A1758540E054A2C0C11041758D1130411040432B3091758D10D09042F060E054A16309F082D012A027B570100041604045A28C100000A027B4
  E010004036FF90400062C03162B0117037B3D020004037B3E020004037B3F020004037B40020004027B59010004027B5A0100040404027B57010004027B580100040E040E05120112006F71030006062C13027B570100041604045A28C100000A0E041654054A163E800000000E044A1630060E054A1631741613052B6A1613
  062B59027B560100041105110628C300000A2C41027B580100041105110628C300000A2D11027B570100041105110628C300000A2C1F027B56010004110511061628C000000A05054A1759130711075411072D012A11061758D1130611060432A211051758D1130511050432912A000000133006005200000051000011160A2
  B47160B2B39027B58010004060728C300000A2C26027B540100042D03182B01170C027B5101000403060708166F030500060517592510032D012A0717580B076E046A32C10617580A066E046A32B32A0000133006006200000052000011160A2B57160B2B49027B57010004060728C300000A2C360E042C12027B5101000403
  060717166F030500062B17027B4F0100040E050E0603060773FA0400066FBA00000A0517592510032D012A0717580B076E046A32B10617580A066E046A32A32A0000133006006200000052000011160A2B57160B2B49027B56010004060728C300000A2C360E042C12027B5101000403060716166F030500062B17027B4F010
  0040E050E0603060773FA0400066FBA00000A0517592510032D012A0717580B076E046A32B10617580A066E046A32A32A3A02283E00000A02037D5E0100042A1E027B5E0100042A1E02175F16FE032A1E02185F16FE032A1E021B5F16FE032A00000013300C001401000053000011022C18026F010300062D10026F0A030006
  0A120028440000062D07168D180000012A026F2E0300060B120128C700000A2C16178D180000012516166A166A161416736B020006A22A026F0A0300060A1200283D0000062C490E07287A0200062D4003040503590E040459026F0A0300060A1200285D000006026F0A0300060A1200285E000006286E0200060C178D18000
  001251608166A171416736B020006A22A0F0828BB00000A2C39026F0A0300060A120028430000061D3328026F0A0300060A1200287E0000062C18026F0A03000628E1010006026F0B03000628FF02000610000203040503590E0404590E050E080E07287A0200060E060E07287B0200060E07287C02000617736C0200067378
  0200062A13300C008F00000054000011022C18026F8D0200062D10026F980200060A120028440000062D07168D180000012A026FBC0200060B120128C700000A2C16178D180000012516166A166A161416736B020006A22A0223000000000000F0C22300000000000000C3230000000000000043230000000000001043030E0
  405287A0200060405287B02000605287C02000616736C02000673780200062A00133003005C000000550000110274450000020A03067B480100041B28800200065104067B4A0100045205067B48010004067B490100042E0E067B490100041B28800200062B020350510E04067B4B0100042D03142B10067B4B0100046F2B03
  00066FC800000A512A133004002800000056000011038D7D0000010A0317590B2B1506070220FF0000006A5FD29C021E6410000717590B07162FE7062A1330020040000000570000110274450000027B480100040A72BD0400700B1200286A0200060C2B1E120028690200061F4158D10D120328C900000A0728CA00000A0B0
  817590C081630DE072A320274450000027B4A0100042A320274450000027B4B0100042A320274450000027B4C0100042A3A02283E00000A02037D630100042A320220E610000028880200062A3602283001000603288C0200062A3A0203731900000604288C0200062A3A0203732200000604288C0200062A00133003004D00
  0000000000000F000F0028460000062D150F0028490000062D0C0F00284B00000616FE012B011628480000060F0028460000062D090F0028490000062C0D28F70200062C0628950200062A0203738C0200062A000000133003009D0000005800001102283E00000A28F70200060A062C140F01284B0000062C0B28720400067
  33200000A7A0204289A02000602037D62010004027C6201000428440000062D5E28F8020006020628CC0200062C36027C62010004172845000006027C62010004027C6201000428490000062D10027C62010004284B00000616FE012B011628480000062A062C0B2832040006739700000A7A027C620100041628480000062A
  1E027B630100042A0000001B3005005000000004000011032C4C036F3400000A0A02062876030006FE017D6301000402288D0200062D260206289A020006027C62010004FE1513000002027C620100040318286E04000617284C000006DE0726733300000A7A2A01100000000003004548000745000001C2032C2C02288D020
  0062C0C0328760300066F3900000A2A030228990200066F3900000A027C620100040328520000062A32022899020006287B0300062A0000133001001400000019000011022899020006287B0300060A120028170000062A133001001C0000000F0000110228980200060A120028440000062D0B283B040006739700000A7A2A
  1B3002005A000000590000110272BF040070289B020006026FCB00000A2C0628950200062A026FCC00000A0A73320100060B739B03000607730A0200060C060873D80000060328D9000006076F4301000603738C0200060DDE0A062C06066F2300000ADC092A000001100000020020002E4E000A000000001B3002004000000
  05A00001102288D0200062C0628CD00000A2A73CE00000A0A0628CF00000A0B020773CA00000628F2020006076FD000000ADE0A072C06076F2300000ADC0673D100000A2A0110000002001B00142F000A000000001E1773860200062A5A02288D0200062D08021728B80200062A72C70400702A001330030045000000000000
  00028C4900000172D1040070289B0200060F0028D200000A2D1472C70400700F0028D300000A1728D400000A2D0628950200062A160273D500000A20E6100000289E0200062A1E027B620100042A1E027B640100042A6E03287A0300062D0B2833040006739700000A7A02037D640100042A2E022D070373D600000A7A2A000
  00013300300910000000000000002282E00000A2D1802283600000A2D1003282E00000A2D0803283600000A2C0B2857040006733200000A7A02283700000A230000000000805640361B283000000A2830040006028C61000001285D00000A733200000A7A03283700000A2300000000806ECD40361B283000000A2831040006
  038C61000001285D00000A733200000A7A0203730B00000604738A0200062A00000013300300300000005B00001173320100060A739B03000606730A0200060B0307731502000673FD0300060220E610000028FE030006066F430100062AA20372D5040070289B020006036FD700000A2C0628950200062A020304289D02000
  604738C0200062A000000133003004B0000005B0000110372FD040070289B020006036FD800000A2C0628950200062A73320100060A739B03000606730A0200060B0307731502000673D1030006020428D2030006066F4301000604738C0200062A26160203289E0200062A26170203289E0200062A26180203289E0200062A
  26190203289E0200062A261A0203289E0200062A261B0203289E0200062A261C0203289E0200062A261D0203289E0200062A26160203289F0200062A26170203289F0200062A26180203289F0200062A26190203289F0200062A261A0203289F0200062A261B0203289F0200062A261C0203289F0200062A261D0203289F020
  0062A00133002002C0000005C00001102288D0200062C0628D900000A2A73CE00000A0A020673DA00000A288F020006066FDB00000A73DC00000A2A96026FD800000A2C0628950200062A738702000625026FDD00000A73DE00000A6F8E0200062A6A02288D0200062C067EDF00000A2A02289902000628E000000A2A760F01
  28E100000A2C0673E200000A7A020F0128C500000A289A0200062A0013300100280000000F00001102288D0200062C067EDF00000A2A0228920200060228980200060A1200288000000628E000000A2A13300200370000000F00001102288D0200062C067EE300000A2A0228920200060228980200060A120028430000068C0
  8000002721705007028E400000A28E500000A2A8202288D0200062D12021628B802000628E500000A73D500000A2A28E600000A2A8202288D0200062D12021728B802000628E500000A73D500000A2A28E600000A2A000000133003001F0000005D00001173E700000A0A02060373F1030006731502000628F2020006066FE8
  00000A2A5E02288D0200062D0902161628BB0200062A28D900000A2A0013300300310000000F00001102288D0200062D23020228980200060A1200283F0000060228980200060A1200284100000628BB0200062A28D900000A2A00000013300400200000005C00001173CE00000A0A0206030473C0030006731502000628F20
  200060673E900000A2A13300100220000000F00001102288D0200062C067EEA00000A2A0228980200060A1200287B00000628EB00000A2A000013300300500000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E067EEA00000A2A022892020006036F9202000602289802000603
  6F9802000602289102000628C301000628EB00000A2A13300300530000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E067EEA00000A2A022892020006036F92020006022898020006036F9802000602289102000628C401000616FE0128EB00000A2A001330030050000000000
  0000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E067EEA00000A2A022892020006036F92020006022898020006036F9802000602289102000628C401000628EB00000A2A13300300500000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E06
  7EEA00000A2A022892020006036F92020006022898020006036F9802000602289102000628C601000628EB00000A2A13300300500000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E067EEA00000A2A022892020006036F92020006036F9802000602289802000602289102000
  628C501000628EB00000A2A13300300500000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E067EEA00000A2A022892020006036F92020006022898020006036F9802000602289102000628C501000628EB00000A2A13300500D10000000F00001102288D0200062D19032C1603
  6F8D0200062D0E022899020006036F990200062E067EEC00000A2A0228980200060A12002837000006173340036F980200060A1200283700000617332F0228980200060A120016283C000006036F980200060A120016283C00000602289002000628DF01000628ED00000A2A0228980200060A1200287B0000062D10036F980
  200060A1200287B0000062C067EEC00000A2A022892020006036F92020006022898020006036F980200060228900200062300000000000000001628BD01000628ED00000A2A000000133005004E0000000000000003282E00000A2D0803283600000A2C25721B050070283000000A2823040006038C61000001722D05007028
  9100000A73EE00000A7A020323FCA9F1D24D62503F035A283700000A1628E70200062A000013300300560000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E0628950200062A022892020006036F92020006022898020006036F9802000602289102000628BF010006022899020
  006288B0200062A000013300300560000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E0628950200062A022892020006036F92020006022898020006036F9802000602289102000628C0010006022899020006288B0200062A000013300300560000000000000002288D020006
  2D19032C16036F8D0200062D0E022899020006036F990200062E0628950200062A022892020006036F92020006022898020006036F9802000602289102000628C1010006022899020006288B0200062A000013300300560000000000000002288D0200062D19032C16036F8D0200062D0E022899020006036F990200062E062
  8950200062A022892020006036F92020006022898020006036F9802000602289102000628C2010006022899020006288B0200062A000013300100220000000F00001102288D0200062C067EEA00000A2A0228980200060A1200284400000628EB00000A2A000013300200370000005E00001102288D02000628EB00000A0A06
  28EF00000A2D13060228C902000628F000000A28F100000A2B010628EF00000A2C0628950200062A022A00133006004A0000005F00001102288D0200062C02142A0228980200061304120428440000062C0628710400062A28F8020006022898020006022891020006120012011202120328B9010006060708091728BE03000
  62A0000133003004F0000000F00001128F80200060228980200060A12002843000006172E370228980200060A120028430000061A3303032C230228980200060A1200287B0000062D13027C620100040228910200060328B80100062A172AAE02288D0200062C067EEC00000A2A022892020006022898020006022890020006
  28BB01000628ED00000A2A0013300100280000000F00001102288D0200062C067EEA00000A2A0228920200060228980200060A1200286D00000628EB00000A2A9602288D0200062C067EEC00000A2A02289802000602289002000628BC01000628ED00000A2A000013300100280000000F00001102288D0200062C067EDF000
  00A2A0228920200060228980200060A1200283700000628E000000A2A133004006A0000000F00001103172F20723F050070283000000A2868040006038C62000001285D00000A73EE00000A7A02288D0200062C0628950200062A022892020006030228980200060A12002837000006310628950200062A0228980200060A12
  0003285A00000602289902000673890200062A000013300200BE0000000F00001102288D0200062C067EDF00000A2A0228920200060228980200060A1200284300000618332D0228980200060A1200287B0000062C071628E000000A2A0228980200060A12002837000006175928E000000A2A0228980200060A12002843000
  0061E332F0228980200060A1200287B0000062C071628E000000A2A0228980200060A120028370000061759185B28E000000A2A0228980200060A120028430000061F0933140228980200060A1200287800000628E000000A2A7EDF00000A2A000013300400830000006000001103172F20723F050070283000000A28650400
  06038C62000001285D00000A73EE00000A7A0228D20200060A120028E100000A28EB00000A0B0728EF00000A2D14070328E000000A0628F200000A28F100000A2B010728EF00000A2C0628950200062A0228920200060228980200060C1202032861000006022899020006288B0200062A22021728D10200062A133002004C0
  000006100001102288D0200062D100228980200060A120028370000062D0628950200062A0228920200060228980200060A12000228980200060B12012837000006285A00000602289902000673890200062A13300100280000000F00001102288D0200062C067EDF00000A2A0228920200060228980200060A120028530000
  0628E000000A2A13300400740000006100001103172F20723F050070283000000A2866040006038C62000001285D00000A73EE00000A7A02288D0200062C0628950200062A022892020006030228980200060B12012853000006310628950200062A0228980200060B12010328540000060A120016284500000606022899020
  006738C0200062A133002005E0000000F00001102288D0200062D100228980200060A1200287B0000062C02022A0228920200060228980200060A120028490000062C112831010006022899020006288B0200062A02289802000602289102000628CB010006022899020006288B0200062A460223FCA9F1D24D62503F1728EC
  0200062A13300300940000006100001102288D0200062D39032C36036F8D0200062D2E022899020006036F9902000633200228980200060B1201287B0000062D10036F980200060B1201287B0000062C0628950200062A022892020006036F92020006022898020006036F9802000602289002000628D00100060A1200287B0
  000062C1312002871000006168F11000002187D6300000406022899020006738C0200062A13300200850000000F00001102288D0200062C0628950200062A0228980200060A120028440000062C02022A0228980200060A120028370000061731110228980200060A120028430000061A33210228980200060A120017284500
  0006022898020006022899020006738C0200062A28F802000602289802000602289102000628BA010006022899020006288B0200062A000000133004006E0000000000000002288D0200062C0628950200062A03230000000000000000321003282E00000A2D0803283600000A2C207243050070283000000A2861040006038
  C61000001285D00000A73EE00000A7A0228920200060228980200060228900200060328C7010006022899020006288B0200062A0000133002002D0000000F00001102288D0200062D230228980200060A120028430000061733120228980200060A1200283700000617FE012A162A00000013300100220000000F0000110228
  DD0200062D067EEC00000A2A0228980200060A1200285D00000628ED00000A2A000013300100220000000F0000110228DD0200062D067EEC00000A2A0228980200060A1200285E00000628ED00000A2A000013300100320000000F0000110228DD0200062C100228980200060A1200283F0000062D067EEC00000A2A0228980
  200060A1200285F00000628ED00000A2A000013300100320000000F0000110228DD0200062C100228980200060A120028410000062D067EEC00000A2A0228980200060A1200286000000628ED00000A2A000013300100190000000F00001102288D0200062D0F0228980200060A1200283F0000062A162A0000001330010019
  0000000F00001102288D0200062D0F0228980200060A120028410000062A162A000000133001003D0000000F00001102288D0200062D150228980200060A1200284300000628080200062D067EDF00000A2A0228920200060228980200060A1200285600000628E000000A2A00000013300400830000006100001103172F207
  23F050070283000000A2867040006038C62000001285D00000A73EE00000A7A02288D0200062D260228980200060B1201284300000628080200062C11030228980200060B12012856000006310628950200062A0228920200060228980200060B12010328580000060A120016284500000606022899020006738C0200062A00
  133003009400000062000011037257050070289B02000602288D0200062C067EEA00000A2A0228920200067E660100040228980200060B120128430000069A0A160C2B170306089A1B285100000A2D071728EB00000A2A0817580C08068E6932E3160D2B1B037E65010004099A1B285100000A2D071628EB00000A2A0917580
  D097E650100048E6932DB283000000A283C04000603285D00000A739700000A7A13300500990100006300001102288D0200062C0628950200062A03282E00000A2D0803283600000A2C25721B050070283000000A2823040006038C610000017271050070289100000A73EE00000A7A0228980200060C1202287B0000062C0C
  02289902000673880200062A0228920200060228900200060A03283700000A2395D626E80B2E113E067B650000045A3502022A0228980200060C120228460000062C14032300000000000000003202022A28950200062A0228F402000628F300000A6C2300000000008066405B23182D4454FB2109405A120028160000065B0
  B030765340C02289902000673880200062A04230000000000000000311004282E00000A2D0804283600000A2C207243050070283000000A2824040006048C61000001285D00000A73EE00000A7A052C0C04070358283700000A5A10020228DD0200062D420403286000000A230000000000000040075A362E0228980200060C
  120217285A000006731900000602289002000603041628C8010006022899020006288B0200062A02289802000602289002000603041628C8010006022899020006288B0200062A00000013300500AE0000006400001102288D0200062C0628950200062A03282E00000A2D0803283600000A2C25721B050070283000000A282
  3040006038C610000017299050070289100000A73EE00000A7A0228980200060B1201287B0000062C0C02289902000673880200062A0228920200060228900200060A03283700000A2395D626E80B2E113E067B640000045A3502022A022898020006022890020006032300000000000000001728C801000602289902000628
  8B0200062A0000133001000F0000000F0000110228980200060A120028460000062A22020328BF0200062A13300100160000000F0000110228980200060A120028470000062C031F642A1F6E2A0000133004006F0000000000000002288D0200062C0628950200062A03230000000000000000311003282E00000A2D0803283
  600000A2C207243050070283000000A2829040006038C61000001285D00000A73EE00000A7A022892020006022898020006022890020006030428CC010006022899020006288B0200062A0013301600B0030000650000110E0E16520E0F16520228E90200062C3B0E0C16540E0D0E080E095A54160B2B25160C2B180E0A0708
  1628C000000A0E0B07081728C000000A0817580C080E0932E30717580B070E0832D62A0E0A166FAF00000A0E0A176FAF00000A73B700000A0A0339F10000000E08185B0D090E095A1304062513082C0911086FAD00000A2D0616E013052B0C1108161628AE00000AE013050E0A2513092C0911096FAD00000A2D0616E013062
  B0C1109161628AE00000AE013060E0B25130A2C09110A6FAD00000A2D0616E013072B0C110A161628AE00000AE013071105110458130B1106110458130C1107110458130D02289802000602289102000623000000000000F0C223000000000000F0C223000000000000F0C223000000000000F0C22300000000000000432300
  000000000000430E060E0717171717110B110C110D110511061107090E0928AF01000614130814130914130A38D901000005230000000000000000FE0516FE0123000000000000F0C20E0658130E23000000000000F0C20E0758130F0E080E095A13100E08190E095A73B700000A1311252C200523000000000000F04259131
  205650E055923000000000000F0425813132B1E0523000000000000F04258131305650E055923000000000000F0425913120625130A2C09110A6FAD00000A2D0616E013142B0C110A161628AE00000AE013140E0A2513092C0911096FAD00000A2D0616E013152B0C1109161628AE00000AE013150E0B2513082C0911086FAD
  00000A2D0616E013162B0C1108161628AE00000AE0131611112513182C0911186FAD00000A2D0616E013172B0C1118161628AE00000AE013172C630228980200060228910200060411120411130E040E050E060E071112110FFE0316FE0111120E0558110F65FE0516FE0104110EFE0316FE01040E0458110E65FE0516FE011
  114111511161117111711105811171811105A580E080E0928AF0100062B610228980200060228910200060411120411130E040E050E060E071112110FFE0316FE0111120E0558110F65FE0516FE0104110EFE0316FE01040E0458110E65FE0516FE011117111711105811171811105A581114111511160E080E0928AF010006
  14130A1413091413081413180E0C16540E0D16541613192B6516131A2B4E061119111A28C300000A2C100E0A1119111A1728C000000A0E0F17520E0A1119111A28C300000A2C0A0E0C0E0C4A1758542B150E0B1119111A28C300000A2C080E0D0E0D4A175854111A1758131A111A0E0A176FAF00000A32A6111917581319111
  90E0A166FAF00000A328F2ABA0323000000000000000057042300000000000000005705230000000000000000570E04230000000000000000572A001B3005009C0100006600001104175202288D0200062C0628950200062A0228980200060A1200287B0000062C0C02289902000673880200062A0228920200060323000000
  000000000035100403230000000000000000FE0452022A0228980200060A120028460000062C05041652022A0002289002000613040228980200061204281700000628C9010006120428150000065B0B23FCA9F1D24D62503F0703286000000A5A0C03230000000000000040085A58130511052395D626E80B2E113E11047B6
  50000045A286100000A130523FCA9F1D24D62503F11055A0D1105230000000000000040095A5813050416520228980200060228900200060828C701000613060228980200060A120028470000062D260228980200060A1200288000000618331512062880000006182F0B022898020006130604175211060228900200061105
  091628C8010006130712071207284900000616FE0128480000061107022899020006738C0200061308DE37130904175211096F6401000620CA0004802E0E11096F6401000620C800048033142831010006022899020006738C0200061308DE02FE1A11082A0110000000006500FD6201372C00000213300200350000000F000
  01102288D0200062D2C0228980200060A1200284B0000062C0B2839040006739700000A7A0203732C0200068C3900000228F20200062A6A02288D0200062D110203732D0200068C3900000228F20200062A6603027B640100046F01000006027C620100040328850000062A00001B300500140100006700001102288D020006
  2C0628950200062A0228980200060A1200287B0000062C0C02289902000673880200062A0228980200060A120028460000062C02022A022892020006032300000000000000003502022A00022890020006130402289802000602289102000628C9010006120428150000065B0B23FCA9F1D24D62503F0703286000000A5A0C0
  30859130523FCA9F1D24D62503F11055A0D1105230000000000000040095A5913050228980200060228900200060828C70100060228900200061105091628C8010006130612061206284900000616FE0128480000061106022899020006738C0200061307DE25130811086F6401000620CA0004802E0E11086F6401000620C8
  0004803305021307DE02FE1A11072A01100000000051009BEC00252C000002133002006E0000000F00001102288D0200062D100228980200060A1200287B0000062C067EEC00000A2A0228920200060228980200060A120028490000062C0F23000000000080664028ED00000A2A02289802000602289102000628C90100062
  300000000008066405A23182D4454FB2109405B28ED00000A2A000013300200740000000F00001102288D0200062D100228980200060A1200287B0000062C0628950200062A0228920200060228980200060A120028490000062C23230000000000805640230000000000000000730B000006022899020006738A0200062A02
  289802000602289102000628CA010006022899020006738A0200062A13300300AA0000006800001102288D0200062C0628950200062A0228980200060B1201287B0000062C0C02289902000673880200062A0228920200060228980200060B1201284300000628080200062D110228980200060B120128430000061C3322283
  101000602289802000602289102000628C2010006022899020006288B0200062A0228980200060B12012880000006182F02022A73E50100060A020628F2020006066FF0010006022899020006288B0200062A000013300200200000006900001128F400000A72BB0500706FF500000A0A062C0B06A5620000011F6EFE042A16
  2A1B300200460000006A000011FE137E700100042D3C7E710100040A160B06120128F600000AFE137E700100042D1728F9020006289501000628F700000A17FE138070010004DE0A072C060628F800000ADC2A000001100000020011002A3B000A00000000133002001C0000006900001128F400000A72E30500706FF500000
  A0A062D02162A06A5620000012A1330070021020000000000001F108D6300000125167215000070A225177227000070A22518723B000070A225197261000070A2251A7211060070A2251B721D060070A2251C7271000070A2251D722D060070A2251E724D060070A2251F0972A1000070A2251F0A72D1000070A2251F0B7267
  060070A2251F0C7245010070A2251F0D728D060070A2251F0E72AB060070A2251F0F72C7060070A280650100041F0C8D1800001B2516168D63000001A22517188D6300000125167215000070A225177227000070A2A22518198D6300000125167215000070A225177211060070A22518723B000070A2A22519198D630000012
  5167215000070A22517721D060070A225187261000070A2A2251A198D6300000125167215000070A225177267060070A225187271000070A2A2251B1A8D6300000125167215000070A225177267060070A2251872A1000070A22519722D060070A2A2251C1A8D6300000125167215000070A225177267060070A2251872D100
  0070A22519724D060070A2A2251D188D6300000125167215000070A225177267060070A2A2251E198D6300000125167215000070A225177211060070A22518728D060070A2A2251F09198D6300000125167215000070A225177211060070A2251872E1060070A2A2251F0A198D6300000125167215000070A22517721D06007
  0A2251872C7060070A2A2251F0B188D6300000125167215000070A225177245010070A2A2806601000416FE138070010004733E00000A80710100042A3A02283E00000A02037D7A0100042A22021628FD0200062A360228300100060328000300062A3A020373190000060428000300062AD20F000F00284B00000616FE0128
  480000060F0028470000062D1228F70200062C0B2872040006733200000A7A020373000300062A0013300300490000000000000002283E00000A0204280C0300060F010F01284B00000616FE01284800000602037D79010004027C7901000428440000062D16286F030006027C7901000402284403000628450000062A1E027
  B7A0100042A0000001B3005004C00000004000011032C48036F3400000A0A020615FE017D7A0100040228010300062D260206280C030006027C79010004FE1513000002027C790100040318286E04000616284C000006DE0726733300000A7A2A01100000000003004144000745000001B2032C280228010300062C0803156F
  3900000A2A0302280B0300066F3900000A027C790100040328520000062A000000133001001C0000000F00001102280A0300060A120028440000062D0B283B040006739700000A7A2A1B300300580000006B0000110272BF040070280D030006026FCB00000A2C0628070300062A026FCC00000A0A73320100060B067397030
  00607730A02000673D8000006036FD9000006076F430100060328FF0200060CDE0A062C06066F2300000ADC082A01100000020020002C4C000A000000001B300200400000005A0000110228010300062C0628CD00000A2A73CE00000A0A0628CF00000A0B020773CA000006286C030006076FD000000ADE0A072C06076F2300
  000ADC0673D100000A2A0110000002001B00142F000A000000001E1773FB0200062A5A0228010300062D080217282A0300062A72C70400702A00133003004000000000000000028C4900000172D1040070280D0300060F0028D200000A2D1472C70400700F0028D300000A1728D400000A2D0628070300062A0273D500000A1
  628110300062A1E027B790100042A1E027B7B0100042A7E0316320803203F420F00310B2864040006739700000A7A02037D7B0100042A133004004B0000000000000002282E00000A2D1802283600000A2D1003282E00000A2D0803283600000A2C0B2857040006733200000A7A020323000000000000F8FF23000000000000
  F8FF73100000060473FE0200062A0013300300390000006C000011036FD700000A2C0628070300062A73320100060A03739703000606730A02000673FD03000602046FFE030006066F430100060428FF0200062A00000013300300390000006C000011036FD800000A2C0628070300062A73320100060A03739703000606730
  A02000673D103000602046FD2030006066F430100060428FF0200062A520272FB060070280D030006160203280F0300062A52027221070070280D030006170203280F0300062A52027241070070280D030006180203280F0300062A5202726B070070280D030006190203280F0300062A5202728F070070280D0300061A0203
  280F0300062A520272B9070070280D0300061B0203280F0300062A520272ED070070280D0300061C0203280F0300062A5202721B080070280D0300061D0203280F0300062A52027255080070280D03000616020328100300062A5202726D080070280D03000617020328100300062A5202727F080070280D030006180203281
  00300062A5202729B080070280D03000619020328100300062A520272B1080070280D0300061A020328100300062A520272CD080070280D0300061B020328100300062A520272F3080070280D0300061C020328100300062A52027213090070280D0300061D020328100300062A000000133002002C0000005C000011022801
  0300062C0628D900000A2A73CE00000A0A020673DA00000A2803030006066FDB00000A73DC00000A2A96026FD800000A2C0628070300062A73FC02000625026FDD00000A73DE00000A6F020300062A6A0228010300062C067EDF00000A2A02280B03000628E000000A2A760F0128E100000A2C0673E200000A7A020F0128C50
  0000A280C0300062A0013300100280000000F0000110228010300062C067EDF00000A2A02280403000602280A0300060A1200288000000628E000000A2A13300200370000000F0000110228010300062C067EE300000A2A02280403000602280A0300060A120028430000068C08000002721705007028E400000A28E500000A
  2AAE0228010300062C0628070300062A02280403000602280A03000628B601000602280B03000628FF0200062A820228010300062D120216282A03000628E500000A73D500000A2A28E600000A2A820228010300062D120217282A03000628E500000A73D500000A2A28E600000A2A000000133003001A0000005D00001173E
  700000A0A02060373F1030006286C030006066FE800000A2A5E0228010300062D09021616282D0300062A28D900000A2A000013300300310000000F0000110228010300062D230202280A0300060A1200283F00000602280A0300060A12002841000006282D0300062A28D900000A2A000000133004001B0000005C00001173
  CE00000A0A0206030473C0030006286C0300060673E900000A2A0013300100220000000F0000110228010300062C067EEA00000A2A02280A0300060A1200287B00000628EB00000A2A960228010300062C067EEA00000A2A02280403000602280A03000628AA01000628EB00000A2AAE0228010300062C0628070300062A022
  80403000602280A03000628B301000602280B03000628FF0200062A133002004A000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F0403000602280A030006036F0A030006289E01000628EB00000A2A0000133005000E01000004000011
  0228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A04284F00000A2C1B283000000A2869040006168C62000001285D00000A733200000A7A046F8C00000A1F092E20283000000A2869040006046F8C00000A8C62000001285D00000A733200000A7A160A2B6D04066FAC00000A1
  F542E5E04066FAC00000A1F462E5304066FAC00000A1F2A2E4804066FAC00000A1F302E3D04066FAC00000A1F312E3204066FAC00000A1F322E27283000000A286A040006068C6200000104066FAC00000A8C70000001289100000A733200000A7A0617580A061F09328E022804030006036F0403000602280A030006036F0A
  0300060428A401000628EB00000A2A0000133002004D000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F0403000602280A030006036F0A030006289F01000616FE0128EB00000A2A000000133002004F000000000000000228010300062
  D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F04030006286F03000602280A030006036F0A030006289F01000628EB00000A2A00133002004A000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804
  030006036F0403000602280A030006036F0A03000628A001000628EB00000A2A0000133002004A000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F0403000602280A030006036F0A03000628A101000628EB00000A2A0000133002004F0
  00000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F04030006286F030006036F0A03000602280A03000628A201000628EB00000A2A00133002004F000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B03
  00062E067EEA00000A2A022804030006036F04030006286F03000602280A030006036F0A03000628A201000628EB00000A2A00133002004A000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEA00000A2A022804030006036F0403000602280A030006036F0A03000628A
  301000628EB00000A2A000013300300DE0000006D0000110228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E067EEC00000A2A02280A0300060A1200283700000617335D036F0A0300060A1200283700000617334C02280A0300060A1200285D000006036F0A0300060A1200285D000006590228
  0A0300060A1200285E000006036F0A0300060A1200285E000006590B255A07075A58284500000A28ED00000A2A02280A0300060A1200287B0000062D10036F0A0300060A1200287B0000062C067EEC00000A2A022804030006036F0403000602280A030006036F0A03000628AB01000628ED00000A2A0000133005007000000
  0000000000228010300062C0628070300062A03282E00000A2D0803283600000A2C25721B050070283000000A2823040006038C61000001722D050070289100000A73EE00000A7A032300000000000000003302022A022804030006020323FCA9F1D24D62503F035A283700000A16285F0300062AAE0228010300062C062807
  0300062A02280403000602280A030006289901000602280B03000628FF0200062A1330020050000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E0628070300062A022804030006036F0403000602280A030006036F0A030006289A01000602280B03000628FF0200062A13300
  20050000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E0628070300062A022804030006036F0403000602280A030006036F0A030006289B01000602280B03000628FF0200062A1330020050000000000000000228010300062D19032C16036F010300062D0E02280B03000603
  6F0B0300062E0628070300062A022804030006036F0403000602280A030006036F0A030006289C01000602280B03000628FF0200062A1330020050000000000000000228010300062D19032C16036F010300062D0E02280B030006036F0B0300062E0628070300062A022804030006036F0403000602280A030006036F0A030
  006289D01000602280B03000628FF0200062A13300100220000000F0000110228010300062C067EEA00000A2A02280A0300060A1200284400000628EB00000A2A000013300200370000005E00001102280103000628EB00000A0A0628EF00000A2D130602284103000628F000000A28F100000A2B010628EF00000A2C062807
  0300062A022A0013300500440000005F0000110228010300062C02142A02280A0300061304120428440000062C0628710400062A286F03000602280A030006120012011202120328B1010006060708091628BE0300062A13300200350000000F000011286F03000602280A0300060A1200283700000617311D02280A0300060
  A120028430000061A2E0C02280A03000628B00100062A172A960228010300062C067EEC00000A2A02280403000602280A03000628A701000628ED00000A2A00133002003B0000000F0000110228010300062D1002280A0300060A1200287B0000062C0628070300062A02280403000602280A03000628A901000602280B0300
  0628FF0200062A0013300100280000000F0000110228010300062C067EEA00000A2A02280403000602280A0300060A1200286A00000628EB00000A2A1330020066000000540000110228010300062D3402280A0300060A12002843000006182E2902280A0300060A120028430000061E2E1802280A0300060A1200284300000
  61F092E067EEA00000A2A0228040300060228470300060B0728F900000A2D0D0702282F03000628FA00000A2A072A7E0228010300062C067EEC00000A2A02280A03000628A601000628ED00000A2A000013300100280000000F0000110228010300062C067EDF00000A2A02280403000602280A0300060A1200283700000628
  E000000A2A13300400800000006E00001103172F20723F050070283000000A2868040006038C62000001285D00000A73EE00000A7A02280103000628EB00000A0A0628EF00000A2D19060328E000000A02284A03000628F200000A28F100000A2B010628EF00000A2C0628070300062A02280403000602280A0300060B12010
  3285A00000602280B03000673FE0200062A13300200BE0000000F0000110228010300062C067EDF00000A2A02280403000602280A0300060A1200284300000618332D02280A0300060A1200287B0000062C071628E000000A2A02280A0300060A12002837000006175928E000000A2A02280A0300060A120028430000061E33
  2F02280A0300060A1200287B0000062C071628E000000A2A02280A0300060A120028370000061759185B28E000000A2A02280A0300060A120028430000061F09331402280A0300060A1200287800000628E000000A2A7EDF00000A2A000013300400830000006000001103172F20723F050070283000000A2865040006038C6
  2000001285D00000A73EE00000A7A02284C0300060A120028E100000A28EB00000A0B0728EF00000A2D14070328E000000A0628F200000A28F100000A2B010728EF00000A2C0628070300062A02280403000602280A0300060C120203286100000602280B03000628FF0200062A00133002002C0000000F0000110228010300
  062D1002280A0300060A1200287B0000062C0628070300062A0228040300060217284B0300062A13300200390000006F0000110228010300062D1002280A0300060A1200287B0000062C0628070300062A0228040300060202284A0300060B120128C500000A284B0300062A000000133002002D0000000F000011022801030
  0062D2302280A0300060A1200284300000617331202280A0300060A1200283700000617FE012A162A00000013300100220000000F0000110228500300062D067EEC00000A2A02280A0300060A1200285D00000628ED00000A2A000013300100220000000F0000110228500300062D067EEC00000A2A02280A0300060A120028
  5E00000628ED00000A2A000013300100320000000F0000110228500300062C1002280A0300060A1200283F0000062D067EEC00000A2A02280A0300060A1200285F00000628ED00000A2A000013300100320000000F0000110228500300062C1002280A0300060A120028410000062D067EEC00000A2A02280A0300060A12002
  86000000628ED00000A2A000013300100190000000F0000110228010300062D0F02280A0300060A1200283F0000062A162A00000013300100190000000F0000110228010300062D0F02280A0300060A120028410000062A162A00000013300200610000000F0000110228010300062D3602280A0300060A1200287B0000062D
  2602280A0300060A1200284300000628080200062D1702280A0300060A120028430000061C2E0628070300062A02280403000602280A03000628A801000602280B03000628FF0200062A00000013300200530000000F0000110228010300062D2502280A0300060A1200284300000628080200062C1002280A0300060A12002
  87B0000062C0628070300062A02280403000602280A0300060A1200285900000602280B03000628FF0200062A00133001003D0000000F0000110228010300062D1502280A0300060A1200284300000628080200062D067EDF00000A2A02280403000602280A0300060A1200285500000628E000000A2A000000133004009B00
  00006E00001103172F20723F050070283000000A2867040006038C62000001285D00000A73EE00000A7A0228010300062D1802280A0300060B12012843000006280802000616FE012B011728EB00000A0A0628EF00000A2D19060328E000000A02285903000628F200000A28F100000A2B010628EF00000A2C0628070300062
  A02280403000602280A0300060B120103285700000602280B03000628FF0200062A0013300100280000000F0000110228010300062C067EDF00000A2A02280403000602280A0300060A1200285300000628E000000A2A13300400800000006E00001103172F20723F050070283000000A2866040006038C62000001285D0000
  0A73EE00000A7A02280103000628EB00000A0A0628EF00000A2D19060328E000000A02285B03000628F200000A28F100000A2B010628EF00000A2C0628070300062A02280403000602280A0300060B120103285400000602280B03000628FF0200062A460223FCA9F1D24D62503F17286E0300062A000013300300940000006
  2000011037257050070280D0300060228010300062C067EEA00000A2A0228040300067E7D01000402280A0300060B120128430000069A0A160C2B170306089A1B285100000A2D071728EB00000A2A0817580C08068E6932E3160D2B1B037E7C010004099A1B285100000A2D071628EB00000A2A0917580D097E7C0100048E69
  32DB283000000A283C04000603285D00000A739700000A7A13300500210100000F0000110228010300062C0628070300062A03282E00000A2D0803283600000A2C25721B050070283000000A2823040006038C610000017271050070289100000A73EE00000A7A04230000000000000000311004282E00000A2D08042836000
  00A2C207243050070283000000A2824040006048C61000001285D00000A73EE00000A7A02280A0300060A1200287B0000062C0C02280B03000673FD0200062A03283700000A2311EA2D819997713D0228680300065A3502022A022804030006052C0A0403283700000A5A10020228500300062D370403286000000A02286803
  0006362802280A0300060A120017285A0000067319000006030416289701000602280B03000628FF0200062A02280A030006030416289701000602280B03000628FF0200062A00000013300500A10000000F0000110228010300062C0628070300062A03282E00000A2D0803283600000A2C25721B050070283000000A28230
  40006038C610000017299050070289100000A73EE00000A7A02280A0300060A1200287B0000062C0C02280B03000673FD0200062A02280403000603283700000A2311EA2D819997713D0228680300065A3502022A02280A0300060323000000000000000017289701000602280B03000628FF0200062A000000133002007F00
  00000F0000110228010300062C0628070300062A02280A0300060A120028440000062C02022A02280A0300060A1200283700000617311102280A0300060A120028430000061A332102280A0300060A120017284500000602280A03000602280B03000628FF0200062A286F03000602280A03000628B201000602280B0300062
  8FF0200062A00133002008E000000610000110228010300062D39032C36036F010300062D2E02280B030006036F0B030006332002280A0300060B1201287B0000062D10036F0A0300060B1201287B0000062C0628070300062A022804030006036F0403000602280A030006036F0A03000628CE0100060A1200287B0000062C
  1312002871000006168F11000002187D630000040602280B03000628FF0200062A00001330040068000000000000000228010300062C0628070300062A03230000000000000000321003282E00000A2D0803283600000A2C207243050070283000000A2861040006038C61000001285D00000A73EE00000A7A0228040300060
  2280A0300060328B401000602280B03000628FF0200062A13300100160000000F00001102280A0300060A120028470000062C031F642A1F6E2A22020328340300062A0013300B00A5000000700000110E0A166FAF00000A0E0A176FAF00000A73B700000A0A02280A03000604050E040E050E060E07060E0A0E0B0E0E28AD01
  00060E0C16540E0D16540E0F1652160B2B57160C2B4406070828C300000A2C0E0E0A07081728C000000A0E0F17520E0A070828C300000A2C0A0E0C0E0C4A1758542B130E0B070828C300000A2C080E0D0E0D4A1758540817580C080E0A176FAF00000A32B10717580B070E0A166FAF00000A329E2A4602280A0300060304050
  E0428B70100062A001330050023000000710000110212001201120212036F720300060806590806595A0907590907595A58284500000A2A0013300400B4000000720000110417520228010300062C0628070300062A02280A03000613041204287B0000062C0C02280B03000673FD0200062A02280403000603230000000000
  00000035100403230000000000000000FE0452022A0228680300060A237B14AE47E17A843F0603286000000A5A0B03230000000000000040075A580D23FCA9F1D24D62503F095A0C09230000000000000040085A580D04165202280A0300060728B4010006090816289701000602280B03000628FF0200062A1330020035000
  0000F0000110228010300062D2C02280A0300060A1200284B0000062C0B283A040006739700000A7A020373200200068C38000002286C0300062A6A0228010300062D11020373210200068C38000002286C0300062A6603027B7B0100046F01000006027C790100040328850000062A00001330040096000000720000110228
  010300062C0628070300062A02280A03000613041204287B0000062C0C02280B03000673FD0200062A022804030006032300000000000000003502022A0228680300060A237B14AE47E17A843F0603286000000A5A0B0307590D23FCA9F1D24D62503F095A0C09230000000000000040085A590D02280A0300060728B401000
  6090816289701000602280B03000628FF0200062A00001330040069000000000000000228010300062C0628070300062A03230000000000000000311003282E00000A2D0803283600000A2C207243050070283000000A2829040006038C61000001285D00000A73EE00000A7A02280403000602280A030006030428B5010006
  02280B03000628FF0200062A1A28F80200062A13300700EC010000000000001F0F8D6300000125167215000070A225177227000070A22518723B000070A225197261000070A2251A7211060070A2251B721D060070A2251C7271000070A2251D722D060070A2251E724D060070A2251F0972A1000070A2251F0A72D1000070A
  2251F0B7267060070A2251F0C728D060070A2251F0D72AB060070A2251F0E72C7060070A2807C0100041F0B8D1800001B2516168D63000001A22517188D6300000125167215000070A225177227000070A2A22518198D6300000125167215000070A225177211060070A22518723B000070A2A22519198D6300000125167215
  000070A22517721D060070A225187261000070A2A2251A198D6300000125167215000070A225177267060070A225187271000070A2A2251B1A8D6300000125167215000070A225177267060070A2251872A1000070A22519722D060070A2A2251C1A8D6300000125167215000070A225177267060070A2251872D1000070A22
  519724D060070A2A2251D188D6300000125167215000070A225177267060070A2A2251E198D6300000125167215000070A225177211060070A22518728D060070A2A2251F09198D6300000125167215000070A225177211060070A2251872AB060070A2A2251F0A198D6300000125167215000070A22517721D060070A22518
  72C7060070A2A2807D0100042A13300200440000000000000002283E00000A02037D7E01000402047D7F01000402057D80010004020E047D81010004020E057D82010004020E067D83010004020E077D84010004020E087D850100042A0A152A0013300A00936E00000000000073FB00000A80860100047E860100042018100
  0002018100000723F09007020181000007249090070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420191000002019100000723F090070201910000072760A0070726A0A007023000000000000F03F2300000040A65458412375931814C43F58417375
  0300066FFC00000A7E86010004201A100000201A100000723F090070201A10000072CD0B0070726A0A007023000000000000F03F23000000C0A554584123B81E8593C33F584173750300066FFC00000A7E86010004201B100000201B100000723F090070201B100000723A0D0070726A0A007023000000000000F03F2300000
  000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004201C100000201C100000723F090070201C100000728F0E0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E86010004201F100000201F100000723F090070201F10000072DA0F007072
  6A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420201000002020100000723F090070202010000072FD100070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E860100042021100000202110000
  0723F09007020211000007234120070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420221000002022100000723F09007020221000007277130070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00
  000A7E8601000420231000002023100000723F090070202310000072A0140070726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E8601000420241000002024100000723F090070202410000072F9150070726A0A007023000000000000F03F2314AE4749C25458412
  37B14AEB7883F584173750300066FFC00000A7E8601000420251000002025100000723F09007020251000007232170070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420261000002026100000723F09007020261000007257180070726A0A00702300
  0000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420271000002027100000723F090070202710000072BC190070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420281000002028100000723F0900702
  02810000072FF1A0070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420291000002029100000723F0900702029100000725E1C0070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E860100
  04202A100000202A100000723F090070202A10000072AD1D0070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E86010004202B100000202B100000723F090070202B10000072041F0070726A0A007023000000000000F03F239A999999B754584123333333F3993
  F584173750300066FFC00000A7E86010004202D100000202D100000723F090070202D1000007243200070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004202E100000202E100000723F090070202E100000725E210070726A0A007023000000000000F0
  3F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004202F100000202F100000723F090070202F100000729F220070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420301000002030100000723F090070203010000072E
  0230070726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E8601000420311000002031100000723F09007020311000007245250070726A0A007023000000000000F03F23DF4F8D4FD553584123EC51B80E213F584173750300066FFC00000A7E860100042032100000
  2032100000723F090070203210000072B0260070726A0A007023000000000000F03F23E7FBA9C9D45358412314AE4789203F584173750300066FFC00000A7E8601000420331000002033100000723F0900702033100000721B280070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F58417375030
  0066FFC00000A7E8601000420341000002034100000723F09007020341000007244290070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420351000002035100000723F090070203510000072832A0070726A0A007023000000000000F03F231F85EB49
  ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420361000002036100000723F090070203610000072A82B0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420371000002037100000723F090070203710000072D12C0070726A0
  A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420381000002038100000723F0900702038100000722E2E0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100042039100000203910000072
  3F090070203910000072932F0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004203A100000203A100000723F090070203A10000072BE300070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000
  A7E86010004203B100000203B100000723F090070203B1000007207320070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E86010004203C100000203C100000723F090070203C1000007252330070726A0A007023000000000000F03F231F85EB49ED53584123C1
  CAA1BD1B3F584173750300066FFC00000A7E86010004203D100000203D100000723F090070203D10000072BD340070720E36007023A9744563CC81D33F23000000C0F8F4734123000000109CE3734173750300066FFC00000A7E86010004203E100000203E100000723F090070203E100000722A360070726A0A00702300000
  0000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004203F100000203F100000723F090070203F1000007261370070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420401000002040100000723F0900702040
  10000072A2380070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420411000002041100000723F090070204110000072E1390070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042
  0421000002042100000723F0900702042100000722C3B0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420431000002043100000723F090070204310000072713C0070726A0A007023000000000000F03F2300000040A65458412375931814C43F58
  4173750300066FFC00000A7E8601000420441000002044100000723F090070204410000072CE3D0070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420451000002045100000723F090070204510000072FB3E0070726A0A007023000000000000F03F2
  300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420461000002046100000723F09007020461000007216400070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420471000002047100000723F0900702047100000724D41
  0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420481000002048100000723F0900702048100000729E420070726A0A007023000000000000F03F2300000000CF54584123759318ECC33F584173750300066FFC00000A7E860100042049100000204
  9100000723F090070204910000072A5430070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E86010004204A100000204A100000723F090070204A1000007204450070726A0A007023000000000000F03F2300000040A65458412375931814C43F58417375030006
  6FFC00000A7E86010004204B100000204B100000723F090070204B1000007289460070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004204D100000204D100000723F090070204D10000072D4470070726A0A007023000000000000F03F2300000040A65
  458412375931814C43F584173750300066FFC00000A7E86010004204E100000204E100000723F090070204E10000072F7480070726A0A007023000000000000F03F2300000000CF54584123759318ECC33F584173750300066FFC00000A7E86010004204F100000204F100000723F090070204F100000723C4A0070726A0A00
  7023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420501000002050100000723F090070205010000072914B0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420521000002052100000723F0
  90070205210000072FA4C0070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420531000002053100000723F090070205310000072394E0070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E
  8601000420541000002054100000723F090070205410000072784F0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420551000002055100000723F0900702055100000729D500070726A0A007023000000000000F03F2300000000E55458412396438
  BFCEB3F584173750300066FFC00000A7E8601000420561000002056100000723F090070205610000072DC510070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420571000002057100000723F09007020571000007247530070726A0A00702300000000
  0000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420581000002058100000723F090070205810000072A6540070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004205C100000205C100000723F090070205C100
  0007209560070726A0A007023000000000000F03F23621058D91654584123560E2D3A483F584173750300066FFC00000A7E86010004205D100000205D100000723F090070205D1000007236570070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205E
  100000205E100000723F090070205E1000007275580070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205F100000205F100000723F090070205F10000072D4590070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F58417
  3750300066FFC00000A7E8601000420601000002060100000723F090070206010000072095B0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420611000002061100000723F090070206110000072385C0070726A0A007023000000000000F03F23CD
  CCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420621000002062100000723F090070206210000072835D0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420631000002063100000723F090070206310000072B25E007
  0726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420641000002064100000723F090070206410000072F95F0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042065100000206510
  0000723F09007020651000007238610070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420661000002066100000723F09007020661000007261620070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FF
  C00000A7E8601000420671000002067100000723F09007020671000007292630070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420681000002068100000723F090070206810000072BD640070726A0A007023000000000000F03F2300000040C15458
  4123C74B37C1DF3F584173750300066FFC00000A7E8601000420691000002069100000723F090070206910000072EE650070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004206A100000206A100000723F090070206A100000721B670070726A0A00702
  3000000000000F03F2300000000AC54584123931804AEC93F584173750300066FFC00000A7E86010004206B100000206B100000723F090070206B100000727E680070726A0A007023000000000000F03F2300000000AC54584123931804AEC93F584173750300066FFC00000A7E86010004206C100000206C100000723F0900
  70206C10000072E1690070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004206D100000206D100000723F090070206D10000072166B0070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E860
  10004206E100000206E100000723F090070206E10000072336C0070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E86010004206F100000206F100000723F090070206F100000726A6D0070726A0A007023000000000000F03F2300000000E55458412396438BFC
  EB3F584173750300066FFC00000A7E8601000420701000002070100000723F0900702070100000728F6E0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420711000002071100000723F090070207110000072A66F0070726A0A00702300000000000
  0F03F2314AE4749C254584123AAF1D2BD883F584173750300066FFC00000A7E8601000420721000002072100000723F090070207210000072DF700070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420731000002073100000723F0900702073100000
  7210720070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420741000002074100000723F09007020741000007239730070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E860100042075100
  0002075100000723F0900702075100000727E740070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420761000002076100000723F090070207610000072BD750070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F58417375
  0300066FFC00000A7E8601000420771000002077100000723F090070207710000072EE760070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420781000002078100000723F09007020781000007239780070726A0A007023000000000000F03F239A999
  999B754584123333333F3993F584173750300066FFC00000A7E86010004207A100000207A100000723F090070207A100000727C790070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004207B100000207B100000723F090070207B10000072AB7A007072
  6A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E86010004207C100000207C100000723F090070207C10000072E87B0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004207D100000207D10000
  0723F090070207D10000072197D0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004207E100000207E100000723F090070207E10000072587E0070726A0A007023000000000000F03F2314AE4749C254584123AAF1D2BD883F584173750300066FFC00
  000A7E86010004207F100000207F100000723F090070207F10000072817F0070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420801000002080100000723F090070208010000072C0800070726A0A007023000000000000F03F2300000000E55458412
  396438BFCEB3F584173750300066FFC00000A7E8601000420811000002081100000723F090070208110000072D3810070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420831000002083100000723F0900702083100000720E830070726A0A00702300
  0000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420851000002085100000723F09007020851000007259840070726A0A007023000000000000F03F2300000000B654584123AE47E18AD43F584173750300066FFC00000A7E8601000420861000002086100000723F0900702
  086100000727C850070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420871000002087100000723F090070208710000072AD860070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100
  0420881000002088100000723F090070208810000072DE870070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004208C100000208C100000723F090070208C1000007203890070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3
  F584173750300066FFC00000A7E86010004208D100000208D100000723F090070208D10000072328A0070726A0A007023000000000000F03F2300000000AC54584123DD2406A1C93F584173750300066FFC00000A7E86010004208E100000208E100000723F090070208E10000072658B0070726A0A007023000000000000F0
  3F2300000000AC54584123378941A0C93F584173750300066FFC00000A7E86010004208F100000208F100000723F090070208F10000072B68C0070726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E8601000420901000002090100000723F0900702090100000720
  F8E0070726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E8601000420911000002091100000723F090070209110000072688F0070720E36007023A9744563CC81D33F23000000A0EFF4734123AE47E1EA86E3734173750300066FFC00000A7E860100042092100000
  2092100000723F090070209210000072A7900070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420931000002093100000723F090070209310000072DC910070724193007023575BD2CDD581D33F23CDCCCC3C23F473412352B81EE927E373417375030
  0066FFC00000A7E8601000420941000002094100000723F09007020941000007259930070726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E8601000420951000002095100000723F090070209510000072AA940070726A0A007023000000000000F03F2327310804
  D653584123DBF97EC2213F584173750300066FFC00000A7E8601000420961000002096100000723F090070209610000072F1950070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420971000002097100000723F0900702097100000722C970070726A0
  A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420981000002098100000723F0900702098100000724F980070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042099100000209910000072
  3F090070209910000072A8990070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004209A100000209A100000723F090070209A10000072BB9A0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000
  A7E86010004209B100000209B100000723F090070209B10000072E49B0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004209C100000209C100000723F090070209C10000072259D0070726A0A007023000000000000F03F23CDCCCC4CC25458412300
  0000C0883F584173750300066FFC00000A7E86010004209D100000209D100000723F090070209D10000072549E0070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E86010004209E100000209E100000723F090070209E100000728F9F0070726A0A00702300000
  0000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004209F100000209F100000723F090070209F10000072CEA00070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420A010000020A0100000723F09007020A0
  10000072FDA10070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420A110000020A1100000723F09007020A11000007232A30070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E860100042
  0A210000020A2100000723F09007020A2100000725FA40070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420A310000020A3100000723F09007020A310000072C2A50070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58
  4173750300066FFC00000A7E8601000420A510000020A5100000723F09007020A510000072F5A60070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420A610000020A6100000723F09007020A61000007234A80070726A0A007023000000000000F03F2
  31F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420A710000020A7100000723F09007020A7100000725DA90070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420A910000020A9100000723F09007020A91000007282AA
  0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420AA10000020AA100000723F09007020AA10000072B1AB0070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420AB10000020A
  B100000723F09007020AB10000072F8AC0070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420AC10000020AC100000723F09007020AC1000007247AE007072ACAF007023F00DF06ADA81D33F2348E17A780AF5734123EC51B88AB8E373417375030006
  6FFC00000A7E8601000420AD10000020AD100000723F09007020AD10000072CAAF0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420AE10000020AE100000723F09007020AE1000007209B10070726A0A007023000000000000F03F2314AE4749C25
  45841237B14AEB7883F584173750300066FFC00000A7E8601000420AF10000020AF100000723F09007020AF100000724AB20070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420B010000020B0100000723F09007020B01000007281B30070726A0A00
  7023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420B110000020B1100000723F09007020B110000072CEB40070726A0A007023000000000000F03F2379E926010554584123BC749360333F584173750300066FFC00000A7E8601000420B210000020B2100000723F0
  9007020B21000007203B60070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420B310000020B3100000723F09007020B31000007226B70070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E
  8601000420B410000020B4100000723F09007020B4100000728BB80070726A0A007023000000000000F03F2300000040A854584123C74B37F1C53F584173750300066FFC00000A7E8601000420B510000020B5100000723F09007020B510000072A0B90070726A0A007023000000000000F03F23621058D91654584123560E2
  D3A483F584173750300066FFC00000A7E8601000420B610000020B6100000723F09007020B610000072CDBA0070726A0A007023000000000000F03F23621058D91654584123560E2D3A483F584173750300066FFC00000A7E8601000420B710000020B7100000723F09007020B710000072FEBB0070726A0A00702300000000
  0000F03F23621058D91654584123560E2D3A483F584173750300066FFC00000A7E8601000420B810000020B8100000723F09007020B8100000722FBD0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420B910000020B9100000723F09007020B9100
  000725EBE0070726A0A007023000000000000F03F23DBF97E32CF545841233D0AD79B953F584173750300066FFC00000A7E8601000420BA10000020BA100000723F09007020BA10000072BFBF0070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420BB
  10000020BB100000723F09007020BB1000007224C10070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420BC10000020BC100000723F09007020BC1000007275C20070726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F58417
  3750300066FFC00000A7E8601000420BD10000020BD100000723F09007020BD10000072A6C30070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420BE10000020BE100000723F09007020BE10000072D1C40070726A0A007023000000000000F03F2300
  000000B654584123AE47E18AD43F584173750300066FFC00000A7E8601000420C010000020C0100000723F09007020C010000072F4C50070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420C110000020C1100000723F09007020C1100000722BC7007
  0726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C410000020C4100000723F09007020C41000007260C80070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420C510000020C510
  0000723F09007020C510000072A3C9007072F4CA007023A5B9EA410E00F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C710000020C7100000723F09007020C7100000721ACB0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FF
  C00000A7E8601000420C910000020C9100000723F09007020C9100000724BCC0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420CA10000020CA100000723F09007020CA1000007280CD0070726A0A007023000000000000F03F23068195A3D45358
  412333333363203F584173750300066FFC00000A7E8601000420CB10000020CB100000723F09007020CB10000072E1CE0070726A0A007023000000000000F03F237593180CDF535841233108AC9C103F584173750300066FFC00000A7E8601000420CC10000020CC100000723F09007020CC100000720CD00070726A0A00702
  3000000000000F03F237593180CDF535841233108AC9C103F584173750300066FFC00000A7E8601000420CD10000020CD100000723F09007020CD100000725BD10070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420CE10000020CE100000723F0900
  7020CE100000727CD20070720E36007023A9744563CC81D33F23000000C0F8F4734123000000109CE3734173750300066FFC00000A7E8601000420CF10000020CF100000723F09007020CF10000072D1D30070726A0A007023000000000000F03F2300000000B654584123AE47E18AD43F584173750300066FFC00000A7E860
  1000420D010000020D0100000723F09007020D01000007200D50070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420D210000020D2100000723F09007020D2100000724BD60070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD
  1B3F584173750300066FFC00000A7E8601000420D310000020D3100000723F09007020D3100000727CD70070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420D410000020D4100000723F09007020D410000072CDD80070726A0A00702300000000000
  0F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420D510000020D5100000723F09007020D510000072FED90070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420D610000020D6100000723F09007020D6100000
  7219DB0070726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420D710000020D7100000723F09007020D71000007248DC0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420D8100
  00020D8100000723F09007020D8100000726BDD0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420D910000020D9100000723F09007020D910000072BADE0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58417375
  0300066FFC00000A7E8601000420DA10000020DA100000723F09007020DA1000007205E00070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420DB10000020DB100000723F09007020DB1000007250E10070726A0A007023000000000000F03F23CDCCC
  C4CC254584123000000C0883F584173750300066FFC00000A7E8601000420DC10000020DC100000723F09007020DC100000729FE20070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420DD10000020DD100000723F09007020DD10000072F2E3007072
  6A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420DE10000020DE100000723F09007020DE1000007243E50070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420DF10000020DF10000
  0723F09007020DF100000727AE60070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420E210000020E2100000723F09007020E210000072A5E70070726A0A007023000000000000F03F23000000C0A55458412314AE47A1C33F584173750300066FFC00
  000A7E8601000420E410000020E4100000723F09007020E410000072D6E80070726A0A007023000000000000F03F23000000C0A55458412314AE47A1C33F584173750300066FFC00000A7E8601000420E610000020E6100000723F09007020E6100000721BEA0070726A0A007023000000000000F03F2300000040A65458412
  375931814C43F584173750300066FFC00000A7E8601000420F811000020F8110000723F09007020F8110000725AEB0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420F911000020F9110000723F09007020F9110000729FEC0070726A0A00702300
  0000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420FA11000020FA110000723F09007020FA11000072E0ED0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420FB11000020FB110000723F0900702
  0FB1100007225EF0070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420FC11000020FC110000723F09007020FC1100007266F00070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E860100
  0420FD11000020FD110000723F09007020FD11000072B3F10070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420FE11000020FE110000723F09007020FE11000072FCF20070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883
  F584173750300066FFC00000A7E8601000420FF11000020FF110000723F09007020FF1100007245F40070726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420001200002000120000723F09007020001200007296F50070726A0A007023000000000000F0
  3F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420011200002001120000723F090070200112000072FBF60070726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420021200002002120000723F0900702002120000726
  8F80070726A0A007023000000000000F03F2300000000A7545841238D976ED2C43F584173750300066FFC00000A7E8601000420031200002003120000723F09007020031200007285F90070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042004120000
  2004120000723F090070200412000072C0FA0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420051200002005120000723F09007020051200007209FC0070726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F58417375030
  0066FFC00000A7E8601000420061200002006120000723F0900702006120000723CFD0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420071200002007120000723F0900702007120000727BFE0070726A0A007023000000000000F03F2300000000
  E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420081200002008120000723F090070200812000072B4FF0070726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420091200002009120000723F090070200912000072F3000170726A0
  A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004200A120000200A120000723F090070200A120000725A020170726A0A007023000000000000F03F2300000000AC54584123931804AEC93F584173750300066FFC00000A7E86010004200B120000200B12000072
  3F090070200B120000729B030170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004200C120000200C120000723F090070200C12000072BE040170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000
  A7E86010004200D120000200D120000723F090070200D12000072EF050170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004200E120000200E120000723F090070200E1200007222070170726A0A007023000000000000F03F2300000000E55458412396
  438BFCEB3F584173750300066FFC00000A7E86010004200F120000200F120000723F090070200F1200007261080170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420101200002010120000723F090070201012000072A6090170726A0A00702300000
  0000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420111200002011120000723F090070201112000072010B0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420121200002012120000723F0900702012
  12000072400C0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420131200002013120000723F090070201312000072730D0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100042
  0141200002014120000723F090070201412000072C80E0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420151200002015120000723F090070201512000072EF0F0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58
  4173750300066FFC00000A7E8601000420161200002016120000723F09007020161200007212110170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420181200002018120000723F09007020181200007251120170726A0A007023000000000000F03F2
  300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420191200002019120000723F09007020191200007284130170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004201C120000201C120000723F090070201C12000072B314
  0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004201D120000201D120000723F090070201D12000072E6150170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004201E120000201
  E120000723F090070201E1200007239170170726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E86010004201F120000201F120000723F090070201F12000072C0180170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58417375030006
  6FFC00000A7E8601000420201200002020120000723F090070202012000072D7190170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420211200002021120000723F090070202112000072481B0170726A0A007023000000000000F03F2300000000E55
  458412396438BFCEB3F584173750300066FFC00000A7E8601000420221200002022120000723F090070202212000072731C0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420231200002023120000723F090070202312000072BA1D0170726A0A00
  7023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420241200002024120000723F090070202412000072E51E0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420261200002026120000723F0
  9007020261200007218200170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420311200002031120000723F0900702031120000724F210170726A0A007023000000000000F03F2314AE47D18E53584123DBF97EA2CC3E584173750300066FFC00000A7E
  8601000420321200002032120000723F09007020321200007282220170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420331200002033120000723F090070203312000072B5230170726A0A007023000000000000F03F2300000040A65458412375931
  814C43F584173750300066FFC00000A7E8601000420341200002034120000723F090070203412000072EA240170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420351200002035120000723F09007020351200007215260170726A0A00702300000000
  0000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420361200002036120000723F09007020361200007238270170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420371200002037120000723F0900702037120
  0007283280170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420381200002038120000723F090070203812000072C6290170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042039
  1200002039120000723F090070203912000072292B0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004203A120000203A120000723F090070203A12000072882C0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F58417
  3750300066FFC00000A7E86010004203B120000203B120000723F090070203B12000072C12D0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004203C120000203C120000723F090070203C120000720C2F0170726A0A007023000000000000F03F2300
  000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004203D120000203D120000723F090070203D120000723D300170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004203E120000203E120000723F090070203E120000727831017
  0726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004203F120000203F120000723F090070203F12000072C5320170726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E860100042040120000204012
  0000723F09007020401200007210340170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420411200002041120000723F09007020411200007253350170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FF
  C00000A7E8601000420421200002042120000723F09007020421200007296360170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420431200002043120000723F09007020431200007225380170726A0A007023000000000000F03F239A999999B75458
  4123333333F3993F584173750300066FFC00000A7E8601000420441200002044120000723F0900702044120000725C390170726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420451200002045120000723F090070204512000072953A0170726A0A00702
  3000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420461200002046120000723F090070204612000072B63B0170726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420471200002047120000723F0900
  70204712000072F53C0170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420481200002048120000723F0900702048120000722E3E0170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E860
  10004204A120000204A120000723F090070204A120000727B3F0170726A0A007023000000000000F03F23E17A1416CF535841238D976EDA1A3F584173750300066FFC00000A7E86010004204B120000204B120000723F090070204B12000072D4400170726A0A007023000000000000F03F239A999999B754584123333333F3
  993F584173750300066FFC00000A7E86010004204C120000204C120000723F090070204C1200007231420170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004204E120000204E120000723F090070204E1200007254430170726A0A00702300000000000
  0F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004204F120000204F120000723F090070204F12000072BF440170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420501200002050120000723F0900702050120000
  7220460170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420511200002051120000723F0900702051120000724F470170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042052120
  0002052120000723F09007020521200007286480170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420531200002053120000723F090070205312000072AD490170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58417375
  0300066FFC00000A7E8601000420541200002054120000723F090070205412000072D44A0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420551200002055120000723F090070205512000072FF4B0170726A0A007023000000000000F03F2300000
  040A65458412375931814C43F584173750300066FFC00000A7E8601000420561200002056120000723F090070205612000072364D0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420571200002057120000723F090070205712000072954E017072
  6A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420581200002058120000723F090070205812000072D84F0170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E860100042059120000205912000
  0723F09007020591200007211510170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004205A120000205A120000723F090070205A12000072A4520170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00
  000A7E86010004205B120000205B120000723F090070205B12000072EF530170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004205C120000205C120000723F090070205C1200007234550170726A0A007023000000000000F03F2314AE4749C25458412
  37B14AEB7883F584173750300066FFC00000A7E86010004205D120000205D120000723F090070205D120000727D560170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004205E120000205E120000723F090070205E12000072F2570170726A0A00702300
  0000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205F120000205F120000723F090070205F1200007231590170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420601200002060120000723F0900702
  06012000072AA5A0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420611200002061120000723F090070206112000072E95B0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100
  0420621200002062120000723F0900702062120000722C5D0170726A0A007023000000000000F03F2300000000B654584123AE47E18AD43F584173750300066FFC00000A7E8601000420631200002063120000723F090070206312000072935E0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3
  F584173750300066FFC00000A7E8601000420641200002064120000723F090070206412000072D65F0170726A0A007023000000000000F03F2300000000AC54584123931804AEC93F584173750300066FFC00000A7E8601000420651200002065120000723F0900702065120000723B610170726A0A007023000000000000F0
  3F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420661200002066120000723F09007020661200007272620170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420671200002067120000723F090070206712000072B
  1630170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420681200002068120000723F090070206812000072FC640170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042069120000
  2069120000723F09007020691200007253660170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E86010004206A120000206A120000723F090070206A12000072B0670170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58417375030
  0066FFC00000A7E86010004206B120000206B120000723F090070206B12000072D3680170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004206C120000206C120000723F090070206C12000072126A0170726A0A007023000000000000F03F2300000000
  E55458412396438BFCEB3F584173750300066FFC00000A7E86010004206D120000206D120000723F090070206D12000072656B0170726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E86010004206E120000206E120000723F090070206E12000072B06C0170726A0
  A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004206F120000206F120000723F090070206F12000072E36D0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042070120000207012000072
  3F0900702070120000722E6F0170726A0A007023000000000000F03F23000000C0A55458412314AE47A1C33F584173750300066FFC00000A7E8601000420711200002071120000723F09007020711200007261700170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000
  A7E8601000420721200002072120000723F09007020721200007288710170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420731200002073120000723F090070207312000072D3720170726A0A007023000000000000F03F239A999999B75458412333
  3333F3993F584173750300066FFC00000A7E8601000420741200002074120000723F0900702074120000722A740170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420751200002075120000723F09007020751200007271750170726A0A00702300000
  0000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420761200002076120000723F090070207612000072C4760170726A0A007023000000000000F03F239A999999B754584123333333F3993F584173750300066FFC00000A7E8601000420771200002077120000723F0900702077
  120000721F780170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420781200002078120000723F0900702078120000724E790170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860100042
  0791200002079120000723F090070207912000072957A0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004207A120000207A120000723F090070207A12000072CC7B0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58
  4173750300066FFC00000A7E86010004207C120000207C120000723F090070207C12000072F77C0170726A0A007023000000000000F03F2300000080C75458412346B6F395CE3F584173750300066FFC00000A7E86010004207D120000207D120000723F090070207D120000723E7E0170726A0A007023000000000000F03F2
  300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004207E120000207E120000723F090070207E12000072817F0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E86010004207F120000207F120000723F090070207F12000072B480
  0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420801200002080120000723F090070208012000072E3810170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E860100042081120000208
  1120000723F09007020811200007234830170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420821200002082120000723F0900702082120000727D840170720E36007023A9744563CC81D33F23000000C0F8F4734123000000109CE373417375030006
  6FFC00000A7E8601000420831200002083120000723F090070208312000072D6850170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420841200002084120000723F09007020841200007221870170726A0A007023000000000000F03F2300000000A65
  45841230C022BD7C33F584173750300066FFC00000A7E8601000420851200002085120000723F09007020851200007250880170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420861200002086120000723F0900702086120000727B890170726A0A00
  7023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420871200002087120000723F090070208712000072CA8A0170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420881200002088120000723F0
  900702088120000723F8C0170726A0A007023000000000000F03F2314AE4749C2545841237B14AEB7883F584173750300066FFC00000A7E8601000420891200002089120000723F090070208912000072808D0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E
  86010004208A120000208A120000723F090070208A12000072BB8E0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E86010004208B120000208B120000723F090070208B12000072F28F0170726A0A007023000000000000F03F2300000040A65458412375931
  814C43F584173750300066FFC00000A7E86010004208C120000208C120000723F090070208C1200007219910170729692017023FD87F4DBD781D33F23000000A0EFF4734123000000F086E3734173750300066FFC00000A7E86010004208D120000208D120000723F090070208D12000072A0920170726A0A00702300000000
  0000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004208E120000208E120000723F090070208E120000720F940170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004208F120000208F120000723F090070208F120
  0007236950170726A0A007023000000000000F03F23DBF97EEAD3535841231283C0AA1F3F584173750300066FFC00000A7E8601000420901200002090120000723F09007020901200007285960170729692017023FD87F4DBD781D33F23000000A0EFF4734123000000F086E3734173750300066FFC00000A7E860100042091
  1200002091120000723F090070209112000072FE970170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420921200002092120000723F09007020921200007211990170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F58417
  3750300066FFC00000A7E8601000420931200002093120000723F090070209312000072569A0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420941200002094120000723F090070209412000072959B0170726A0A007023000000000000F03F2300
  000040A65458412375931814C43F584173750300066FFC00000A7E8601000420951200002095120000723F090070209512000072BA9C0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420961200002096120000723F090070209612000072CD9D017
  0726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420C112000020C1120000723F09007020C112000072F29E0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C212000020C212
  0000723F09007020C21200007245A00170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420C312000020C3120000723F09007020C312000072ACA10170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FF
  C00000A7E8601000420C412000020C4120000723F09007020C41200007207A30170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C512000020C5120000723F09007020C51200007272A40170726A0A007023000000000000F03F231F85EB49ED5358
  4123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C612000020C6120000723F09007020C612000072F3A50170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420C712000020C7120000723F09007020C7120000724CA70170726A0A00702
  3000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420C812000020C8120000723F09007020C812000072DBA80170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420C912000020C9120000723F0900
  7020C91200007248AA0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420CA12000020CA120000723F09007020CA12000072CBAB0170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E860
  1000420CB12000020CB120000723F09007020CB120000722AAD0170726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420CD12000020CD120000723F09007020CD120000729FAE0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD
  1B3F584173750300066FFC00000A7E8601000420CE12000020CE120000723F09007020CE1200007206B00170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420CF12000020CF120000723F09007020CF120000727FB10170726A0A00702300000000000
  0F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420D012000020D0120000723F09007020D012000072D0B20170726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F584173750300066FFC00000A7E8601000420D112000020D1120000723F09007020D1120000
  7239B40170726A0A007023000000000000F03F2379E926010554584123BC749360333F584173750300066FFC00000A7E8601000420D212000020D2120000723F09007020D21200007298B50170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420D4120
  00020D4120000723F09007020D412000072EFB60170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00000A7E8601000420D512000020D5120000723F09007020D51200007260B80170726A0A007023000000000000F03F23CDCCCC4CC254584123000000C0883F58417375
  0300066FFC00000A7E86010004201F130000201F130000723F090070201F13000072CD9D0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420221300002022130000723F090070202213000072569A0170726A0A007023000000000000F03F2300000
  040A65458412375931814C43F584173750300066FFC00000A7E8601000420241300002024130000723F09007020241300007211990170726A0A007023000000000000F03F2300000000E55458412396438BFCEB3F584173750300066FFC00000A7E8601000420251300002025130000723F090070202513000072D5B9017072
  6A0A007023000000000000F03F23000000C01253584123A245B6BBE53E584173750300066FFC00000A7E8601000420261300002026130000723F09007020261300007242BB0170726A0A007023000000000000F03F23000000C01253584123A245B6BBE53E584173750300066FFC00000A7E860100042027130000202713000
  0723F0900702027130000728BBC0170726A0A007023000000000000F03F2333333393CE5458412379E92649AC3F584173750300066FFC00000A7E8601000420281300002028130000723F090070202813000072ECBD0170726A0A007023000000000000F03F231F85EB49ED53584123C1CAA1BD1B3F584173750300066FFC00
  000A7E86010004202B130000202B130000723F090070202B13000072A0920170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004202D130000202D130000723F090070202D13000072F28F0170726A0A007023000000000000F03F2300000040A65458412
  375931814C43F584173750300066FFC00000A7E8601000420391300002039130000723F0900702039130000727B890170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004203B130000203B130000723F090070203B1300007221870170726A0A00702300
  0000000000F03F2300000000A6545841230C022BD7C33F584173750300066FFC00000A7E86010004203D130000203D130000723F090070203D13000072F2570170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004203F130000203F130000723F0900702
  03F1300007234830170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420411300002041130000723F090070204113000072364D0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100
  0420431300002043130000723F090070204313000072914B0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420451300002045130000723F090070204513000072D12C0070726A0A007023000000000000F03F2300000040A65458412375931814C43
  F584173750300066FFC00000A7E8601000420471300002047130000723F090070204713000072784F0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420491300002049130000723F0900702049130000725FA40070726A0A007023000000000000F0
  3F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004204B130000204B130000723F090070204B1300007224C10070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004204D130000204D130000723F090070204D130000724
  4290070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004204F130000204F130000723F090070204F13000072D4470070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100042051130000
  2051130000723F090070205113000072B5230170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420531300002053130000723F090070205313000072C0FA0070726A0A007023000000000000F03F2300000040A65458412375931814C43F58417375030
  0066FFC00000A7E8601000420551300002055130000723F09007020551300007215260170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420571300002057130000723F0900702057130000723D300170726A0A007023000000000000F03F2300000040
  A65458412375931814C43F584173750300066FFC00000A7E8601000420591300002059130000723F09007020591300007277130070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205B130000205B130000723F090070205B13000072F3000170726A0
  A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205D130000205D130000723F090070205D130000722E2E0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004205F130000205F13000072
  3F090070205F130000724D410070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420611300002061130000723F09007020611300007275580070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000
  A7E8601000420631300002063130000723F09007020631300007236570070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420651300002065130000723F09007020651300007289460070726A0A007023000000000000F03F2300000040A65458412375
  931814C43F584173750300066FFC00000A7E8601000420671300002067130000723F090070206713000072A6090170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004206B130000206B130000723F090070206B13000072730D0170726A0A00702300000
  0000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004206D130000206D130000723F090070206D13000072D7190170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004206F130000206F130000723F090070206F
  1300007204450070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420711300002071130000723F0900702071130000729B030170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100042
  0731300002073130000723F0900702073130000721BEA0070726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420751300002075130000723F090070207513000072713C0070726A0A007023000000000000F03F2300000040A65458412375931814C43F58
  4173750300066FFC00000A7E8601000420771300002077130000723F09007020771300007278310170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420791300002079130000723F090070207913000072A5E70070726A0A007023000000000000F03F2
  3000000C0A55458412314AE47A1C33F584173750300066FFC00000A7E86010004207B130000207B130000723F090070207B13000072D6E80070726A0A007023000000000000F03F23000000C0A55458412314AE47A1C33F584173750300066FFC00000A7E86010004207D130000207D130000723F090070207D130000729636
  0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E86010004207F130000207F130000723F090070207F13000072953A0170726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E860100042081130000208
  1130000723F090070208113000072B63B0170726A0A007023000000000000F03F2300000040C154584123C74B37C1DF3F584173750300066FFC00000A7E8601000420831300002083130000723F090070208313000072D4400170726A0A007023000000000000F03F239A999999B754584123333333F3993F58417375030006
  6FFC00000A7E8601000420851300002085130000723F09007020851300007254430170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420871300002087130000723F090070208713000072BF440170726A0A007023000000000000F03F2300000040A65
  458412375931814C43F584173750300066FFC00000A7E8601000420A31E000020A31E0000723F09007020A31E0000725BBF0170726A0A007023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E8601000420A41E000020A41E0000723F09007020A41E0000725BBF0170726A0A00
  7023000000000000F03F2300000040A65458412375931814C43F584173750300066FFC00000A7E860100042041960100204196010072B0C00170204196010072C4C0017072D3C1017023000000000000F03F23000000000000F03F23000000000000F03F73750300066FFC00000A2A1A7E860100042A0000133002004300000
  07300001102A51A00001B0B120128FD00000A0A03067B7E0100045404067B7F0100045105067B80010004540E04067B81010004510E05067B82010004510E06067B83010004572A327E86010004026FFE00000A2A133002001E000000740000117E86010004026FFF00000A0A067B84010004067B8501000473140000062A5A
  02037D8801000402047D8901000402057D8A0100042A00000013300300560000001E000011230000000000000040284500000A808F01000423000000000000F042809001000423000000000000F03F0A7E90010004232E2109148E98F33F065A5B809101000423AA4C58E87AB6FB3F7E910100045A80920100042A000013300
  4004C000000750000110302370E030265370503650A2B10020A2B0C030265370502650A2B02030A7E920100047E8F010004065A580A02025A03035A5806065A58284500000A0B02075B03075B06075B737D0300062A3A02283E00000A02037D930100042A46027B9301000420E61000006FF80100062A36027B93010004036F
  F90100062A00133005003100000076000011030428870300060A027B93010004062888030006062889030006050E046FFA01000602037D9401000402047D950100042A00000013300500750000007600001103027B94010004582300000000000000405B04027B95010004582300000000000000405B28870300060A027B930
  10004062888030006062889030006050E046FFB010006030428870300060A027B93010004062888030006062889030006050E046FFB01000602037D9401000402047D950100042A32027B930100046FFC0100062A32027B930100046FFD0100062A0013300300620000007700001103230000000000000000372A0203230000
  00000000F04259287F0300060A067B88010004067B89010004067B8A010004737D0300062A020323000000000000F04258287F0300060B077B88010004077B8901000465077B8A01000465737D0300062A000013300200690000001E000011027B8A01000423000000000000F03F370A2300000000008056402A027B8A01000
  423000000000000F0BF350A2300000000008056C02A027B8A010004284300000A23F8C1631ADCA54C405A0A06283700000A2311EA2D819997713D3202062A2300000000000000002A000000133002004800000000000000027B88010004230000000000000000331B027B89010004230000000000000000330A230000000000
  0000002A027B89010004027B88010004284400000A23F8C1631ADCA54C405A2A13300200190000007800001173AF0000060A020673800300066F6A030006066FAB0000062A7202283E00000A02037D9901000402047D9A01000402057D9B0100042A000013300800A6000000540000110503351F283000000A283E04000672E
  1C1017072EBC10170289100000A739700000A7A0E0404351F283000000A283E04000672F5C1017072FFC10170289100000A739700000A7A022C18026F010300062D10026F0A0300060A120028440000062D07168D180000012A026F2E0300060B120128C700000A2C18178D18000001251603040503590E040459288F030006
  A22A0203040503590E0404590E050E0616288E0300062A0000133008007200000054000011022C18026F8D0200062D10026F980200060A120028440000062D07168D180000012A026FBC0200060B120128C700000A2C12178D180000012516161614738B030006A22A0223000000000000F0C22300000000000000C32300000
  00000000043230000000000001043030417288E0300062A00001330030044000000000000001FFE730705000625027D5302000425037D5502000425047D5702000425057D59020004250E047D5B020004250E057D4F020004250E067D51020004250E077D5D0200042A133005001E0000007900001118020304052891030006
  0A1616066F2B0300066FC800000A738B0300062A000013300200200000007A0000110274510000020A03067B990100045404067B9A0100045205067B9B010004512A13300500570000000000000073A300000625166F9800000625026F990000062503046FA000000625030558046FA100000625030558040E04586FA100000
  62503040E04586FA10000062503046FA1000006256F9D000006256F9E0000066F9F0000062AB67E9C0100042D2028F802000628F90200061F105F16FE03809D01000428F700000A17809C0100047E9D0100042A000000133002004D00000004000011026F0001000A026F0101000A333728930300062C3002280600002B0A18
  6A026F0001000A6A5A066A311B026F0001000A06320B2853040006730201000A7A02066F0301000A02036F0401000A2A3620C7FFFF7F02280700002B5B2A00133002002F00000004000011D00A00001B285E00000A280501000A0AD00A00001B285E00000AD070000001285E00000A280601000A2C02180A062A32027215000
  07028A30300062A8E0328990300062D1A283000000A2864040006280100002B284200000A733200000A7A2A4A1602300C02203F420F00FE0216FE012A162A00133004008600000000000000041A2F3B0317331A283000000A2858040006280100002B284200000A733200000A7A283000000A285A0400060317598C62000001
  285D00000A733200000A7A050E0533060E040E062E3B0317331A283000000A2859040006280100002B284200000A733200000A7A283000000A285B0400060317598C62000001285D00000A733200000A7A2A3202720100007028A30300062A8E03287A0300062D1A283000000A2833040006280100002B284200000A7332000
  00A7A2A00133005005200000000000000020304050E0428B303000603289E0300062D1B283000000A2830040006038C61000001285D00000A733200000A7A04289F0300062D1B283000000A2831040006048C61000001285D00000A733200000A7A2A7A022300000000008056C0371002230000000000805640FE0316FE012A
  162A7A022300000000806ECDC03710022300000000806ECD40FE0316FE012A162A7E02032E190203592300000000008076405D230000000000000000FE012A172A0A172A00133003004B00000000000000041A2F1B283000000A285C040006038C62000001285D00000A733200000A7A050E05330B0E040E0628A00300062D1
  B283000000A285D040006038C62000001285D00000A733200000A7A2A00133002004700000000000000021F10730701000A7DA301000402157DA501000402283E00000A02037DA2010004027BA30100041F216F0801000A027BA3010004176F0801000A027BA3010004166F0801000A2A001330030043000000000000000216
  28AE030006027BA501000415330F02036FB203000602037DA50100042A027BA5010004032E1A283000000A2862040006280100002B284200000A733200000A7A2A0013300400ED0000000000000002027BAC01000417587DAC010004031759450B000000050000000D000000150000001D000000250000002D0000003500000
  06F00000078000000810000003D0000003885000000021828AE0300062A021928AE0300062A021A28AE0300062A021B28AE0300062A021C28AE0300062A021D28AE0300062A021E28AE0300062A026FBB0300062D21283000000A284F040006027BA2010004038C08000002289100000A733200000A7A021F0928AE0300062A
  021F0A28AE0300062A021F0B28AE0300062A021F0C28AE0300062A283000000A284F040006027BA2010004038C08000002289100000A733200000A7AC2021F0D28AE030006020304050E046FB303000602037DA601000402047DA701000402057DAA01000402177DAB0100042ADE021F0E28AE030006020304050E046FB3030
  00602037DA801000402047DA901000402057DAA01000402027BAB01000417587DAB0100042A000013300500BB0000007B000011020304050E046FB3030006020E050E060E070E086FB3030006027BAA0100040A050B1200280901000A1201280901000AFE011200287A00000A1201287A00000AFE015F2C2D027BAA0100040B
  0E070A1201280901000A1200280901000AFE011201287A00000A1200287A00000AFE015F2D1A283000000A2822040006280100002B284200000A733200000A7A020E057DA8010004020E067DA9010004020E077DAA01000402027BAB01000418587DAB010004021F0F28AE0300062A6A03183309021F1028AE0300062A03193
  308021F1128AE0300062A5A03193309021F1328AE0300062A021F1228AE0300062A26021F1428AE0300062A5E021F1528AE03000602027BAC01000417597DAC0100042A26021F1628AE0300062A00000013300700510800007C00001102037DA4010004027BA30100046F0A01000A0A0645220000000100000013000000D700
  0000FD00000013010000280100004E01000091010000A6010000D40100002C020000550200007E020000A70200008B030000B1030000D80300001C0400003104000082040000CA040000DF0400005E050000F604000075050000D90500002D060000440600006D060000CA0600002E070000E1060000450700008E0700002A0
  32D070228B00300062A021628B70300062A031859450B000000050000000D000000150000001D000000260000002F00000038000000410000006D000000760000007F0000003883000000021828B10300062A021B28B10300062A021E28B10300062A021F0A28B10300062A021F0B28B10300062A021F0C28B10300062A021F
  0D28B10300062A027BAC010004172E1A283000000A282C040006280100002B284200000A733200000A7A021F0E28B10300062A021F0F28B10300062A021F1228B10300062A021F1928B10300062A021728B70300062A031F0D2E07031F152E0A2B0F021928B10300062A0228B00300062A021F0D1F1528B80300062A031F143
  308021A28B10300062A021F1428B70300062A031F1533070228B00300062A021F1528B70300062A031F0D2E07031F152E0A2B0F021C28B10300062A0228B00300062A021F0D1F1528B80300062A031F0E2E07031F142E032B2C2A027BAB010004182F1A283000000A2852040006280100002B284200000A733200000A7A021D
  28B10300062A021F0E1F1428B80300062A031F1533070228B00300062A021F1528B70300062A031F0D2E07031F152E0B2B17021F0928B10300062A02167DAD0100040228B00300062A021F0D1F1528B80300062A031F0E2E07031F142E032B412A02027BAD01000417587DAD01000402027BAD010004027BAB010004027BA60
  10004027BA7010004027BA8010004027BA90100046FB4030006021E28B10300062A021F0E1F1428B80300062A032C0B03182E08031F152E0B2B102A021828AF0300062A0228B00300062A0216181F1528B90300062A032C0B03192E08031F152E0B2B102A021B28AF0300062A0228B00300062A0216191F1528B90300062A03
  2C0B031A2E08031F152E0B2B102A021E28AF0300062A0228B00300062A02161A1F1528B90300062A034516000000020000007B000000030000000B000000130000001B000000240000002D00000036000000460000006000000069000000720000007B0000007B0000007B0000007B0000007B0000007B0000007B0000007B0
  000003F0000002B792A021828AF0300062A021B28AF0300062A021E28AF0300062A021F0A28AF0300062A021F0B28AF0300062A021F0C28AF0300062A021F0D28AF0300062A0228B00300062A283000000A282C040006280100002B284200000A733200000A7A021F0F28AF0300062A021F1228AF0300062A021F1928AF0300
  062A0216171F1528B90300062A031F1533070228B00300062A283000000A282D040006280100002B284200000A733200000A7A031F0D2E07031F152E0B2B10021F1028B10300062A0228B00300062A021F0D1F1528B80300062A031F0F2E07031F142E032B2D2A027BAB010004192F1A283000000A2826040006280100002B2
  84200000A733200000A7A021F1128B10300062A021F0F1F1428B80300062A031F1533070228B00300062A021F1528B70300062A031F0D5945050000000700000029000000290000001000000019000000031F152E1D2B22021F1328B10300062A021F1528B10300062A021F1628B10300062A0228B00300062A021F0D1F1528
  B80300062A031F0E59173607031F142E032B2D2A027BAB010004182F1A283000000A2828040006280100002B284200000A733200000A7A021F1428B10300062A021F0F1F0E1F1428B90300062A031F1533070228B00300062A021F1528B70300062A031F0D3309021F1728B10300062A021F0D28B70300062A031F0E5945070
  000000200000038000000020000000300000038000000380000000C0000002B362A021F1828B10300062A027BAB010004182F1A283000000A2852040006280100002B284200000A733200000A7A021F1428B10300062A021F0E1F1428B80300062A031F0D3309021F1828B10300062A021F0D28B70300062A031F0F59450600
  000002000000030000000200000038000000380000000C0000002B362A021F1728B10300062A027BAB010004192F1A283000000A2826040006280100002B284200000A733200000A7A021F1428B10300062A021F0F1F1428B80300062A031F0D2E1B031F125945040000000B000000140000002B0000001D0000002B29021F1
  C28B10300062A021F1A28B10300062A021F1B28B10300062A02167DAD0100040228B00300062A021F0D1F1528B80300062A031F0D3309021F1C28B10300062A021F0D28B70300062A031F102E07031F112E0B2B12021F1D28B10300062A021F1E28B10300062A021F101F1128B80300062A031F0E59173607031F142E032B42
  2A02027BAD01000417587DAD01000402027BAD010004027BAB010004027BA6010004027BA7010004027BA8010004027BA90100046FB4030006021F1928B10300062A021F0F1F0E1F1428B90300062A031F0D3309021F1F28B10300062A021F0D28B70300062A031F0E594507000000020000001D00000002000000030000001
  D0000001D0000000C0000002B1B2A021F2028B10300062A021F1C28B1030006021F1428AE0300062A021F0E1F1428B80300062A031F0D3309021F2028B10300062A021F0D28B70300062A031F0F5945060000000200000003000000020000001D0000001D0000000C0000002B1B2A021F1F28B10300062A021F1C28B1030006
  021F1428AE0300062A021F0F1F1428B80300062A031F1633012A283000000A2855040006020328BA030006285D00000A733200000A7A000000133005005500000000000000027BA30100046F0B01000A7E6F0000043136283000000A2854040006027BA40100048C7D0000027E6F00000417588C620000017E6F0000048C620
  00001283100000A733200000A7A027BA3010004036F0801000A2A36027BA30100046F0C01000A262A66027BA30100046F0C01000A26027BA3010004036F0801000A2A9E0304050E0428B50300062D1A283000000A2857040006280100002B284200000A733200000A7A2A0000001330010041000000000000000228B6030006
  2C370328B60300062C2F0F02287A00000A2C0E0F02287D00000A28B60300062C180F03287A00000A2C0D0F03287D00000A28B60300062A172A162A5202282E00000A2D0A02283600000A16FE012A162AA2283000000A286B040006020328BA03000602027BA401000428BA030006289100000A733200000A7ABE283000000A2
  86C040006020328BA030006020428BA03000602027BA401000428BA030006283100000A733200000A7A00133006004000000000000000283000000A286C040006020328BA0300067209C20170020428BA030006280D01000A020528BA03000602027BA401000428BA030006283100000A733200000A7A13300400650000001B
  00001103172E05031F1533190F01FE167D0000026FE800000A027BA201000428CA00000A2A0F01FE167D0000026FE800000A0A06720FC201706F0E01000A2D02062A06720FC20170027BA20100047213C2017028CA00000A6F0F01000A7217C2017028CA00000A2A0A162A2A02153302022A0217582A0013300500EF0100005
  20000110328BC0300060A0428BC0300060B021759450E000000050000001A0000003000000045000000740000008A000000A6000000BC0000008C010000D2000000E800000023010000590100006E0100003887010000283000000A2850040006280100002B284200000A2A283000000A2848040006068C84000001285D0000
  0A2A283000000A284C040006280100002B284200000A2A06153315283000000A284E040006280100002B284200000A2A283000000A284D040006068C84000001285D00000A2A283000000A2840040006068C84000001285D00000A2A283000000A283F040006068C84000001078C84000001289100000A2A283000000A28490
  40006068C84000001285D00000A2A283000000A284B040006068C84000001285D00000A2A283000000A2844040006068C84000001285D00000A2A052C1C283000000A2846040006068C84000001078C84000001289100000A2A283000000A2847040006068C84000001078C84000001289100000A2A06073316283000000A28
  42040006068C84000001285D00000A2A283000000A2841040006068C84000001078C84000001289100000A2A283000000A284A040006280100002B284200000A2A283000000A283D040006068C840000010717598C84000001289100000A2A283000000A2850040006280100002B284200000A2AF6022D0628710400062A051
  7330B0203040E0428BD0300062A0203040E0428BD030006283000000A2843040006058C84000001285D00000A28CA00000A2AFA02731001000A7DB401000402731101000A7DB501000402283E00000A02037DAF010004020373DA00000A7DB001000402047DB201000402057DB30100042AE2027CB101000403283802000602
  7CB101000428410200061A2E060228CB03000603172E13020328D0030006031F0B2E07021628CC0300062A000000133005009100000017000011027CB10100042839020006027CB101000428400200060A061759450A000000010000001F00000031000000490000004900000049000000490000001F0000001F0000001F000
  0002A02037DB601000402047DB701000402057DBA010004020E047DBB0100042A0228CB030006020304050E0428CF0300062A0228CB030006021728CC030006020304050E0428CF0300062A76027CB1010004283A0200060228CB030006020304050E0428CF0300062AC6027CB1010004283A0200060228CB03000602030405
  0E0428CF0300060228CB030006020E050E060E070E0828CF0300062A000000133005007500000000000000027CB101000428430200062C060228CD0300060228CB03000603193309021E28D00300062B0B03183307021828D0030006021628CC030006027CB101000428430200062C240228CB03000602027BB8010004027BB
  9010004027BBC010004027BBD01000428CF030006027CB1010004283D0200062A000000133002004A000000000000000317594503000000020000000B000000140000002B1A021828D00300062B11021E28D00300062B08021F0928D00300060228CB030006021628CC030006027CB101000403283E0200062A000013300200
  5200000000000000027CB10100042840020006192E1E027CB101000428400200061F0A2E0F027CB101000428400200061F09331A0228CD030006027CB101000428450200061933060228CD030006027CB1010004283B0200062A0000133005009600000000000000027CB10100042840020006173367027CB10100042844020
  00616313B027CB101000428410200061A33060228CB030006021728D003000602027BB6010004027BB7010004027BBA010004027BBB01000428CF0300062B33027CB101000428410200061A2E25021A28D0030006021628CE0300062B15027CB101000428400200061F0B2E060228CD030006027CB1010004283F0200062A9E
  027BB50100046F1201000A163118027BB5010004027BB50100046F1301000A17586F1401000A2ACA027BB4010004027BAF0100046F1501000A6F1601000A027BB5010004036F1401000A027BAF0100041A6A176F1701000A262A00000013300300440000007D000011027BAF0100046F1501000A0A027BAF010004027BB4010
  0046F1801000A166F1701000A2602027BB50100046F1301000A28CE030006027BAF01000406166F1701000A262A36027BB0010004036F1901000A2A000013300200BE00000000000000027BB0010004036F3A00000A027BB0010004046F3A00000A027BB20100042C26027BB00100040F03287A00000A2D0B23000000000000
  F8FF2B070F03287D00000A6F3A00000A027BB30100042C26027BB00100040F04287A00000A2D0B23000000000000F8FF2B070F04287D00000A6F3A00000A027CB101000428400200061F092E1D027CB101000428400200061F0A332B027CB1010004284502000619331D02037DB801000402047DB901000402057DBC0100040
  20E047DBD0100042A0000133002004E0000007E000011027BB00100047E1A01000A2D03162B01176F3800000A031F0B2E03032B021F7E0A027BB20100042C080620E8030000580A027BB30100042C080620D0070000580A027BB0010004066F1901000A2ACE02283E00000A032C10036FD800000A2D08036F1B01000A2D0B28
  2F040006733200000A7A02037DC301000402047DC40100042AFA027BC4010004046F01000006020328D3030006027BC50100046A027BC30100046F1B01000A2F0B282F040006733200000A7A027BC40100046F0A0000062A00000013300400F10100007F00001103450C00000001000000BA000000D2000000EA00000002010
  000180100002E010000440100005A010000720100008B010000A40100002A0228ED0300060C02081200120128EF0300060D091759450A00000007000000110000001B000000250000002D000000350000003D000000450000004F00000059000000091F7E2E5E2B640208060728D40300062A0208060728D50300062A020806
  0728D60300062A020828D70300062A020828D80300062A020828D90300062A020828DA0300062A0208060728DC0300062A0208060728DD0300062A0208060728DE0300062A020828DB0300062A282F040006733200000A7A02171200120128E80300061304021104060728D40300062A02181200120128E8030006130502110
  5060728D50300062A02191200120128E80300061306021106060728D60300062A021A1200120128E8030006130702110728D70300062A021B1200120128E8030006130802110828D80300062A021C1200120128E8030006130902110928D90300062A021D1200120128E8030006130A02110A28DA0300062A021E1200120128
  E8030006130B02110B060728DC0300062A021F091200120128E8030006130C02110C060728DD0300062A021F091200120128E8030006130D02110D060728DE0300062A021F0B1200120128E8030006130E02110E28DB0300062AB2027BC4010004176F020000060203040528DF030006027BC40100046F08000006027BC4010
  0046F090000062A0000133005002E0000007E000011027BC4010004186F02000006020328EA0300060A0616360A020306040528E3030006027BC40100046F090000062A0000133004003500000052000011027BC4010004196F02000006020328EA0300060A170B2B0D0203040528E20300060717580B070636EF027BC40100
  046F090000062A000000133002003300000052000011027BC40100041A6F02000006020328EA0300060A160B2B0B021728D30300060717580B070637F1027BC40100046F090000062A00133002003300000052000011027BC40100041B6F02000006020328EA0300060A160B2B0B021828D30300060717580B070637F1027BC
  40100046F090000062A00133002003300000052000011027BC40100041C6F02000006020328EA0300060A160B2B0B021928D30300060717580B070637F1027BC40100046F090000062A00133002003300000052000011027BC40100041D6F02000006020328EA0300060A160B2B0B021628D30300060717580B070637F1027B
  C40100046F090000062A66027BC40100041F0B6F02000006027BC40100046F090000062A000000133005002E0000007E000011027BC40100041E6F02000006020328EA0300060A0616360A020306040528E5030006027BC40100046F090000062A0000133005002F0000007E000011027BC40100041F096F02000006020328E
  A0300060A0616360A020306040528E7030006027BC40100046F090000062A0013300400A000000080000011027BC40100041F0A6F02000006020328EA0300060A170B2B770228ED030006100102030F020F0328EF0300060C08182E0B081E2E1E081F092E302B45027BC4010004176F070000060203040528E20300062B3902
  7BC4010004186F070000060203040528E40300062B22027BC4010004196F070000060203040528E60300062B0B282F040006733200000A7A0717580B07063685027BC40100046F090000062A133006004400000018000011027BC4010004020328EB030006020328EB030006042D0B1200FE150500001B062B07020328EC030
  006052D0B1200FE150500001B062B07020328EC0300066F030000062A133006004400000018000011027BC4010004020328EB030006020328EB030006042D0B1200FE150500001B062B07020328EC030006052D0B1200FE150500001B062B07020328EC0300066F040000062A13300A007C00000018000011027BC401000402
  0328EB030006020328EB030006042D0B1200FE150500001B062B07020328EC030006052D0B1200FE150500001B062B07020328EC030006020328EB030006020328EB030006042D0B1200FE150500001B062B07020328EC030006052D0B1200FE150500001B062B07020328EC0300066F050000062A133005005000000081000
  011020328EA0300060A062D3A027BC40100042300000000000000002300000000000000001201FE150500001B071201FE150500001B076F03000006027BC40100046F08000006020306040528E30300062A133004002C0000007E0000110203050E0428DF030006170A2B0E0203050E0428E00300060617580A060437EE027B
  C40100046F080000062A133005005000000081000011020328EA0300060A062D3A027BC40100042300000000000000002300000000000000001201FE150500001B071201FE150500001B076F03000006027BC40100046F08000006020306040528E50300062A133004002C0000007E0000110203050E0428DF030006170A2B0
  E0203050E0428E10300060618580A060437EE027BC40100046F080000062A133005005000000081000011020328EA0300060A062D3A027BC40100042300000000000000002300000000000000001201FE150500001B071201FE150500001B076F03000006027BC40100046F08000006020306040528E70300062A133009002A
  020000820000112300000000000000000C2300000000000000000D1204FE150500001B1205FE150500001B1206FE150500001B1207FE150500001B16130838DA0100000228ED030006100102030F030F0428E90300061309020328EA030006130A110A18340B282F040006733200000A7A020328EB0300060A020328EB03000
  60B052D0C120CFE150500001B110C2B07020328EC03000613040E042D0C120CFE150500001B110C2B07020328EC030006130511082D1F027BC40100040607110411056F03000006060C070D11041306110513072B690608335A070933561104130C1106130D120C280901000A120D280901000AFE01120C287A00000A120D28
  7A00000AFE015F2C2B1105130D1107130C120D280901000A120C280901000AFE01120D287A00000A120C287A00000AFE015F2D0B2827040006733200000A7A17130B38C8000000020328EB0300060A020328EB0300060B052D0C120CFE150500001B110C2B07020328EC03000613040E042D0C120CFE150500001B110C2B070
  20328EC0300061305110B1758130B11092C60020328EB0300060C020328EB0300060D052D0C120CFE150500001B110C2B07020328EC03000613060E042D0C120CFE150500001B110C2B07020328EC0300061307110B1758130B027BC40100040607110411050809110611076F050000062B1D060C070D110413061105130702
  7BC40100040607110411056F04000006110B110A442FFFFFFF110817581308110804441EFEFFFF027BC40100046F080000062A00001330040020000000830000110228ED0300060A0206040528EF030006032E0B282F040006733200000A7A062A133004003E000000170000110203040528EF0300060A0618330E027BC4010
  004186F060000062B1D061E330E027BC4010004196F060000062B0B282F040006733200000A7A061EFE012A3E021A0328EE03000616281C01000A2A3E021E0328EE03000616281D01000A2A0000133002002100000084000011020328EB0300060A06282E00000A2D0706733D00000A2A1201FE150500001B072A0000001330
  04001E00000004000011027BC301000402027BC50100040A0617587DC5010004066A6F1E01000A2A0000133005005500000085000011038D7D0000010A027BC3010004027BC50100046A0616068E696F1F01000A068E696A2E1A283000000A286D040006280100002B284200000A733200000A7A02027BC501000403587DC50
  10004060428F0030006062A00000013300200910000007E000011020328EA0300060A2041420F00063518062043420F003510062039420F00590A0416520516522B6620B80B00000635180620A00F000034100417520517520620B80B0000590A2B4620D00700000635180620B80B000034100416520517520620D007000059
  0A2B2620E80300000635180620D007000034100417520516520620E8030000590A2B0604165205165206D22A0000001330050036000000860000110317FE017E1A01000A2E2A160A2B1E0206910B020602028E6917590659919C02028E6917590659079C0617580A06028E69185B32DA2A7202283E00000A02037DC60100040
  2047DC701000402167DC90100042A00133003009000000000000000027CC8010004032838020006027CC8010004284102000628070200062C2D027BC6010004027BC90100042C077209C201702B057213C201706F2001000A02027BC901000417587DC9010004027CC8010004284102000628050200062D23027BC601000403
  28FF0100066F2001000A031F0B2E0D027BC60100041F206F2101000A0328070200062C0702167DC90100042A133005005600000000000000027CC80100042839020006027CC80100042840020006193324027BC6010004027CC801000428420200062D077209C201702B057213C201706F2001000A027BC60100041F286F210
  1000A020304050E0428FC0300062A9E027BC60100047209C201706F2001000A020304050E0428FC030006027CC8010004283A0200062A0000133005004500000000000000027BC60100047209C201706F2001000A020304050E0428FC030006027BC60100047209C201706F2001000A020E050E060E070E0828FC030006027C
  C8010004283C0200062A00000013300500AA00000000000000027CC801000428430200062D34027BC60100047213C201706F2001000A0319337D027BC60100041E28FF0100066F2001000A027BC60100041F206F2101000A2B5D027BC6010004721BC201706F2001000A0319331E027BC60100041E28FF0100066F2001000A0
  27BC60100041F206F2101000A027BC60100041F286F2101000A02027BCA010004027BCB010004027BCC010004027BCD01000428FC030006027CC8010004283D0200062A0000133002007800000000000000027BC6010004027CC801000428440200062C077209C201702B057213C201706F2001000A03183320027BC6010004
  1E28FF0100066F2001000A027BC60100041F206F2101000A2B230319331F027BC60100041F0928FF0100066F2001000A027BC60100041F206F2101000A027CC801000403283E0200062AD2027CC8010004284502000619330D027BC60100041F296F2101000A027CC8010004283B020006027BC60100041F296F2101000A2A0
  0000013300200C900000000000000027CC80100042844020006163139027CC80100042840020006192E1E027CC801000428400200061F0A2E0F027CC801000428400200061F09330D027BC60100041F296F2101000A027CC801000428440200062D31027CC8010004284002000628070200062D1F027CC80100042840020006
  1F0B2E10027BC60100047223C201706F2001000A027CC8010004284002000628070200062C1F027BC6010004027BC90100042C077217C201702B057223C201706F2001000A02157DC9010004027CC8010004283F0200062A00000013300400290100001E000011027BC60100040F01722FC20170283000000A282201000A6F2
  001000A027BC60100041F206F2101000A027BC60100040F02722FC20170283000000A282201000A6F2001000A027BC7010004398F0000000F03287A00000A2C33027BC60100041F206F2101000A027BC60100040F03287D00000A0A1200722FC20170283000000A282201000A6F2001000A2B190F04287A00000A2C10027BC6
  0100047233C201706F2001000A0F04287A00000A2C31027BC60100041F206F2101000A027BC60100040F04287D00000A0A1200722FC20170283000000A282201000A6F2001000A027CC801000428400200061F092E1D027CC801000428400200061F0A332B027CC8010004284502000619331D02037DCA01000402047DCB010
  00402057DCC010004020E047DCD0100042A000000133003004F0000000000000002283E00000A036F2301000A2D0B282A040006733200000A7A02047DCE01000402037DCF01000402177DD101000402027BCF010004166A6F2401000A7DD001000402036F2301000A697DD20100042AE2027BCE010004046F01000006020328
  FF03000602280B040006027BD30100042D0B282E040006733200000A7A027BCE0100046F0A0000062A13300200C100000000000000032D1502280B040006021F14281204000628000200061001027BCE010004036F02000006020328FF010006281A040006031759450B000000020000000B000000130000001B00000023000
  0002B000000330000003B000000430000004B000000510000002B4F021728000400062B460228010400062B3E0228020400062B360228030400062B2E0228040400062B260228050400062B1E0228060400062B160228070400062B0E0228080400062B06022809040006027BCE0100046F090000062A000000133005004D00
  0000000000000228160400062D44032C08021F282819040006027BCE0100040228140400060228140400060228150400060228150400066F03000006027BCE0100046F08000006032C08021F2928190400062A0000001330050076000000000000000228160400062D6D021F282819040006027BCE010004022814040006022
  8140400060228150400060228150400066F030000062B23027BCE0100040228140400060228140400060228150400060228150400066F04000006021F2C28180400062DD3027BCE0100046F08000006021F2928190400062A0000133005006B000000180000110228160400062D62021F2828190400060228160400062C3A02
  7BCE0100042300000000000000002300000000000000001200FE150500001B061200FE150500001B066F03000006027BCE0100046F08000006022801040006021F2C28180400062DAE021F2928190400062A00133003006D000000870000110228160400062D64021F282819040006160A062D2402280B0400061F4502280C0
  40006282501000A2E0F02280C0400061F282E03172B01180A027BCE010004176F02000006020618FE012800040006027BCE0100046F09000006021F2C28180400062DAE021F2928190400062A0000001330020040000000000000000228160400062D37021F282819040006027BCE010004186F02000006022801040006027B
  CE0100046F09000006021F2C28180400062DD9021F2928190400062A1330020040000000000000000228160400062D37021F282819040006027BCE010004196F02000006022802040006027BCE0100046F09000006021F2C28180400062DD9021F2928190400062AAA0228160400062D21021F282819040006021628FF03000
  6021F2C28180400062DEF021F2928190400062A0013300900A1000000880000110228160400063A95000000021F282819040006027BCE0100040228140400060228140400060228150400060228150400066F030000062B4B0228140400060A0228140400060B0228150400060C0228150400060D021F2C2819040006027BCE
  010004060708090228140400060228140400060228150400060228150400066F05000006021F2C28180400062DAB027BCE0100046F08000006021F2928190400062A0000001330090044020000890000110228160400063A38020000021F28281904000602281C0400060A021F2828190400060228140400060B02281404000
  60C0228150400060D0228150400061304027BCE01000407080911046F0300000638820000000228140400061305022814040006130602281504000613070228150400061308062C3F021F2C28190400060228140400060B0228140400060C0228150400060D0228150400061304027BCE010004110511061107110807080911
  046F050000062B20027BCE01000411051106110711086F0400000611050B11060C11070D11081304021F2C28180400063A71FFFFFF021F292819040006383301000002281C0400060A021F2828190400060228140400061309022814040006130A022815040006130B022815040006130C110907335D110A083358110B130D0
  9130E120D280901000A120E280901000AFE01120D287A00000A120E287A00000AFE015F2C2E110C130E1104130D120E280901000A120D280901000AFE01120E287A00000A120D287A00000AFE015F3A8D0000002827040006733200000A7A0228140400061309022814040006130A022815040006130B022815040006130C06
  2C3F021F2C28190400060228140400060B0228140400060C0228150400060D0228150400061304027BCE0100041109110A110B110C07080911046F050000062B20027BCE0100041109110A110B110C6F0400000611090B110A0C110B0D110C1304021F2C28180400063A71FFFFFF021F292819040006021F2C28180400063AC
  0FEFFFF027BCE0100046F08000006021F2928190400062A1330020039000000040000110228160400062D30021F2828190400060216280A040006170A2B0B0206280A0400060617580A021F2C28180400062DEB021F2928190400062A0000001330030087000000000000000228160400062C29032D0B285804000673320000
  0A7A283000000A285A040006038C62000001285D00000A733200000A7A021F0928FF010006281B0400062C13027BCE010004196F070000060228080400062A021E28FF010006281B0400062C13027BCE010004186F070000060228070400062A027BCE010004176F070000060228010400062A7A027BD30100042D1502280C0
  40006282601000A2C080228110400062DE32A1E027BD00100042A1E027BD20100042A3E027BD101000402280D040006FE042A82027BD30100042D16027BD10100040358175902280D040006FE0216FE012A162A00133006004A0000008A000011038D700000010A061602280C0400069D03173128027BCF010004027BD10100
  046A06170317596F2701000A2602027BD1010004031759587DD10100040228110400062606732801000A2A000013300600350000000400001102280E040006252C2402027BCF01000402027BD10100040A0617587DD1010004066A6F2401000A7DD00100042A02177DD30100042A00000013300500260000008A000011038D7
  00000010A027BCF010004027BD101000417596A0616036F2701000A2606732801000A2A8A02280C0400061F2C2E1602280C0400061F292E0C02280C040006282601000A2A172A00000013300400AD0000008B0000111F1E732901000A0A02280B040006027BD30100042C25283000000A282B040006027BD10100048C620000
  0172BD040070289100000A733200000A7A066F2A01000A1F1E320B282E040006733200000A7A0602280C0400066F2B01000A260228110400062C080228130400062CCE066FE800000A0C0820A7000000283000000A1201282C01000A2D23283000000A282B040006027BD101000417598C6200000108289100000A733200000
  A7A072A00000013300200330000001800001102723FC2017028170400062D100228130400062D08027BD30100042C0A1200FE150500001B062A022814040006733D00000A2A32027223C2017028170400062A13300200570000000000000002280B04000603166FAC00000A282501000A02280C040006282501000A33360203
  281A040006027BD30100042D2502280C04000628B200000A2D0D02280C040006282D01000A2C0B282E040006733200000A7A172A162A6A02280B04000602280C04000603330902281104000626172A162A000013300600760000000000000002280B040006027BD30100042C1A283000000A286D040006280100002B2842000
  00A733200000A7A02280C040006032E3D283000000A2870040006038C70000001027BD101000417598C620000017249C2017002280C0400068C7000000128A500000A283100000A733200000A7A022811040006262A000013300600AF0000001B00001102280B04000602036F8C00000A280F0400062D5A027BD30100042C1A
  283000000A286D040006280100002B284200000A733200000A7A283000000A287004000603027BD101000417598C620000017249C2017002280C0400068C7000000128A500000A283100000A733200000A7A02036F8C00000A28100400060A03061B285100000A2C29283000000A287004000603027BD1010004036F8C00000
  A598C6200000106283100000A733200000A7A2A00133003003E0000001B00001102280B04000602036F8C00000A280F0400062D02162A02036F8C00000A28120400060A03061B285100000A2D0F02036F8C00000A281004000626172A162AAA021E28FF01000628170400062C0E027BCE010004196F06000006172A027BCE01
  0004186F06000006162AAE7ED40100042D1E7251C20170D05C000002285E00000A6F2E01000A732F01000A80D40100047ED40100042A1A7ED50100042A1E0280D50100042A56281E040006729BC201707ED50100046F3001000A2A56281E04000672BDC201707ED50100046F3001000A2A56281E04000672EBC201707ED5010
  0046F3001000A2A56281E0400067229C301707ED50100046F3001000A2A56281E0400067283C301707ED50100046F3001000A2A56281E04000672B5C301707ED50100046F3001000A2A56281E04000672F9C301707ED50100046F3001000A2A56281E040006722BC401707ED50100046F3001000A2A56281E0400067269C401
  707ED50100046F3001000A2A56281E04000672B3C401707ED50100046F3001000A2A56281E04000672D7C401707ED50100046F3001000A2A56281E04000672FBC401707ED50100046F3001000A2A56281E0400067255C501707ED50100046F3001000A2A56281E0400067293C501707ED50100046F3001000A2A56281E04000
  672BBC501707ED50100046F3001000A2A56281E04000672E1C501707ED50100046F3001000A2A56281E0400067235C601707ED50100046F3001000A2A56281E040006728BC601707ED50100046F3001000A2A56281E04000672C3C601707ED50100046F3001000A2A56281E04000672F9C601707ED50100046F3001000A2A56
  281E0400067225C701707ED50100046F3001000A2A56281E040006726DC701707ED50100046F3001000A2A56281E04000672A3C701707ED50100046F3001000A2A56281E04000672D3C701707ED50100046F3001000A2A56281E0400067201C801707ED50100046F3001000A2A56281E040006723DC801707ED50100046F300
  1000A2A56281E0400067277C801707ED50100046F3001000A2A56281E04000672A3C801707ED50100046F3001000A2A56281E04000672E1C801707ED50100046F3001000A2A56281E0400067211C901707ED50100046F3001000A2A56281E040006723DC901707ED50100046F3001000A2A56281E0400067275C901707ED501
  00046F3001000A2A56281E04000672AFC901707ED50100046F3001000A2A56281E04000672DBC901707ED50100046F3001000A2A56281E0400067219CA01707ED50100046F3001000A2A56281E0400067239CA01707ED50100046F3001000A2A56281E0400067267CA01707ED50100046F3001000A2A56281E04000672ADCA0
  1707ED50100046F3001000A2A56281E04000672F1CA01707ED50100046F3001000A2A56281E0400067233CB01707ED50100046F3001000A2A56281E0400067263CB01707ED50100046F3001000A2A56281E0400067289CB01707ED50100046F3001000A2A56281E04000672ADCB01707ED50100046F3001000A2A56281E0400
  0672DDCB01707ED50100046F3001000A2A56281E0400067209CC01707ED50100046F3001000A2A56281E0400067231CC01707ED50100046F3001000A2A56281E0400067267CC01707ED50100046F3001000A2A56281E0400067285CC01707ED50100046F3001000A2A56281E04000672A9CC01707ED50100046F3001000A2A5
  6281E04000672E3CC01707ED50100046F3001000A2A56281E040006721BCD01707ED50100046F3001000A2A56281E040006724BCD01707ED50100046F3001000A2A56281E0400067271CD01707ED50100046F3001000A2A56281E040006729FCD01707ED50100046F3001000A2A56281E04000672CFCD01707ED50100046F30
  01000A2A56281E0400067209CE01707ED50100046F3001000A2A56281E0400067255CE01707ED50100046F3001000A2A56281E0400067293CE01707ED50100046F3001000A2A56281E04000672DFCE01707ED50100046F3001000A2A56281E040006721DCF01707ED50100046F3001000A2A56281E0400067259CF01707ED50
  100046F3001000A2A56281E0400067287CF01707ED50100046F3001000A2A56281E04000672BFCF01707ED50100046F3001000A2A56281E04000672E3CF01707ED50100046F3001000A2A56281E040006721DD001707ED50100046F3001000A2A56281E040006725DD001707ED50100046F3001000A2A56281E0400067283D0
  01707ED50100046F3001000A2A56281E04000672D7D001707ED50100046F3001000A2A56281E04000672FBD001707ED50100046F3001000A2A56281E040006722DD101707ED50100046F3001000A2A56281E0400067265D101707ED50100046F3001000A2A56281E04000672A5D101707ED50100046F3001000A2A56281E040
  00672D7D101707ED50100046F3001000A2A56281E040006724FD201707ED50100046F3001000A2A56281E04000672CFD201707ED50100046F3001000A2A56281E04000672F3D201707ED50100046F3001000A2A56281E0400067219D301707ED50100046F3001000A2A56281E0400067249D301707ED50100046F3001000A2A
  56281E0400067273D301707ED50100046F3001000A2A56281E040006729DD301707ED50100046F3001000A2A56281E04000672C7D301707ED50100046F3001000A2A56281E04000672D9D301707ED50100046F3001000A2AAE7ED60100042D1E720FD40170D05D000002285E00000A6F2E01000A732F01000A80D60100047ED
  60100042A1A7ED70100042A1E0280D70100042A5628740400067259D401707ED70100046F3001000A2A562874040006728DD401707ED70100046F3001000A2A56287404000672A3D401707ED70100046F3001000A2A56287404000672C5D401707ED70100046F3001000A2A56287404000672DBD401707ED70100046F300100
  0A2A56287404000672F7D401707ED70100046F3001000A2A5628740400067211D501707ED70100046F3001000A2A5628740400067225D501707ED70100046F3001000A2A5628740400067239D501707ED70100046F3001000A2A5628740400067253D501707ED70100046F3001000A2A5628740400067271D501707ED701000
  46F3001000A2A562874040006728BD501707ED70100046F3001000A2A5602283E00000A02288A04000602032889040006262A5602283E00000A02288A040006020304288B0400062A001B300500EB0100008D000011036F8C00000A0A160B160C160D16130402167DDB01000402167DDE01000402167DDF01000402167DDD01
  000438820100001613050806341203086FAC00000A1F2D33071713050817580C166A1306081307081F125806283101000A13082B491107082E2911062D252875040006287904000672A7D501700372A7D50170280D01000A285D00000A73B40400067A11061F0A6A5A03086FAC00000A283201000A696A5813060817580C081
  108340E03086FAC00000A282D01000A2DA40811073307170B38F300000011052C2E110665130611062D252875040006287904000672A7D501700372A7D50170280D01000A285D00000A73B40400067A08063312160D02027BDE01000417587DDE0100042B3903086FAC00000A130911091F2E2E0811091F2F2E062B16170D2B
  14160D02027BDE01000417587DDE0100042B02170B0817580C08063302170B072D6F0002120411060928AE040006DE26262875040006287904000672A7D501700372A7D50170280D01000A285D00000A73B40400067A0806343003086FAC00000A1F4033252875040006287904000672A7D501700372A7D50170280D01000A2
  85D00000A73B40400067A08064477FEFFFF0211047DDD010004072C252875040006287904000672A7D501700372A7D50170280D01000A285D00000A73B40400067A2A000110000000004C010D590126630000025202283E00000A02288A040006020328850400062A00000013300400450000008E00001102283E00000A0228
  8A040006160A021200031628AE04000602167DDB01000402067DDD01000402177DDE01000402177DDF01000402167DE0010004027BE101000416169D2AA602283E00000A02167DDB01000402167DDE01000402167DDF01000402167DDD01000402288A0400062A001330040090000000000000000203288D040006398200000
  002037BDB0100047DDB01000402037BDE0100047DDE01000402037BE00100047DE001000402037BDF0100047DDF01000402037BDD0100047DDD010004037BDF010004163619037BE1010004027BE1010004037BE10100048E6928C200000A027BDD01000416311B037BDC010004027BDC010004027BDD0100041D581E5B28C2
  00000A022A7602207C0300008D7D0000017DDC010004021B8D7B0000017DE10100042A000013300300720000000000000002167DDB01000402157DDE01000402167DDF01000404207C030000361A28750400062878040006280100002B284200000A73B40400067A0416362103041759912D1A2875040006287804000628010
  0002B284200000A73B40400067A03027BDC010004046E283301000A020428A10400062A62022D03032C10022C0B032C0802036F3401000A2A162A172A2E0203288C04000616FE012A0013300400340000008F000011027BDD0100040A037BDD0100040B027BDC010004037BDC0100040607283101000A28B60400060C082C05
  0817FE012A0607FE032A220302288E0400062A2E0203288F04000616FE012A2E0203288E04000616FE012A00000013300300270000007E000011027BDD0100041D581E5B0A06043316062C11027BDC010004030628B704000616FE012A172A162A7602167DDB01000402167DDD01000402167DDE01000402167DDF0100042A5
  2027BDB0100042D0A027BDD01000416FE012A162A5A027BDE0100041533060228AF040006027BDE0100042A0000001330050054030000900000111200FE15600000021201FE1560000002042D02172A034B2D02162A034B0C0208175991130411041F0F5F2C221104195F2C0E1104175F2C04160D2B35170D2B3111041D5F2C
  04180D2B27190D2B2311041F3F5F2C0F11041F1F5F2C041A0D2B111B0D2B0D11041F7F5F2C041C0D2B021D0D034BD11E5A0959D1130511052D02162A1613060818371312007CE301000402081859917DB60200042B0D12007CE3010004177DB602000412007CE301000402081759917DB50200041201067BE2010004091F1F5
  F63D17DE2010004077BE30100047BB50200041F385F1F28332E11051B2F1A28750400062878040006280100002B284200000A73B40400067A11051B59D1130517130738FA010000077BE30100047BB50200041F785F1F60332E11051C2F1A28750400062878040006280100002B284200000A73B40400067A11051C59D11305
  17130738BA010000077BE30100047BB50200041F385F1E332E11051B2F1A28750400062878040006280100002B284200000A73B40400067A11051B59D11305161307387B0100007EF401000413087EF40100041759130911087EF5010004312311097EF30100042F1A28750400062878040006280100002B284200000A73B40
  400067A11087EF5010004310516130C2B3711097EF30100042F0517130C2B297EF601000411088F650000027BED0100047EF601000411098F650000027BED010004FE0216FE01130C110C2C0B11082517581308130A2B0911092517591309130A11057EF6010004110A8F650000027BED0100042F1A28750400062878040006
  280100002B284200000A73B40400067A11057EF6010004110A8F650000027BED01000459D1130B110B2D1E12017CE3010004177DB602000412017CE30100040216917DB50200042B4E110B1759130D110D1E5C130E12007CE301000402110E917DB6020004110E034B1759341212007CE301000402110E1758917DB50200041
  201067BE20100041D110D1E5E591F1F5F63D17DE20100047EF7010004077BE30100047BB502000491110A40A9FEFFFF110B1305077BE30100047BB6020004175FD2130711061758130611051D581E5B0C1D11051D581E5D590D11073961FDFFFF04175925100216424CFDFFFF030854092C1D17091F1F5F621759D2130F0208
  17598F7D0000012547110F66D25FD252172A133007005000000091000011037BE40100040A06027BDD01000432012A061D581E5B17590B027BDC01000407027BDC0100040791171D0617591E5D591F1F5F621759665FD29C02067DDD01000402157DDE01000402167DDF0100042A13300300F90000009200001102289C04000
  62D1A28750400062878040006280100002B284200000A73B40400067A027BDE0100041533060228AF04000603027BDE010004361A28750400062878040006280100002B284200000A73B40400067A160A2B60027BDF0100042D060228AF04000602027BE1010004027BE0010004937DDD010004027BE00100042D09021A7DE0
  0100042B0E02027BE001000417597DE001000402027BDF01000417597DDF01000402027BDE01000417597DDE0100040617580A0603379C027BDD0100041E5D2C322080000000027BDD0100041E5D17591F1F5F631759D20B027BDC010004027BDD0100041E5B8F7D00000125470766D25FD2522A00000013300400B70000009
  300001102289C0400062D1A28750400062878040006280100002B284200000A73B40400067A0228940400062C26160D0212037EF60100047EF50100048F650000027BEE0100041628AE04000602097DDD010004027BDD0100041759D10A2080000000061E5D1F1F5F63D20B061E5BD10C027BDC010004088F7D000001254707
  58D252027BDC01000408912D26082D1A28750400062878040006280100002B284200000A73B40400067A081759D10C170B2BBE02177DDB0100042A00133003004E0000000000000002289C0400062C08036F9C0400062D02162A037BDD010004027BDD0100043211037BDD010004027BDD0100043305042D02162A027BDC010
  004037BDC010004027BDD01000428B604000616FE012A000013300400460000007E000011027BDD0100041D581E5C0A06043602162A027BDC01000403027BDD01000428B60400062C02162A06043319062C110306175991027BDC010004061759913305052D02162A172A2A027BDB01000416FE012A2A027BDB01000417FE01
  2A4E03027BDD0100041D581E5B54027BDC0100042A13300400600000009400001172A7D50170733501000A0A027BDD0100042C46160B2B391202FE155E000002160D0212011202120328A604000606087BD90100046F3601000A2606092D0772A7D501702B0572ABD501706F3701000A2607027BDD01000432BE066FE800000
  A2A1330020017000000950000111200FE15610000021200027BDD0100047DE4010004062A00133003002E00000096000011031E5AD10A032C1E027BDC010004031759910B170C2B0A061759D10A081762D20C07085F2CF102067DDD0100042A0000133005008800000097000011030458027BDD010004311A28750400062878
  040006280100002B284200000A73B40400067A1E031E5D59D10A17061F1F5F621759D20B0506043115027BDC010004031E5B91075F0604591F1F5F632B13027BDC010004031E5B91075F0406591F1F5F62D2520406311E0406590C050547027BDC010004031E5B1758911E08591F1F5F63D260D2522A13300600B0000000980
  00011030458027BDD010004311A28750400062878040006280100002B284200000A73B40400067A031E5E0A041E0659283101000A0B1E065907590C031E5C0D05027BDC01000409916E081F3F5F6417071F1F5F6217596A5F0407591F3F5F62550917580D04075913042B4111041E321C05054C027BDC010004092517580D91
  6E11041E591F3F5F6260552B1A05054C027BDC010004092517580D916E1E1104591F3F5F64605511041E59130411041630BA2A13300600D400000099000011052D012A0349055820E01B0000311A2875040006288204000672AFD50170285D00000A73B40400067A03491E5DD10A051E0659288D00000AD10B1E06590759D10
  C03491E5C0D17061F1F5F6217591E06591F1F5F62130417071F1F5F6217591E065907591F1F5F621305027BDC01000409027BDC010004099111045F040507591F3F5F64081F3F5F626911055F60D29C0917580D05075913062B2C027BDC010004092517580D11061E300B041E1106591F3F5F622B090411061E591F3F5F64D2
  9C11061E59130611061630CF0303490558D1532A13300400900000009A000011027BDD0100040349331A28750400062878040006280100002B284200000A73B40400067A1E0A027BDD01000403495906288D00000AD10B02034907120228A2040006080607591F1F5F62D20C047EF7010004089154044B20FF000000331A287
  50400062878040006280100002B284200000A73B40400067A0303497EF6010004044B8F650000027BEC01000458D1532A133004007E000000920000110203120028A5040006067EF10100042E08067EF2010004331A28750400062878040006280100002B284200000A73B40400067A04167DD8010004020306047CD9010004
  28A904000602034917120128A20400060303491758D1530507172E03172B011654047BD80100042D11054A17330C047CD9010004254C176A59552A0000133004005E0000009B0000110203120028A5040006067EF3010004341A28750400062878040006280100002B284200000A73B40400067A0203060428A904000602034
  917120128A30400060303491758D1530507176A2E03172B011654054A17330704044C176A59552A000013300500430000001B00001102050E040E0528A70400060E054A2D320549027BDD0100042E28042D0772C5D501702B0572D3D501700A2875040006287D040006060203283100000A73B40400067A2A00133004000C01
  00009C000011040A0203497EF6010004068F650000027BEA010004120128A30400060303497EF6010004068F650000027BEA01000458D1537EF6010004068F650000027BEA010004193EAF0000007EF6010004068F650000027BEA0100041B3E8C0000007EF6010004068F650000027BEA0100041F09316A7EF6010004068F6
  50000027BEA0100041F1031427EF6010004068F650000027BEA0100041F26311A0721FFFFFFFF3F0000005F07210000000080FFFFFF5F1764600B0720FFFF00006A5F07200000FEFF6A5F1764600B0720FF0100006A5F072000FCFFFF6A5F1764600B071F1F6A5F071FC06A5F1764600B071D6A5F071FF06A5F1764600B0507
  7EF6010004068F650000027BEF01000458552A13300400510000009D000011047BD80100040A0645030000002900000001000000150000002A0203047BD9010004047BDA01000428AB0400062A0203047BD9010004047BDA01000428AC0400062A0203047BD90100040528AE0400062A0000001330050044000000000000000
  2037EF60100047EF10100048F650000027BEB0100046E7EF60100047EF10100048F650000027BEC01000428A40400060203041728AE0400060203056A1628AE0400062A13300500440000000000000002037EF60100047EF20100048F650000027BEB0100046E7EF60100047EF20100048F650000027BEC01000428A4040006
  0203041728AE0400060203056A1628AE0400062A133005006D0100009E000011047EF60100047EF30100048F650000027BEF0100043217047EF60100047EF50100048F650000027BEE010004311A2875040006288204000672E1D50170285D00000A73B40400067A0428B90400060A060B02037EF6010004078F650000027BE
  B0100046E7EF6010004078F650000027BEC01000428A4040006047EF6010004078F650000027BEF010004590C7EF6010004078F650000027BEA010004193EB2000000081D6A5F1E6A60081FF86A5F1762600C7EF6010004068F650000027BEA0100041B3E8C000000081F1F6A5F081FE06A5F1762600C7EF6010004068F6500
  00027BEA0100041F09316A0820FF0100006A5F082000FEFFFF6A5F1762600C7EF6010004068F650000027BEA0100041F1031420820FFFF00006A5F08200000FFFF6A5F1762600C7EF6010004068F650000027BEA0100041F26311A0821FFFFFFFF3F0000005F082100000000C0FFFFFF5F1762600C0203087EF6010004078F6
  50000027BEA01000428A40400062A920517330604176A58100202030428AD0400060203052C04166A2B02176A1728A40400062A000013300400D70100009F000011027BDD0100042D0802167DDE0100042A027BDF01000417371B027BE0010004027BDF0100041759330B027BE101000416932D012A027BDF0100041B33012A
  02177DDE010004027BE101000416169D160A7EF7010004027BDC0100041691910B150C027BDD01000417590D027BDD0100041D581E5B13041205FE15600000021206FE15600000020720FF000000331A28750400062878040006280100002B284200000A73B40400067A077EF30100042F1A287504000628780400062801000
  02B284200000A73B40400067A087EF6010004078F650000027BED010004580C08093CAD000000081963130712057CE3010004027BDC0100041107917DB60200041107175811042F1912057CE3010004027BDC01000411071758917DB50200042B0D12057CE3010004167DB5020004120611057BE201000408661D5F1F1F5F63
  D17DE20100047EF701000411067BE30100047BB5020004910B11067BE201000420000100005F390EFFFFFF0617580A061B3310160A02027BDE0100041B587DDE010004027BE101000406081758D19D38E5FEFFFF08092E1A28750400062878040006280100002B284200000A73B40400067A02027BDE01000406587DDE01000
  402027BDE0100041B283101000A7DDF01000402067DE00100042A001330030045000000A000001103755F0000020A062C39027BDB010004067BDB0100043329027BDD010004067BDD010004331B027BDC010004067BDC010004027BDD01000428B604000616FE012A162A162A0000001330030094000000000000002079326A
  DE20295555A55A027CDB010004FE16820000026F3801000A5820295555A55A283901000A027BDC0100046F3A01000A5820295555A55A027CDD010004283B01000A5820295555A55A027CDE010004283C01000A5820295555A55A027CDF010004283C01000A5820295555A55A027CE0010004283C01000A5820295555A55A283
  D01000A027BE10100046F3E01000A582A26020304283F01000A2A26020304284001000A2A220203284101000A2A1E02284201000A2A000000133004004A000000A1000011042D02162A041E5C0A02030628B70400060B07162F02182A07163102172A20FF0000001E041E5E591F1F5F620C020691085F0D030691085F130409
  11042F02182A0911043102172A162A000013300300220000007E000011160A2B180206910306912F02152A0206910306913102172A0617580A060437E4162A000013300600C7060000A20000111F0F80F00100041680F10100041780F20100041880F30100041D80F40100041F0E80F50100041F0F8D6500000225161200FE1
  5650000021200167DE90100041200167DEA0100041200187DEB01000412001C7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A46500000225171200FE15650000021200167DE90100041200167DEA0100041200197DEB01000412001C7DEC0100041200167DED0100041200166A7DEE010004
  1200166A7DEF01000406A46500000225181200FE156500000212001F307DE901000412001F357DEA01000412001A7DEB01000412001C7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A46500000225191200FE156500000212001F207DE901000412001F247DEA01000412001B7DEB0100041
  2001C7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251A1200FE156500000212001F0C7DE901000412001F0F7DEA01000412001C7DEB01000412001C7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251B1200FE15650000021200
  1C7DE901000412001E7DEA0100041200187DEB01000412001A7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251C1200FE15650000021200197DE90100041200197DEA01000412001D7DEB01000412001B7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF0
  1000406A465000002251D1200FE15650000021200187DE90100041200187DEA0100041200177DEB0100041200187DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251E1200FE15650000021200187DE90100041200187DEA01000412001A7DEB0100041200197DEC010004120016
  7DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251F091200FE15650000021200197DE90100041200197DEA01000412001B7DEB0100041200197DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251F0A1200FE156500000212001C7DE901000412001E7DE
  A01000412001C7DEB0100041200197DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251F0B1200FE156500000212001F0A7DE901000412001F0D7DEA01000412001F0E7DEB01000412001A7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A46500
  0002251F0C1200FE156500000212001F0C7DE901000412001F0F7DEA01000412001F1E7DEB01000412001B7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251F0D1200FE156500000212001F207DE901000412001F247DEA01000412001F3E7DEB01000412001C7DEC010004120
  0167DED0100041200166A7DEE0100041200166A7DEF01000406A465000002251F0E1200FE156500000212001F307DE901000412001F357DEA01000412001F3F7DEB01000412001C7DEC0100041200167DED0100041200166A7DEE0100041200166A7DEF01000406A46500000280F601000420000100008D7D00000180F70100
  047EF30100040B2B387EF6010004078F650000027EF6010004078F650000027BEC0100047EF6010004078F650000027BEA010004581758D17DED0100040717580B077EF501000431C07EF60100047EF40100048F65000002166A7DEF0100047EF60100047EF40100048F65000002177EF60100047EF40100048F650000027BE
  90100041F1F5F6217596A7DEE0100047EF401000417580C2B797EF6010004088F650000027EF60100040817598F650000027BEF010004176A7EF60100040817598F650000027BE90100041F3F5F62587DEF0100047EF6010004088F650000027EF6010004088F650000027BEF010004176A7EF6010004088F650000027BE901
  00041F3F5F6258176A597DEE0100040817580C087EF00100043F7CFFFFFF7EF401000417590D2B627EF6010004098F650000027EF60100040917588F650000027BEF010004176A7EF6010004098F650000027BE90100041F3F5F62597DEF0100047EF6010004098F650000027EF60100040917588F650000027BEF010004176
  A597DEE0100040917590D097EF30100042F961613042B137EF7010004110420FF0000009C1104175813041104200001000032E41613052B581E7EF601000411058F650000027BEC0100045913061711061F1F5F6213071613082B297EF70100047EF601000411058F650000027BEB01000411061F1F5F621108601105D29C11
  08175813081108110732D111051758130511057EF0010004329F2A00133003003C0000008E0000117EF40100040A2B05061758D10A027EF6010004068F650000027BEE01000430E82B05061759D10A027EF6010004068F650000027BEF01000432E8062A920273880400067DF801000402283E00000A027EFB01000417588D8
  60000027DFC0100042A0000001330060077040000A3000011160A160B0414288D0400062C74046F9C0400062C6C0314288C0400062C1A28750400062878040006280100002B284200000A73B40400067A0304166F9A0400062C23037BDD01000413081209FE155E00000216130A0412081209120A6FA6040006170A2B1C2875
  040006287D04000672D3D501700403283100000A73B40400067A0514288D0400062C74056F9C0400062C6C0314288C0400062C1A28750400062878040006280100002B284200000A73B40400067A0305166F9A0400062C23037BDD010004130B120CFE155E00000216130D05120B120C120D6FA6040006170B2B1C287504000
  6287D04000672C5D501700503283100000A73B40400067A027EF60100047EF50100048F650000027BEE010004176A587DFA01000402167DF9010004160C160D161304161305166A1306166A130706075F398C010000037BDD01000425130513041104130E0403171204120612026FA80400060503161205120712036FA80400
  0611061107331E0809331A082DD32875040006287A0400060405289100000A73B40400067A027BF8010004046F89040006261106110731172875040006287A0400060405289100000A73B40400067A11061107336F081733172875040006287A0400060405289100000A73B40400067A027BF8010004120E1106176FAE04000
  60503161205120712036FA8040006027BFC010004168F860000021107186A597DBB020004027BFC010004168F86000002110E7DBC0200040211077DFA01000438BF01000011071106176A583133027BFC010004168F8600000211067DBB020004027BFC010004168F86000002110E7DBC0200040211077DFA01000438830100
  00027BF8010004120E1106176FAE040006081733230403171204120612026FA8040006027BFC010004168F8600000211067DBB0200042B13027BFC010004168F86000002166A7DBB020004027BFC010004168F86000002110E7DBC0200043821010000062C52027BF8010004036F8904000626037BDD0100041304040317120
  4120612026FA8040006027BFC010004168F8600000211067DBB020004027BFC010004168F86000002037BDD0100047DBC02000438CC000000072C5A027BF8010004036F8904000626037BDD01000413050503161205120712036FA8040006027BFC010004168F860000021107186A597DBB020004027BFC010004168F860000
  02037BDD0100047DBC0200040211077DFA0100042B6F0314288D0400062C26027BF8010004036F8904000626027BFC010004168F86000002037BDD0100047DBC0200042B1D027BF80100046F93040006027BFC010004168F86000002167DBC020004027BFC010004168F86000002166A7DBB0200042B0E05031612051207120
  36FA80400060514288D0400062C1A057BDD010004110533DF2B0E0403171204120612026FA80400060414288D0400062C0A047BDD010004110433DF02177DF90100040314288C0400062C0E027BF8010004177DDE0100042B1F027BF8010004036F9504000617587DDE01000402036FA00400067DFD010004027BF801000416
  7DDF01000402167DFE01000402167D000200042A0013300500600100008E000011027B000200042C0C02167D000200043845010000027BF9010004174088000000027BFC010004168F860000027BBB020004176A58027BFA010004336C027BF8010004027BFC010004168F860000027CBC020004027BFC010004168F8600000
  27BBB020004176FAE040006027BFC010004168F86000002166A7DBB02000402027BFA0100047DFF010004027EF60100047EF50100048F650000027BEE010004176A587DFA0100042B66027BFC010004027BF901000417598F860000027CBB020004254C176A5855027BFC010004027BF901000417598F860000027BBB020004
  7EF60100047EF50100048F650000027BEE010004311A28750400062878040006280100002B284200000A73B40400067A027BFC010004027BF901000417598F860000027BBC0200040A027BF80100041200027BFC010004027BF901000417598F860000027BBB020004166FAE040006027BF8010004067DDD010004027BF8010
  0042A2E208000000080FB0100042A1330020016000000A40000111200FE1568000002120073880400067D01020004062A00001330040043000000A50000110228D20400062C0628C50400062A73BA0400060A06027B01020004037B01020004047B010200046FBB0400061201FE15680000021201066FBC0400067D01020004
  072ABE0228D20400062D090F0128D20400062C067EEA00000A2A037B01020004027B01020004176F9A04000628EB00000A2A820228D20400062C067E4301000A2A027B010200046F9504000668284401000A2A13300300B0000000A60000110228D20400062C0628C50400062A03162F1A2875040006287B040006280100002
  B284200000A734501000A7A1200FE15680000021200027B0102000473830400067D01020004067B010200047BDD0100041D581E5C0B067B010200047BDC01000412010328960400062C3B067B01020004076FA1040006067B010200047BDE010004152E13067B01020004257BDE01000403597DDE010004067B01020004167D
  DF0100042B081200147D01020004062A13300500B0010000A70000110228D20400062D120F0128D20400062D090F0228D20400062C0628C50400062A020328C004000628F000000A28EF00000A2C2628750400062881040006038C680000020271680000028C68000002289100000A73B40400067A1200FE1568000002027B0
  10200047BDC0100040B037B010200047BDC01000426047B010200047BDC0100040C027B010200047BDD0100040D1D09581E5B1304037B010200047BDD01000413051D1105581E5B047B010200047BDD01000413061D1106581E5B13070911055911065813081D1108581E5B13091109207C030000311A287504000628820400
  0672F3D50170285D00000A73B40400067A11098D7D000001130A08110A110728C200000A11071759130B251759130C11071E5A110659130D1E5A110559130E2B7416130F110C16320F07110C911E110E591F1F5F62D2130F110C175811042F13110F07110C175891110E1F1F5F63D260D2130F110B163219110A110B8F7D000
  0012547110F1E110D591F1F5F63D260D252110B175811092F10110A110B1758110F110D1F1F5F62D29C110B1758130B110C1758130C110B110932861200110A110973840400067D01020004062A1330020027000000A40000111200FE15680000021200027B0102000473830400067D01020004067B010200046F9904000606
  2A1A7E020200042A000013300400BE000000A80000110F0028D200000A2C0628C50400062A0F0028D300000A0A066F8C00000A2C1D06066F8C00000A17596FAC00000A1F2F330B06166FAC00000A1F2F2E1B28750400062879040006028C49000001285D00000A73B40400067A0616066F8C00000A17596F4601000A0A0672A
  7D50170285A00000A2C1B28750400062879040006028C49000001285D00000A73B40400067A066F8C00000A2C100617066F8C00000A17596F4601000A0A1201FE156800000212010673860400067D01020004072ABE0F0028D20400062D200F0128D20400062D17027B01020004037B01020004288C04000628EB00000A2A7E
  EA00000A2ABE0F0028D20400062D200F0128D20400062D17027B01020004037B01020004288D04000628EB00000A2A7EEA00000A2ABE0F0028D20400062D200F0128D20400062D17027B01020004037B01020004288F04000628EB00000A2A7EEA00000A2ABE0F0028D20400062D200F0128D20400062D17027B01020004037
  B01020004288E04000628EB00000A2A7EEA00000A2ABE0F0028D20400062D200F0128D20400062D17027B01020004037B01020004289104000628EB00000A2A7EEA00000A2ABE0F0028D20400062D200F0128D20400062D17027B01020004037B01020004289004000628EB00000A2A7EEA00000A2ABE0375680000022C0D02
  03A56800000228CE0400062A28750400062877040006280100002B284200000A739700000A7A0000133002004C000000000000000228D20400062C0D0F0128D20400062D02152A162A0F0128D20400062C02172A0271680000020328C904000628EF00000A2C02152A0271680000020328CA04000628EF00000A2C02172A162
  A1330020039000000A90000110375680000022C2F03A5680000020A0228D20400062C0B120028D20400062C02172A0271680000020628C70400060B120128C400000A2A162A0000001330030030000000AA0000110228D20400062C02162A160A027B0102000412006F9E0400060B160C160D2B0A08070991610C0917580D09
  0637F2082A6A0228D20400062C06723FC201702A027B010200046FE800000A2A36027B0102000414288C0400062A000000133004008E000000850000110228D20400062D1F2875040006287C0400067219D601707223D60170289100000A73B40400067A032D1F2875040006287F0400067219D60170722DD60170289100000
  A73D600000A7A03207D0300006F4701000A0A068E69207C030000311F28750400062880040006207C0300008C62000001285D00000A73B40400067A0206068E6973840400067D010200042A0000133005006B000000000000000228D20400062C1F2875040006287E040006723BD601707223D60170289100000A73B4040006
  7A032D1F2875040006287F040006723BD601707247D60170289100000A73D600000A7A03027B010200047BDC01000416027B010200047BDD0100041D581E5B6F4801000A2AB602283E00000A02037D240200040204D27D250200040205D27D2602000402036FE70400061758D27D270200042A1A7E280200042A133005005E0
  00000AB000011020A1B8D7D0000010B071A027B270200049C027B270200040C2B38067B250200040D067B260200041304067B270200041305070817590311056F4B02000609110428460200069C066FE80400060A081759D20C081630C40773DC00000A2A0000133005007F000000AB000011020A1B8D7D0000010B071A027B
  270200041758D29C07027B2702000403027B270200041758D16F4B020006040528460200069C027B270200040C2B38067B250200040D067B260200041304067B270200041305070817590311056F4B02000609110428460200069C066FE80400060A081759D20C081630C40773DC00000A2A1E027B270200042A1E027B24020
  0042A2E73E304000680280200042AFE020E050E060E0773E20400067D2A02000402037D2B02000402047D2C02000402057D2D020004020E047D2E020004020E056FE70400061758D17D290200042AC20228E40400067D2A02000402037D2B02000402047D2C02000402057D2D020004020E047D2E02000402167D290200042A
  9E02283E00000A02037D2F02000402734901000A7D3002000402047D3102000402057D320200042A32027B300200046F4A01000A2A3E027B300200046F4B01000A16FE012A0000001330040026000000AC00001103027B310200046FE50400060A027B300200040604027B32020004734D0200066F4C01000A2A00001330040
  029000000AC00001103027B3102000404056FE60400060A027B30020004060E04027B32020004734D0200066F4C01000A2A8E027B300200046F4B01000A1F403102162A027B300200046F4B01000A1A2F02172A182A1E027B2F0200042A00000013300400740000000000000002283E00000A036FF90400062D1702187D3902
  000402047D3B02000402057D3C0200042B2F02036FF90400061758D27D3902000402037B3B020004186204607D3B02000402037B3C020004186205607D3C02000402027B39020004185A027B3C020004027B3B02000428650200067D3A0200042A4A027B3A020004027B3902000428670200062A4A027B3A020004027B39020
  00428680200062A0000133003003E000000040000110228F90400062D04180A2B2103027B3B020004186260100104027B3C0200041862601002027B3902000417580A06185A040328650200060628670200062A0000133003003E000000040000110228F90400062D04180A2B2103027B3B020004186260100104027B3C0200
  041862601002027B3902000417580A06185A040328650200060628680200062A1E027B390200042A000013300400400000000000000002050E040E0528F404000602057B3D0200040E05766C035A587D3D02000402057B3E0200040E04766C045A587D3E02000402037D3F02000402047D400200042A920228F304000602037
  D3D02000402047D3E02000402057D3F020004020E047D400200042A00000013300500550000000000000073A300000625166F9800000625196F990000062502036FA000000625020458036FA1000006250204580305586FA100000625020305586FA10000062502036FA1000006256F9D000006256F9E0000066F9F0000062A
  7A027B3D020004027B3E020004027B3F020004027B4002000428FC0400062A1330040042000000AD0000110228F90400062C031A2B021F100A027B3F020004066C5B0B027B40020004066C5B0C027B3D02000404766C075A58027B3E02000403766C085A58070828FC0400062A9E02734D01000A7D4402000402283E00000A0
  2037D4102000402047D4202000402057D430200042A32027B440200046F4E01000A2A3E027B440200046F4F01000A16FE012A001330060093000000AE000011036FF50400060A027B410200042D03142B06036FFD0400060B052D08027B420200042D16027B440200040606040705736B0200066F5001000A2A036FF6040006
  0C036FF90400061F092F320417332E027B440200040606170716736B0200066F5001000A027B4402000406176A5808160716736B0200066F5001000A2A027B440200040608040716736B0200066F5001000A2A0013300600A0000000AE0000110304056FF70400060A027B410200042D03142B080304056FFE0400060B0E052
  D08027B420200042D18027B4402000406060E04070E05736B0200066F5001000A2A0304056FF80400060C036FF904000617581F092F330E0417332E027B440200040606170716736B0200066F5001000A027B4402000406176A5808160716736B0200066F5001000A2A027B4402000406080E040716736B0200066F5001000A
  2A62027B44020004166A156A181416736B0200066F5001000A2A42027B440200046F4F01000A1F40FE022A3E027B440200046F4F01000A1AFE042A6602283E00000A02037D4B02000402285101000A7D4D0200042A1330100080020000AF000011027B4B0200040A06450300000002000000D50100005E020000162A02157D4
  B02000402027B4E020004027B5002000473B700000A7D5E02000402027B4E020004027B5002000473B700000A7D5F020004160B160C02167D6002000402167D61020004027B5202000417027B54020004027B56020004027B58020004027B5A020004230000000000000000230000000000000000027B4E020004027B500200
  04027B5E020004027B5F02000412011202027C60020004027C610200046F7103000602027B58020004027B500200046C5B7D6202000402027B5A020004027B4E0200046C5B7D6302000402167D64020004383601000002167D650200043807010000027B5E020004027B64020004027B6502000428C300000A2D1C027B5F020
  004027B64020004027B6502000428C300000A39C000000019027B54020004027B650200046C027B620200045A58027B56020004027B640200046C027B630200045A58027B62020004027B6302000428910300060D027B5C0200042D0D096F2B0300066FC800000A2B1009288A0300066FB90200066FC800000A130402027B64
  020004027B4E0200045A027B65020004581758027B5F020004027B64020004027B6502000428C300000A2D0E027B610200042D03172B04162B0118D21104738B0300067D4C02000402177D4B020004172A02157D4B020004027B65020004130502110517587D65020004027B65020004027B500200043FE8FEFFFF027B64020
  004130502110517587D64020004027B64020004027B4E0200043FB9FEFFFF027B600200042C3B027B5C0200042D3302027B54020004027B56020004027B58020004027B5A020004288F0300067D4C02000402187D4B020004172A02157D4B020004162A1E027B4C0200042A1A735201000A7A00133002008B000000B0000011
  027B4B0200041FFE3318027B4D020004285101000A330B02167D4B020004020A2B071673070500060A06027B530200047D5202000406027B550200047D5402000406027B570200047D5602000406027B590200047D5802000406027B5B0200047D5A02000406027B4F0200047D4E02000406027B510200047D5002000406027
  B5D0200047D5C020004062A1E02280D0500062A0042534A4201000100000000000C00000076342E302E33303331390000000005006C00000020B50000237E00008CB50000206F000023537472696E677300000000AC24010058D601002355530004FB020010000000234755494400000014FB0200FC2E000023426C6F620000
  00000000000200000157FFA33F091F000000FA013300160000010000008A0000008B000000C00200000E050000AF0700003500000052010000270100002401000011000000010000000600000002000000B000000016000000A0000000A60000000F00000003000000220000003A00000007000000010000000400000002000
  000220000000500000007000000010000000000593A01000000000006002F28344E0600F728344E0600D429344E06006A26384D1300D54E0000060017294B6E0600405A4B6E0600B6284B6E06009726154E06009029EC3C06003D29134106007529134106007F2713410600BB29134106004228134106005F2813410600AB26
  13410600142813410600C426134106009A274B2F0600E240C05406008528C054060016264B6E0600F259EC3C0600383DEC3C06003501EC3C0600E828EC3C06003B20EC3C0A00472C794A06009147FD0806000A4AFD080A005F59794A0A003D27794A0E00E349EB3B0E006A47EB3B0600E423EC3C0600AD5CEC3C06008F36EC3
  C0A00701B245006004001D20C06007E01D20C06008C01D20C12006301D20C06004D264B6E0600961F4B6E0600D1274B6E0600921BEC3C06004C1C154E0600A86AEC3C06000621EC3C06009443EC3C06008C43EC3C0600F2294B6E0600CD28344E0600E302EC3C06005E27EC3C0A006F5124500600861BDC540A002B1C245006
  00874BDC540600752ADC5412005B01D20C0A00A128794A0A005A3D24500A00AB0224500A00FB26794A0600D31C344E0A00EC25794A06003C43FD080A00F63B24500600AD3CFD080A006329794A0A001B3124500A00365524500600D649FD080600B3274B6E1200FF02D20C0600F002D20C0600DD26344E0600D125344E0600F
  C27384D0600B33CFD080600F649FD080600E147A7651200FF25CC4806003026384D0600A848544E06005744B04012003425A93812007E26A93806007744C54006003868C54006007A1BEC3C0A00E313794A0A00DD13794A0A00E90424500600451CEC3C0600AE02EC3C0600C631EC3C0600C247EC3C06007A43EC3C0600E232
  EC3C0600CC43EC3C0E002220EB3B0600681CEC3C0E00634AEB3B06002E20154E0600BA37154E06008944134106003E5213410600E54CEC3C06007545EC3C06003E4CEC3C06002D3D154E06005D40154E0600D35FEC3C0600F232FD080600F442FD080600F422154E0600D642EC3C06009755344E0600551CEC3C0600E204EC3
  C0600BE42EC3C0600502AEC3C06002643EC3C06000A43EC3C0600F53DEC3C06008D4CD82E06004B0ED82E06005143EC3C06009A02EC3C0600173EFD0806004D4AEC3C0600734FB0400600456B134106006B01D20C0600DE42EC3C0000000088050000000001000100800110006344000061000100010080011000A2560A5061
  0028000100000100007B5C0A5065002A000100000100002C360A5065002E0001000001000000510A5065003200010000010000B6200A50650037000100000100009F200A5065003C000100A0000000F1360A50000049000100000100005B4F0A50650049000B00000100000D400A50650051000B000821100049630A5071005
  4000B00082110001C210A50710056001000080110001F080A5071005A00100008011000CB5F0A5071005E00110008211000B0220A5071005F001200082110008A1F0A5071006100130008011000A9550A50710064001400082110003A0C0A50710066001800800110007A390A5061007000930001010000A1250A5065007000
  98000100100003480A5061008000980001001000EF470A5061008300A4000920100080240A5061008600B0000920100047240A5061008800B70009201000AF240A5061008A00BE000920100012240A5061008B00C50000001000B8490A5061009000CA00000010003F470A5061009600D8000920100098240A506100A100050
  10920100064240A506100A2000C0109201000CC240A506100A3001301000100004D520A506500A4001A0108011000D4240A507100A9001A01092010002D240A506100B0002501A00000004E010A500000B7002B0180011000B4500A506100B7002E0100000000D2470A506100B7002F0108011000BB0B0A507100C400470108
  001000164B0A506100D00047010000100068490A506100D4004E010800100001490A506100D600520100001000AD470A506100DF005801000010008A430A50D100DF00630100000400D54D0A506100E000650100001000FD360A506100E400E40101010000EA200A506500EA00F10101010000C4200A506500F500F101A1000
  00040370A5000000101F101A100000013000A5000000101F701A100000031370A5000000101F801A100000001000A5000000101FE018001100039500A5061000101FF0100001000C8360A50610002010A0200001000DE360A50610004011502080110001E370A50710005012002080110000A370A50710007012C0208011000
  41680A50710009013802000010008A520A5061000F0146020000100070400A5061001B01490200001000CE1A0A5061001D014C020000100025410A5061002301530200001000934B0A506100240155020100100068420A50610037015F02010010004A420A5061003701620281011000C92B0A5061003701650280011000A65
  20A5061003701670200010000ED270A50650044016B0200001000F01A0A50610048016B02000010009A4B0A5061004D016C0200001000871B0A5061005E017802010010002E420A5061005F017A0201211000FE6A0A5061005F01860201211000236D0A5061007201FB02A10000009E1B0A5000007E017103000010004E440A
  5061007E01750300000000CC640A50610086017603080110004B040A50710088017D0380010000F1400A5061008B017E030000100001410A50610093018003000010009F3A0A50610099018B030100100015190A5061009C018C0380011000B1540A5061009C01930300001000514B0A505801A0019703000010003E4B0A505
  801A0019B0380001000594B0A506100A201A303000010007B530A506100AE01BC0300001000014A0A506100AE01C0030000100088470A506100BE01D10300001000ED490A506100C601F1030000100074470A506100CE01FD0300001000FA4D0A506100D4011D040000100046500A506100D601730408011000E85F0A507100
  D801830400001000E7320A506100DB0183041001100078510A507100E201B2040801100054370A507100E401B2040001000007090A506500E501B20401201000A9420A50CD00E901B204800110008A390A506100E901B60408011000471A0A507100E901B80408010000F04E0A507100F001B804000010002F4C0A506100F80
  1BA04090110001D0E0A5071000102BE04000100009105000061000302D60403010000D123000091000A02D604030100007725000065000A02DA0402010000F623000091000F02DA0402010000AE23000091000F02DE04030100009225000065000F02E204030100005C18000065001302E204020100007A1D000065001802E2
  04020100005B6E000065001A02E20402010000EE4C000065002002E20403001000C20D000061002402E2040B0110008A3A000071002902EA0403001000603C000061002F02EC04030100008425000065003302F30403001000C20D000061003902F304030010008A3A0000DC013D02FA0403001000603C000061004102FF040
  30100008425000065004502070503011000D002000061004B02070505010000A9250000650066020F050301000085420000650089020F05050100004F4800006500A1020F0503010000E91C00006500A4020F0502010000D71F00006500A8020F0502010000016500006500AC020F0502010000E71F00006500AF020F050201
  0000812000006500B2020F050A011000865100007100B5020F0502010000405600006500B7020F050B011000491400007100BB020F0513010000C50400007100BD020F05130100002D0000007100BD020F0513010000610400007100BD020F0513010000F20400007100BD020F0502010000C45800006500BD020F0556803B3
  18C0356802240380A56802F40380A56806C3F380A5680BF38380A568034318C0356804C308C03568012308C035680CA308C035680C6308C035680E4308C03568036308C03568050318C035680D8698C03568049318C035680AA698C035680CE3D8C0356801F488C035680AD1C8C03568047188C035680776C8C0356802C0E8C
  03568065698C03568079698C0356808C698C035680793F8C035680B12A03145680952A0314568067368C035680012D8C035680F52F8C0356808F3F8C035680BC368C035680FA158C035680E1158C035680F43F8C035680D73F8C035680BD3F8C035680A33F8C0353802E09380A5380D107380A0606890B380A5680940706145
  680760906145680BD0606140606890B0A145680252E0D145680401B0D145680602E0D140606890B0A145680221E11145680051E11145680620D11145680D52B11140606890B0A145680051E15145680620D15145680001E15145680510D15140606890B0A145680114419145680496319145680BB3019145680F63E19145680
  7C6219145680963019145680E73E19145680EB41191456809C3119145680982B19145680B43E19145680E01419140606890B0A145680221E1D145680BF511D145680A0511D14568051111D14568041621D1456803C5F1D14568049211D140606890B0A1456807E0421145680EA1421140600436A25140600026F25140600436
  A25140600026F251406001E6F25140600DC6125140600436A25140600026F251406001E6F251406003B3D251406000C2115140600D75A380A06002D2711140600B35A380A0600CA5A380A06000C2119140600944A251406009F4A25140100975828140100E9512D140100D5512D140100855031140100F84F36140100FC563B
  14010013110E09010061210E090100E31B0E0936005E34380A0606890B380A56804C1240145680EB4340145680146240145680124540145680842E40145680A16240145680803E40145680D92D401456809C2E40145680914040145680592E40145680161540145680F844401456806A3E401456805A1A401401009613380A2
  100634B441421001648481401009613380A2100634B44142100164848140100FE414D140100FA140E090100FE414D140100FA140E090100FE414D145180C661251401002321521401009613380A01003A0F0E095180E44E25140100174A56145180D3158C035180BF158C03010049685B140100740A25140100130B25145180
  D3158C035180BF158C0321004E3744142100A54760140100A258380A01002157380A01007C0A251401001B0B25140100845F0E090100750A25140100140B25140100FE414D140100FE414D140100FE414D140606890B380A5680221E651456800808651456806041651456808B6E651451807E06380A51803709380A0100961
  3380A010016484814010010080E09010078410E090100966E0E0951807E06380A01002F0A25140100890A25140100CE0A25140100280B251401009613380A01003A0F0E093100320C6A143100020C6A14210097586E142100FD070E090100E95177140100D55177140100FC567F142100855088142100F84F9114210012579A
  140100BA25A2140100C55F15140100172711140600A258AB0306002357380A0600F551AB030600E151AB0306009150AB0306005D50380A06000350AB030600A54F380A06000957AB030600CF56380A06005A110A14060063210A1401008123A71401009023AC140100FD48B114010003100E09010003100E0901008B6AB1140
  1005A49B61401003B49B61401002C49B61401001D49B61401000F49B61401004A49B614010059110A14010062210A14010003100E0901003C18061451804B1D8C035180EC33380A5180154F380A3100A925BB1401001648481401004E3748140100266B0E090100E43E0E09010057610E0901009613380A0606890B380A5680
  4963C6145680BB30C6145680F63EC61456807C62C61456809630C6145680E73EC6145680EB41C61456809C31C6145680982BC6145680B43EC6140606890B380A56804963CB145680BB30CB145680F63ECB1456807C62CB1456809630CB145680E73ECB145680EB41CB1456809C31CB145680982BCB145680B43ECB145680E01
  4CB1411006553D0142100FB01441421007C03441421004E37441401004E37D41401002400D91401004E37DE1401002400E31401000B2119140100F248191401009034380A01009050380A010073100E090100C12E111456803934380A36003252E81436006814380A36004D14031456804E4C251436008D12EC1436007A12EC
  143600A012EC143600BE12EC1436006B52F5145680AD37380A56806637380A0100DF38E8140600681DFE143600004D03150600021B03140600931A031406004B3809150600EC4C0E1506009A0D380A0100224C13150100665918150100B72F18150100D92C1D150100552A22150100C51A27150100843C2C150100876303140
  10055253115010099590E090100CF120E090100822F0E0901008B53F5140100EF53F5140100C853F51401005A4D36150100904D36150100744D361521008F0A251421002E0B251456805851380A5680F012380A51807934380A56803934380A56804434380A5680DB2B380A5680990F380A56805856380A5680B043380A5680
  6814380A56804E4C25145680AD37380A56806637380A0606890B0A145680113B401556808A3A401556807E3A40152600203845152600C15B45152600EB2740152600E91848152600A34C0E092100665918152100B72F18152100552A22150100E71A4D152100843C521501008763380A010055255715010099590E090100822
  F0E0901008B53F5140100EF53F5140100C853F51421008F0A251421002E0B2514210074180E0921002739380A21002F54380A2100224C5C1553808213380A5180F61625145180641725140100A46D6A140100B53B0E0901009613380A3100804FD0143100924F611551809E0666155380336425145380A861251453808C1525
  1453804F0A25145380EE0A25145380353325145380655B25145180F938380A1100695A69151100AA596F1553808213380A51806913380A51807213380A51808E13380A5180C21625145180DF1625145180641725140100A46D6A140100B53B0E0901009613380A3100804FD0143100924F61150600A910380A0600591D8C030
  6009E10380A060028688C030600BE228C0306006F4C25140600CB5225140600DB5225141100D56472155180D33B380A0600436A25140600026F251406001E6F25145180AE06251451805904251451807D1425145180E54D25143100BA0225143100DA61251431005D1B25143100153D251401004F37DE140100750A25140100
  140B25145680190A66155680B80A66155180E44E251426009913380A2600192A0A142600CE0C7D151100505A0E091100372F0E095180FC2E380A56804D5C380A5380B01825145380C71825140100621D8C030100A6368115010090428B1501009613380A04007B0A251404001A0B25140400740A25140400130B25140400820
  B901504000664380A04009034380A0100BD63380A5680342A03140100BA3C97150100174A9C15010049685B140100490B0E09010047080E0901002C56A0150100A958A8150100350A25140100D40A25140100740A25140100130B251401007A0B901501005D0890150100820B90150100650890155180E62A03145180012B03
  1451808C1A03145180851A03145180841A031421009051091521004E37441401004C69380A0100174AB015010019080E09010049685B1401000250380A0100740A25140100130B25140100820B901501006508901501004E37441401003F55B51501007D61BA1501005A69380A0100A933380A01004F3C0E091100423DBD151
  1001923C2151100423DBD1511001923C21506000C21C7150600A614661506007906380A0600EF1FCC1506008F517D150600E033D11506007239031406006C53031406003569031406001F56E81406008551D11506009151D4150600D233D1150606890B380A56803E45D91556803B59D91556804359D91506007D33D1150600
  C40ED1150600A318D11506008733D11506009D33D11506003314661506004614661536003D09D11536007D07D11536002F07D11536003F07D11536006807D11536005407D1153600F84EDE153600A1187D1521006861E41501001264D11501001F5C661531001E34380A0100F34DE91501006960EF1501001D100E090100C90
  36615010086060E0901000633E4153100D13BF4153301E703F9153301AD00380A33013C0566153301EE00FE153301B00503163301DF0666153301430208160606890B380A56809164A21456804522A21456805E5FA2145680CA13A2140606890B380A5680A10E0D165680F2130D16568091100D160606890B380A56801F3F12
  165680285A121656805A4512165680A81812160606890B380A5680E92EFE140606890B0A145680093617165680520E171656804A0C17165680A30C17165680595217160606890BD1155680113B0E1556808A3A0E1556807E3A0E150100CA0D1C16010084680A1401000A3C0A14010052340A141100E60D1C1606003134D1150
  600773A1C1606003D0A25140600DC0A251406000E3325140600365B251401005B5403140100702A21160100D92C1D1501009A0D380A0606890B380A5680535C31155680903C311556809E3C3115568047403115568058093115010052340A1401000D38451501007568031401003A3E031426003D0A25142600DC0A25142600
  0E33251426002D5B251401007E190E0901007A560E0901002739380A0100702A2B160606890B380A5680535C57155680903C571556809E3C57155680474057155680580957150100AF25380A010079616F150100850D380A0100F658380A0600F158380A0100A954380A0600A454380A01008B36181506008636181501006E0
  A25140600690A251401000D0B25140600080B251401005433251406004F3325140100855B25140600805B251401001E5A0E090600195A0E090100C202F51401002804F51401008A040E090100A5040E0901001005251401002005251401003105380A01007D05380A0606890B380A56807A13351656809B6D35165680496335
  165680330235165680D70335165680BB3035165680D00135165680510335165680F63E351656801B02351656807C6235165680963035165680E73E35165680EB4135165680E014351656809C3135165680DC01351656805D0335165680982B35165680C101351656804203351656807A00351656804A0035165680AB1D35165
  6800A0D35165680B43E351656809F00351656806A06351656801602351656808D00351656805C0035165680BD1D351656801B0D35165680D03235160606890B380A56807A138B155680113E8B155680EF618B1556805E308B1556804A3E8B15568068628B1556807D308B155680C13E8B1556809E418B155680AA148B155680
  6F318B155680702B8B155680993E8B15568060228B155680A31D8B1556802B0D8B155680DC1D8B1556803A0D8B155680972D8B155680B52D8B155680CD218B155680CA138B155680D0328B150606890B380A568016093A16568012093A160606890B380A568011443F1656800A693F165680FC683F160606890B380A5680C20
  9C7155680E409C7155680D009C7150606890B380A5680460944165680BC0744160606890B380A5680DE07CC1556809809CC150606890B380A5680E60749165680F207491606004C2A0A140600422A0A140606890B380A56805C094E16568069094E16568020074E160600A61466150600C05AD1150606890B380A56808F3753
  165680A53753165680AE6A5316000000000000C6057A1305000100000000000000C605414458160200000000000000C60560225E160300000000000000C605A31D5E160700000000000000C6052B0D6E160B00000000000000C605315F8A161300000000000000C605CE2E90161400000000000000C605CD210100150000000
  0000000C6053A4401001500000000000000C605D032010015005020000000008618484C961615006020000000009608266E9C1617008020000000009608326E9C1619008C2000000000C6005E537A0A1B00C62000000000C6003018E3001C00D720000000008618484CA4161C00F620000000008618484C8A162000FF200000
  00008618484CAC1621000F21000000008618484CB31623002621000000008618484C961626003621000000008600CE22E70028004C21000000008600DE22E70028006221000000008600F16DE70028007421000000008100FB58BB162800FC21000000008618484CC5162E00C822000000008618484C58162F0017230000000
  08618484CCB1630004123000000008618484CD21633007C23000000008618484CDF163600D023000000008618484CF0163B002C24000000008618484C041741005724000000008618484C0C1745008324000000008618484CBB164A00B024000000008618484C151750002025000000008600726DA304510084250000000086
  00F76CA3045200A925000000008600381F1B175300B725000000008600411F21175400C825000000008600381EA304560014260000000086004D1EA304570044260000000086006C222817580052260000000086006C222E1759006D26000000008600762235175B007C260000000086009222A3045D008C260000000086008
  022A3045E00D5260000000086007863E3005F00E9260000000086007863A3045F00FC26000000008600B3203C1760001027000000008600A45FA30461007827000000008600915FA3046200D7270000000086002F63A3046300EA270000000086002F6342176400F9270000000086000F63A304660024280000000086000F63
  421767006428000000008600F863E30069007828000000008600F863421769008D28000000008600F863A3046B00A028000000008600DF6248176C00BC28000000008600DF6250176F00D728000000008600DF6257177100E528000000008600876253007200F028000000008600700B980572002529000000008600700B530
  07400302900000000860053089805740065290000000086005308530076007029000000008600CE1F5D1776007E29000000008600CE1F6317770087290000000086004311530077008F290000000086004E11160077009829000000008600CA1453007800A429000000008600B71B53007800AC29000000008600CD1B160078
  00B5290000000086002B2153007900BD29000000008600462116007900C829000000008600AD4F53007A000C2A000000008600460E68177A00702A000000008600460E72177E00A82A00000000E601460E79178000DD2A0000000086003222A3048100042B000000008600C1437F1782007034000000008600D956791785009
  03500000000E601CB2587178600EC38000000008608494FE30087004A39000000008600F0088D17870067390000000086081E2EE30088007B390000000086087D52E30088008D3900000000860095088D1788009639000000008600A6088D178900A139000000008608412E93178A00AC39000000008600DA0898178A00123A
  000000008608F5629E178B001B3A00000000860834629E178B00293A000000008608070AE7008B003C3A000000008608A60AE7008B004F3A0000000086083D0BE7008B00593A0000000086083B08E7008B00643A0000000086007B088D178B00E03A0000000081001359A3178C00443B0000000081006D2E8D179000803B000
  000008100B9308D179100083C0000000081009A318D179200903C000000008100962B8D179300543D000000008100AF088D179400C03D000000008100BE088D1795002C3E000000008100516D8D1796002C40000000008600FA0F530097006040000000008600FA0FAC1797008D40000000008600FA0F98059800CC40000000
  008600F20F53009A000041000000008600F20FAC179A00BF41000000008600F657B1179B00C7410000000086007A50B7179B00CF41000000008600EE4FBD179B00D741000000008600CA51C3179B00DF41000000008600AB51C3179B00E741000000008600F056C8179B00EF410000000086006A63E3009B000342000000008
  600D863E3009B002142000000008600C863E3009B003F42000000008600E863E3009B005D42000000008600C24F53009B007242000000008600D46EAC179B008342000000008600D46E53009C009842000000008600DA4FAC179C00B842000000008600DA4F53009D00C142000000008600651B53009D00CC42000000009600
  BC4DCE179D004843000000008600313FE300A100A043000000008600313FA304A1001044000000008600CC62DA17A200B4440000000096009A1CE217A4006D4500000000860046120100A8006F450000000086002125EB17A80090450000000086006968EB17A9008447000000008100D721F117AA00C847000000008100665
  0F117AC000048000000008100BB21F117AE004448000000008100EA21F817B0002049000000008100AC3EF817B300B0490000000081007D1EF817B600384A000000008100750B0018B900744A00000000810058080018BA00B04A0000000081005C22F117BB00DE4A0000000081009F1DF117BD000C4B0000000081008431F1
  17BF00734B000000009118864CF507C1007C4B000000009300505F0918C100874B00000000930048410F18C2009B4B0000000093003D3D1518C300A34B0000000093007F5A1D18C500A84B000000009300922C1518C700B44B00000000C6017A130500C900CC4B00000000C601436D2618CA00F84B00000000C60160225E16C
  B001A4C00000000C601A31D5E16CF003C4C00000000C6012B0D6E16D300794C00000000C601CD210100DB00914C00000000C601EB6C0100DB00A94C00000000C609C36C2D18DB00CC4C00000000860060229616DB00F44C000000008600A31D9616DD001C4D0000000086002B0DA416DF00584D000000008618484C0100E300
  7D4D00000000C6017A130500E300944D00000000C6010B6B3318E400C04D00000000C60160225E16E500E24D00000000C601A31D5E16E900044E00000000C6012B0D6E16ED00414E00000000C601CD210100F500594E00000000C601F16A0100F500714E00000000C609D86A3A18F500944E00000000860060229616F500BC4
  E000000008600A31D9616F700E44E0000000086002B0DA416F900204F000000008618484C0100FD00454F00000000E601535C0100FD005C4F00000000E6010E254018FD00C44F000000008600221B4718FE00E84F00000000E6012A253A18FF00635000000000E601460E7917FF007D5000000000E601CB2587170001975000
  0000008618484C010001019F5000000000E601535C01000101B45000000000E6010E25401801011C51000000008600221B4D180201405100000000E6012A253A180301C65100000000E601460E79170301E05100000000E601CB25871704019750000000008618484C01000501FA5100000000E601535C01000501085200000
  000E6010E25401805016552000000008600221B53180601785200000000E6012A253A180701A85200000000E601460E79170701B65200000000E601CB25871708019750000000008618484C01000901C45200000000E601535C01000901EC5200000000E6010E2540180901CC53000000008600221B59180A014C5400000000
  E6012A253A180B019750000000008618484C01000B01FD55000000008618484C5F180B016D4500000000E6017A1305000C010C5600000000E601414458160D01345700000000E60160225E160E01975700000000E601A31D5E161201BC5700000000E6012B0D6E161601FC5700000000E601315F8A161E019C5800000000E60
  1CE2E90161F013C5900000000E601CD2101002001E05900000000E6013A44010020016D4500000000E601D032010020013F5A0000000081005D6296162001775A000000008100745E1B0022018A5A0000000081000C5D01002301975A000000008618484C66182301AD5A000000008600460E05002501E45A000000008100B7
  5EDC082601A75B000000008100725EDC082701BA5B000000008100305D53002801D15B0000000081000A5DDC082801015C000000008100EB5C01002901105C000000008100126D010029013A5D000000008100621F01002901665D000000008100025F16002901825D000000008100E25E01002A019E5D0000000081003A5E1
  6002A01BC5D000000008100275E16002B016C5E000000008100115E01002C01885E000000008100D61E01002C01B35E000000008100A63001002C01E05E000000008100BF1E01002C010B5F000000008100D42F01002C01445F000000008100271E01002C0143600000000081008B1E01002C017060000000008100FE210100
  2C01F660000000008100886453002C011261000000008100EF6416002C013C61000000008100DF6416002D018C61000000008100815E16002E0148620000000081000F1F01002F01C862000000008100935D01002F017463000000008100715D05002F012064000000008100575D01003001BC64000000008100EE1E0100300
  13C65000000008100D15D01003001E865000000008100B55D050030019466000000008100435D01003101A867000000008100ED5D6F18310125680000000081004A1F010035015F68000000008100A71E010035019968000000008100631E01003501D368000000008100751F010035010D69000000008100175D0100350147
  690000000081006022010035015E69000000008100480D010035016769000000008100775F8A1635017C69000000008100046296163601A66A000000008100030D01003801AF6A000000008100CD2101003801C56A00000000E601535C01003801D36A00000000E6010E2579183801FB6A000000008600221B801839010E6B0
  0000000E6012A252D183A01486B00000000E601460E79173A01566B00000000E601CB2587173B019750000000008618484C01003C01646B00000000E601535C01003C01726B00000000E6010E2579183C019A6B000000008600221B86183D01B06B00000000E6012A252D183E010C6C00000000E601460E79173E011A6C0000
  0000E601CB2587173F019750000000008618484C01004001286C00000000E601535C01004001366C00000000E6010E25791840015E6C000000008600221B8C184101716C00000000E6012A252D184201A16C00000000E601460E79174201AF6C00000000E601CB25871743019750000000008618484C01004401BD6C0000000
  08600535C93184401F46C0000000086000E259A184501546D0000000086007B3B9A184701EC6D0000000086005A3B9A184901846E000000008600AD5A05004B01DC6E000000008600221BA1184C01316F0000000086084A13E3004D01396F000000008608AA3B53004D01446F0000000086002A2593174D01746F0000000086
  00460E79174D01D86F000000008600CB2587174E01307000000000E601535C01004F017C7000000000E6010E2579184F01FC700000000081007323A41650015471000000008600221BA8185401007200000000E6012A252D1855019750000000008618484C01005501000000000000C605535C01005501000000000000C6050
  E259A015501000000000000C6052A255E0056018872000000009600232AAF185601E472000000009118864CF50758014B73000000009608210CC31858015273000000009608ED0BC31858015973000000008618484C010058019C73000000008618484C160058016D4500000000E6017A1305005901F07300000000E6014144
  58165A017074000000008600602201005B015A7500000000E60160225E165B016D75000000008600A31D15175F017C7500000000E601A31D5E166001987700000000E6012B0D6E166401CE7900000000E601315F8A166C01E07900000000E601CE2E90166D01EC7900000000E601CD2101006E01817A00000000E6013A44010
  06E016D4500000000E601D03201006E01907A000000008100241F36056E01EA7A00000000810004625E167001247B000000008100F36EC8187401A07B000000008608D60B931776016D450000000081004925D8187601507C0000000081006725DF187701597C0000000081006725E9187901627C000000008618484C01007C
  019E7C00000000E601622301007C01CF7C0000000096002F6DF6187C01E47C0000000081002F6D05198201297D00000000960046210F198601327D0000000081004621090188014A7D000000008608986C93178901617D000000008618484C17198901767D000000008600556A1E198A01847D000000008608456A22198A019
  67D00000000E601622301008A01C07D000000008600F13D28198A01557F000000008600462109018B01607F000000008600160C93178C0148800000000086003E2301008C01F18000000000E601622301008C019750000000008618484C01008C0100000000800096208D6C30198C010881000000009100AB3137198F012C81
  0000000091002A1A3C1990016F81000000009300FB19431993018C8100000000930005324B199701D081000000009300213254199C01248200000000930061324B19A30168820000000093007A325F19A801CC8200000000930043326B19B0011C83000000009300DB194319B6019750000000008618484C0100BA016A83000
  000008618484C7519BA017A83000000008608A25C7C19BC010000000080009120EA688119BC018483000000009118864CF507BF013884000000009100C34E8819BF015084000000009100890EF507C1010000000080009120C644DE03C1010000000080009120121E8E19C2010000000080009120903B9F19C6010000000080
  0091205E53AA19C80100000000800091201456AA19CB010000000080009120314FAA19CE010000000080009120AC50AA19D10100000000800091208254AA19D40100000000800091200A55AA19D7010000000080009120F424B719DA0100000000800091200534C419DD010000000080009120A00BC419DF010000000080009
  1207112CE19E10100000000800091200715CE19E3010000000080009120E01CD919E50100000000800091209648E319E70100000000800091209048E319EC0100000000800091208F17F119F10100000000800091205111D919F40100000000800091204A0FFE19F601000000008000912009119F19FB010000000080009120
  586B9F19FD01000000008000912023180F1AFF01000000008000912017161B1A02020000000080009120C51F9F1906020000000080009120CB4D281A080200000000800091203311381A0D020000000080009120420F461A12020000000080009120EF100F1A18020000000080009120980B581A1B0200000000800091206E3
  3581A1E0200000000800091201C17641A210200000000800091200A1E751A270200000000800091205653871A2C0200000000800091200C56871A300200000000800091207A54871A340200000000800091200255871A380200000000800091207248951A3C020000000080009120F617A51A420200000000800091209461B3
  1A460200000000800091203B4ABE1A49020000000080009120473B0F1A4C0200000000800091200F16CA1A4F02C0840000000091004645D91A54021185000000009600FF4EDE0355022885000000009100121EDF1A5602B8850000000096009648EB1A590228860000000096009048F51A5D029886000000009600903BFE1A6
  00204870000000096002142051B610213870000000096001F3F051B63022287000000009600EB17051B65023187000000009600E817051B670240870000000096005E530E1B6902AC8700000000960014560E1B6B021888000000009600314F0E1B6D028488000000009600AC500E1B6F02F08800000000960082540E1B7102
  5C890000000096000A550E1B7302C889000000009600F424161B75023C8A000000009600EA691F1B7802CC8A0000000096000534281B7A02148B000000009600A00B281B7B025C8B0000000096007112FE1A7C02AC8B0000000096000715FE1A7D02FC8B000000009600E01C2E1B7E02448C0000000096008F17341B7F02000
  00000800091205C193C1B8102B08C0000000096005C19511B8E0200000000800091200019741B9902548E0000000096000019911BAF02A08F00000000960051112E1BC502E88F0000000096004A0FB21BC60234900000000096000911FE1ACB02A090000000009600586BFE1ACC020C910000000096002918C11BCD02789100
  00000096001716C91BCF02E491000000009600C51FFE1AD2025092000000009600CB4DD21BD3029C920000000096003311E01BD802F892000000009600420FE91BDB024493000000009600EF10C11BE102B093000000009600980BF91BE302FC930000000096006E33F91BE50248940000000096001C17011CE702B89400000
  00091000A1E0D1CEC02689500000000960019421A1CF0027895000000009600063F1A1CF3028895000000009600BD171A1CF6029895000000009600E0171A1CF902A8950000000096005653241CFC0214960000000096000C56241CFF0280960000000096007A54241C0203EC960000000096000255241C0503589700000000
  9600F6172D1C0803C4970000000096007248371C0B0334980000000096009461431C100380980000000096003B4A4A1C1203CC98000000009600473BC11B140338990000000096000F16521C16030000000080009120F31D5D1C1A03A8990000000096002144051B1D030000000080009120EB1D6B1C1F03389A00000000960
  019447B1C23030000000080009120B71F861C2603C89A000000009600B71F921C2903000000008000912054689C1C2C03109B000000009600143FA61C2E030000000080009120C61CAF1C3003249B000000009600C61CBE1C3603000000008000912003259F193B03949B0000000096000325FE1A3D030000000080009120FB
  240F1A3E03009C000000009600FB24C11B41030000000080009120826E9F1943036C9C000000009600826EFE1A4503000000008000912005181B1A4603D89C0000000096000518C11B4A0300000000800096208217C91C4C0300000000800091201A1E9F194F03449D0000000096001A1EFE1A5103B09D000000009100B10BD
  31C52039750000000008618484C010059039C9E000000008100F16DE7005903BC9E000000008618484C01005903E69E00000000E6017A1305005903F09E00000000E601414458165A03659F00000000E60160225E165B03779F00000000E601A31D5E165F038C9F00000000E6012B0D6E166303B19F00000000E601315F8A16
  6B03BF9F00000000E601CE2E90166C03CD9F00000000E601CD2101006D03DC9F00000000E6013A4401006D036D4500000000E601D03201006D0358A0000000008600DA0B93176D03000000000000C6057A1305006D03000000000000C605436D26186E03000000000000C60560225E166F03000000000000C605A31D5E16730
  3000000000000C605CD2101007703000000000000C605EB6C01007703000000000000C6052B0D6E167703000000000000C6057A1305007F03000000000000C6050B6B33188003000000000000C60560225E168103000000000000C605A31D5E168503000000000000C605CD2101008903000000000000C605F16A0100890300
  0000000000C6052B0D6E16890365A00000000096006631EB1C910370A00000000096001538F11C9203E7A0000000009600E820F71C9303EAA00000000096009D20FF1C9403E7A0000000009600C220071D9503EAA00000000096009D200F1D9603EEA000000000960045200F189703FEA00000000096005120171D98031DA10
  0000000960091410F1899032BA1000000009600F43E0F189A0338A1000000009118864CF5079B03ACA1000000008618484C1E1D9B03C2A100000000E6017A1305009D03DCA100000000E601414458169E03F6A100000000E60160225E169F0318A200000000E601A31D5E16A3033CA200000000E6012B0D6E16A70379A20000
  0000E601315F8A16AF0393A200000000E601CE2E9016B003ADA200000000E601CD210100B103C5A200000000E6013A440100B103DDA200000000E601D0320100B103F5A2000000008618484CEB17B10304A300000000E6017A130500B20312A300000000E60141445816B30320A300000000E60160225E16B40332A30000000
  0E601A31D5E16B80344A300000000E6012B0D6E16BC0369A300000000E601315F8A16C40377A300000000E601CE2E9016C50385A300000000E601CD210100C60392A300000000E6013A440100C6039FA300000000E601D0320100C603ACA3000000008618484C261DC603BCA3000000008618484C2D1DC703CCA300000000E6
  017A130500C803DAA300000000E60141445816C903EDA300000000E60160225E16CA03FFA300000000E601A31D5E16CE0314A400000000E6012B0D6E16D2034CA400000000E601315F8A16DA034CA400000000E601CE2E9016DB0361A400000000E601CD210100DC036EA400000000E6013A440100DC036D4500000000E601D
  0320100DC037BA4000000008618484C341DDC038BA4000000008618484C3B1DDD039BA400000000E6017A130500DE03A9A400000000E60141445816DF03BCA400000000E60160225E16E003CEA400000000E601A31D5E16E403E0A400000000E6012B0D6E16E80318A500000000E601315F8A16F00318A500000000E601CE2E
  9016F1032DA500000000E601CD210100F2033AA500000000E6013A440100F2036D4500000000E601D0320100F20347A5000000008600113E5816F20378A500000000860060220100F3036D45000000008600A31D0100F3038FA5000000008600CD210100F3036D45000000008600FC0C0100F3036D45000000008600775F010
  0F3039FA5000000008600CE2E9016F303A8A5000000008600CA130100F403D7A5000000008608DE1F6317F403DFA5000000008608E4486317F403E7A5000000008608A5225300F403F2A50000000086085E105300F403FAA50000000086085150E300F40302A6000000008608B12E421DF4030CA60000000096000638471DF4
  039750000000008118484C0100F70360A6000000009118864CF507F7030CA7000000008618484C4E1DF70354A7000000008600E52B571DF90364A7000000008600686E571DFA036EA7000000008618484C5C1DFB0393A7000000008618484C661DFF03B0A7000000009608266E711D0204D0A7000000009608326E711D0404F
  4A700000000C6005E537A0A060430A800000000C6003018E300070438A8000000009118864CF50707044CA8000000008618484C7B1D070483A800000000E601144C780015048CA8000000008618484C7B1D150480AB00000000E601966553002304A9AB00000000E601AD5A01002304B0AB00000000E6094B6163002304B8AB
  0000000081008259941D230494AC000000008600DC5501002404D8AE0000000081005C199B1D240448B1000000008100D953AB1D2A04C4B10000000081000754B41D2D0494B20000000081009A53C11D340458B30000000096001814CD1D3A043CB40000000096008E68E31D46049750000000008118484C01004A046CB4000
  0000096001814F01D4A0428B50000000096008E68E31D52049750000000008118484C0100560458B50000000096009E64021E5604B4B50000000096009764091E590430B60000000096009338131E5D0458B60000000096000A5C131E5F0480B60000000096006A38191E610490B60000000096007E38191E6204B6B6000000
  008618484C1F1E6304E4B6000000008618484C2C1E6804A4B8000000008100DA3A401E7404D4B9000000009600BB62491E75043DBA00000000E601966553007B04A9AB00000000E601AD5A01007B0466BA00000000E6094B6163007B0470BA0000000081008259531E7B044CBB000000008600DC5501007C0428BD000000008
  1005C195A1E7C04C0BF000000008100D9536A1E820420C00000000081000754731E850490C00000000081009A53731E8B04FEC0000000008618484C7F1E91040DC100000000E601144C7800920415C1000000009100C268861E92041DC10000000091006C19861E930425C10000000091000F6F861E940430C1000000009600
  7A458B1E950450C2000000009600ED0C9E1E9E04ECC20000000096008E68AD1EA30454C30000000091006A6ABD1EA80488C3000000009600080EC41EAA04D4C30000000096005629C91EAB04E1C3000000009600AF19CE1EAC04EEC3000000009600C04CD51EAD049750000000008618484C0100AE04FBC3000000008318484
  C1600AE040AC4000000008618484C0100AF0417C4000000008318484C0500AF0425C4000000008318484CDA1EB00434C4000000008318484CE11EB20444C4000000009300325AE81EB404A0C4000000008318484C9A18B60449C500000000E609AA3B5300B80454C500000000E601460E7917B804C0C500000000E601CB2587
  17B904F1C5000000008100A655F11EBA0400C6000000008100F16DE700BA0420C600000000830052120100BA0448C6000000009600D93BF61EBA04C0C6000000008600E53B001FBC041CC70000000096089B3B061FBC0424C700000000C6006631C501BC043CC70000000096006D230C1FBD048DC7000000008308CA0B9317B
  E0495C70000000083084A13E300BE049DC700000000830853130500BE04B9C7000000009100BD3B151FBF04C8C700000000960049631B1FC10468C80000000093007B66241FC404A4C800000000930051672F1FC704D0C8000000009300706B3B1FCA0427C90000000096002167471FCD0431C90000000096004167471FCF04
  3BC9000000009600FF66471FD10445C90000000096007367471FD3044FC90000000096003067471FD50459C9000000009600EF66471FD70463C90000000096006367471FD9046DC90000000096000E67471FDB0477C90000000096002006511FDD0481C90000000096003E06511FDF048BC90000000096000006511FE10495C
  90000000096005C06511FE3049FC90000000096002E06511FE504A9C9000000009600F105511FE704B3C90000000096004D06511FE904BDC90000000096000E06511FEB04C8C90000000086004E2C5B1FED0400CA000000009600582C611FED0426CA00000000860834136A1FEE0441CA0000000086083F13701FEE0460CA00
  0000008600253F6A1FEF0494CA000000008600D920771FEF04D7CA000000008600FC677D1FEF04F8CA00000000860027087D1FEF041CCB000000008100EC67831FEF0447CB000000008600BF6B5B1FF00460CB00000000860030085B1FF004A0CB000000008100976B881FF004CCCB000000008600B06E901FF204FCCB00000
  00086004D53961FF20458CC0000000086004F63961FF304B8CC000000008600FF55961FF40414CD000000008600F754961FF50470CD000000008600223E961FF604CCCD0000000086006F54961FF70428CE00000000860011179F1FF80408CF0000000086006948A81FF90464CF0000000086000A42AF1FFA04C8CF00000000
  8600FE3EAF1FFB042CD0000000008600B017AF1FFC0490D0000000008600D017AF1FFD04F4D00000000086002911901FFE0424D100000000860061123A18FE0468D10000000086004A0FC501FE04C0D1000000008100562BB81FFE041BD2000000008600910BBD1FFF0448D2000000008600E70F901FFF047CD200000000860
  05A33BD1FFF04A4D2000000008600A7576A1FFF04D8D2000000008600D108C31FFF0450D300000000860019526A1F00051CD40000000086007208C31F0005ABD4000000008600E8623A180105B4D400000000860029623A1801050CD5000000008600394F6A1F010540D5000000008600E408C31F0105C0D50000000086003A
  3B3A1802052AD6000000008600CE1D3A1802053CD60000000086002144AF1F0205DCD600000000860009113A18030570D70000000086002918A81F0305ECD7000000008100D7625300040528D80000000086084B59BD1F040558D8000000008608D731BD1F040588D80000000086083D0BBD1F0405C8D80000000086083B08B
  D1F040508D90000000086086C0B5300040530D90000000086084F085300040558D900000000860081526A1F0405A4D9000000008600A908C31F040534DA000000008600642CCA1F0505D4DA0000000086003016D11F06057CDC0000000086000852A81F090538DD000000008308BA1453000A0553DD0000000086001F4A961F
  0A055CDD0000000086003B39E3000B0580DD0000000086001716DA1F0B05FCDD00000000E1012919E21F0D05B8E100000000E1014E5505201C05E8E100000000E101DB6B11202005A0E30000000086002125341D2205E1E300000000860021253B1D2305FCE30000000081001925EB17240518E400000000E101256C1A20250
  548E50000000086008C1CBD1F2605C4E50000000086002C4A3A18260544E6000000008600CB593A182605FCE60000000093000A39A103260528E7000000009300AC44F50726058CE7000000009300C944B4032605B4E7000000009118864CF5072605E1E9000000008318484C16002605F0E9000000008618484C01002705F9
  E9000000008318484C0500270507EA000000008318484CDA1E280516EA000000009300325A21202A054CEA000000008318484C9A182C05A1EA00000000E609AA3B53002E05ACEA00000000E601460E79172E0514EB00000000E601CB2587172F0544EB0000000083005212010030056CEB000000009600D93B2A203005E0EB0
  00000008600E53B001F32053CEC0000000096089B3B3420320544EC00000000C6006631C50132055CEC0000000096006D233A203305A8EC000000008308CA0B93173405B0EC0000000083084A13E3003405B8EC000000008308531305003405B9C7000000009100BD3B151F3505D8EC00000000960049634320370530ED0000
  0000930082674C203A0578ED000000009300846B58203D05BDED000000009600216764204005D2ED000000009600416764204205E7ED000000009600FF6664204405FCED00000000960073676420460511EE00000000960030676420480526EE000000009600EF6664204A053BEE000000009600636764204C0550EE0000000
  096000E6764204E0565EE00000000960020066E2050057AEE0000000096003E066E2052058FEE00000000960000066E205405A4EE0000000096005C066E205605B9EE0000000096002E066E205805CEEE000000009600F1056E205A05E3EE0000000096004D066E205C05F8EE0000000096000E066E205E0510EF0000000086
  004E2C5B1F600548EF000000009600582C782060056EEF00000000860834136A1F610589EF0000000086083F13701F6105A8EF000000008600253F6A1F6205DCEF000000008600D920771F62051FF0000000008600AC1F2D1862054BF0000000008600FC677D1F62056CF000000000860027087D1F620590F0000000008100E
  C67831F6205B6F0000000008600BF6B5B1F6305D0F000000000860030085B1F630510F1000000008100976B881F630538F1000000008600B06E901F650566F1000000008600DE1C901F65058CF1000000008600566B2D186505B8F10000000086004D538120650510F2000000008600F2248A2066052CF30000000086004F63
  8120680588F3000000008600FF5581206905E4F30000000086002F4F81206A053CF4000000008600AA5081206B0594F4000000008600223E81206C05F0F40000000086006F5481206D054CF5000000008600F75481206E05A4F5000000008600111794206F0590F600000000860069489D2070050CF70000000086003A3B2D1
  8710538F70000000086000A42A420710594F7000000008600FE3EA4207205F0F7000000008600B017A42073054CF8000000008600D017A4207405A8F80000000086002911901F7505D8F800000000860061122D1875051CF90000000086004A0FC50175056CF9000000008100562B53007505ADF9000000008600910BBD1F75
  05D4F900000000860005152D1875051CFA000000008600E70F901F750550FA000000008600742E901F7505C2FA0000000086005A33BD1F7505E4FA000000008600A7576A1F750518FB000000008600D108AD207505A4FB00000000860019526A1F760570FC0000000086007208AD20760500FD000000008600E8622D1877053
  8FD00000000860029622D18770580FD000000008100D76253007705BCFD000000008608FF09BD1F7705ECFD0000000086089E0ABD1F77051CFE0000000086083D0BBD1F77055CFE0000000086083B08BD1F77059CFE0000000086086C0B53007705C4FE0000000086084F0853007705ECFE0000000086006F122D1877055CFF
  000000008600322E2D187705BCFF0000000086000C2E6A1F770508000100000086008508AD207705B000010000008600394F6A1F7805E400010000008600E408AD2078057001010000008600CE1D2D1879058401010000008600642CCA1F790524020100000086003016B4207A05540301000000860008529D207D050404010
  00000860009112D187E0590040100000086002144A4207E052C0501000000860029189D207F05A0050100000086003B39E3008005C2050100000086001F4A81208005CC0501000000E1012919E21F81057D0601000000E1014E550520900590060100000081005017E7009405C00601000000E101DB6B112094058007010000
  0086002125261D9605C10701000000860021252D1D9705DC070100000081001925EB179805F80701000000E101256C1A2099059C080100000086001716BD209A051109010000009300AC44F5079C051809010000009118864CF5079C05000000000000C6055C19E21F9C05000000000000C60581550520AB05000000000000C
  605606C1120AF05000000000000C605586C1A20B105100B010000008618484CC520B205600B0100000096089B3BB403BA05640B010000009118864CF507BA05037A0100000096001814D120BA050C7A0100000096008E68D720BA055B7A010000009600B158861EC105687A010000009600A655E820C2059750000000008618
  484C0100C305927A010000008618484CEE20C305AC7A010000009118864CF507C605107B010000009600005AF520C605687B010000008618484C341DC805777B01000000E6017A130500C905897B01000000E601436D2618CA05987B01000000E60160225E16CB05D87B01000000E601A31D5E16CF05597C01000000E601CD2
  10100D305667C01000000E601EB6C0100D305747C010000009600B564F520D305E47C010000009100CA18FD20D5055C7D010000009100B318FD20D605B07D0100000096000F5A0421D705D57D010000008618484C0D21D805F47D0100000096007A451521DB05A87E010000009600ED0C2421E205287F0100000091005F192F
  21E505787F010000009100293B3F21ED05A47F0100000096008E684921F105D07F010000009100216A5521F5059750000000008618484C0100FA0533800100000096081E2FA103FA056480010000009600E1186221FA05BD80010000009600E26D7021FC05CC80010000009600F92B7021FD050781010000008618484C0100F
  E05148101000000C4005C130500FE053881010000009300C210861EFF054C8101000000C400E92D7C210006DE81010000008618484C01000606EB8101000000C4005C1305000606108201000000C4004F625E1607066E82010000009300DF1095000B068D82010000009300CE1095000C06AC82010000009100F33786210D06
  CC8201000000C400D91453000F06D08201000000C400E92D7C210F062883010000008618484C1B0015067C8301000000E6017A1305001606CC8301000000E601414458161706C58401000000E60160225E161806F68401000000E601A31D5E161C06308501000000E6012B0D6E162006F78501000000E601315F8A162806128
  601000000E601CE2E90162906298601000000E601CD2101002A06338601000000E6013A4401002A064B8601000000E601D03201002A065886010000008100232A8C212A06B88E010000008100B13993212B06198F010000008100DD4301002C06278F0100000081002F4593212C066D4500000000C4015C1305002D06418F01
  000000C4014F625E162E06000000000000C405E92D7C2132066C8F01000000930062119A213806B98F010000009300C22595003C06CE8F01000000810055108C213D06F78F0100000081005510AA213E0628900100000081005510B421400674900100000081006631C1214306E59001000000C401D91453004406E89001000
  0009100E361C8214406F4900100000091000E1ACD214506EF920100000096001F1AD62149069750000000008618484C01004E062D93010000008618484CE0214E066D4500000000E6017A13050051066C9301000000E601414458165206A89301000000E60160225E165306459401000000E601A31D5E165706639401000000
  E6012B0D6E165B06989401000000E601315F8A1663061C9501000000E601CE2E90166406749501000000E601CD2101006506D49501000000E6013A44010065066D4500000000E601D032010065067696010000008100275F010065069E96010000008100D73205096506D496010000008100344501006606249701000000810
  09F630509660634970100000081005D625E1667060098010000008100C44558166B065A98010000008618484CE9216C068E98010000008600460EF2216E06D098010000008100C50C58167006CD9A0100000081000447F9217106FC9A0100000081001246F9217406389B0100000081007B46F92177067C9B0100000081001F
  4702227A06BC9B010000008100324602227B06FC9B010000008100BA4602227C063C9C010000008100DC4602227D067B9C010000008100D04502227E06989C0100000081005746F9217F06D49C010000008100EF45F9218206109D0100000081009846F9218506BC9D0100000081002063F92188060C9E0100000081004163F
  9218B065C9E0100000081005A0DF9218E06E49E010000008100FD2DF9219106409F010000008100795709229406789F0100000081008B2DF9219806D49F0100000081008E5709229B060CA0010000008100A72DF9219F0668A0010000008100842B0922A206A0A2010000008100B9451322A606CCA2010000008100A9451F22
  A90616A30100000081008D022A22AC0626A3010000008100F81B3122AD0638A30100000081003E1C3822AE0668A30100000081002B2AAF00AF0694A301000000810065514322AF06F8A3010000008100F91F4C22B10698A4010000009100E4555822B406DAA4010000008618484C6122B6066D4500000000E6017A130500B80
  6F8A401000000E60141445816B90694A501000000E60160225E16BA06F6A501000000E601A31D5E16BE0620A601000000E6012B0D6E16C20674A601000000E601315F8A16CA062CA701000000E601CE2E9016CB06B0A701000000E601CD210100CC06E8A701000000E6013A440100CC066D4500000000E601D0320100CC06C0
  A80100000081005D625E16CC06F8A9010000008618484C6922D00653AA010000008600460EF221D2068CAA010000008100B3655816D4065CAB01000000810005681600D506B8AB010000008100AA660100D6063CAC01000000810093670100D606B4AC01000000810014680100D60630AD010000008100BE660100D6067CAD0
  10000008100BA670100D606C8AD010000008100D0670100D606F4AD010000008100D7660100D606A4AE01000000810085660100D606F4B0010000008100A4670100D6063CB10100000081009C660500D606CFB1010000008100054E0100D706EEB10100000081084B617222D706F6B10100000081086333E300D706FEB10100
  000081083F0E5300D7060EB20100000081001355AC17D70630B201000000810016557622D80688B201000000810071455300D906CCB201000000810021557622D906FEB20100000081006E4B5300DA0624B3010000008100031CE700DA06E0B3010000008100131C7B22DA061FB40100000081008D6D5300DA062CB40100000
  081008914DC08DA068FB4010000008100B73D8322DB06ACB4010000008100A83DAA09DC0630B5010000008100A83D1B00DD06ECB5010000008100B73DDC08DE0636B601000000810070645300DF069750000000008318484C0100DF0661B6010000009308A4488822DF068DB60100000093080123B300DF0694B60100000093
  080D238E22DF069CB60100000093086F1AD403E006B2B6010000009308510BD403E006C8B60100000093082D17D403E006DEB60100000093084416D403E006F4B6010000009308FB13D403E0060AB70100000093082B57D403E00620B7010000009308B332D403E00636B7010000009308B357D403E0064CB70100000093089
  916D403E00662B7010000009308004BD403E00678B70100000093088845D403E0068EB7010000009308CD41D403E006A4B7010000009308AC56D403E006BAB7010000009308E84AD403E006D0B7010000009308D14AD403E006E6B7010000009308D711D403E006FCB7010000009308A811D403E00612B80100000093082612
  D403E00628B80100000093086F11D403E0063EB80100000093086F0ED403E00654B80100000093085157D403E0066AB80100000093081151D403E00680B8010000009308B82CD403E00696B80100000093089D2CD403E006ACB80100000093080A53D403E006C2B80100000093082C53D403E006D8B80100000093088E11D40
  3E006EEB80100000093085E20D403E00604B9010000009308531AD403E0061AB90100000093082B6AD403E00630B9010000009308793ED403E00646B90100000093089A62D403E0065CB9010000009308F144D403E00672B9010000009308A62BD403E00688B9010000009308AE6DD403E0069EB9010000009308522ED403E0
  06B4B90100000093089421D403E006CAB90100000093082C15D403E006E0B90100000093085215D403E006F6B90100000093080D62D403E0060CBA010000009308D22DD403E00622BA010000009308633ED403E00638BA010000009308952ED403E0064EBA0100000093080B45D403E00664BA0100000093087D2ED403E0067
  ABA010000009308FA43D403E00690BA0100000093080220D403E006A6BA010000009308E443D403E006BCBA0100000093082258D403E006D2BA010000009308D657D403E006E8BA010000009308A80ED403E006FEBA010000009308CF68D403E00614BB0100000093084310D403E0062ABB0100000093088210D403E00640BB
  0100000093080512D403E00656BB0100000093086D58D403E0066CBB010000009308682DD403E00682BB0100000093084358D403E00698BB010000009308452DD403E006AEBB0100000093080058D403E006C4BB0100000093082A2DD403E006DABB010000009308BF50D403E006F0BB010000009308C66ED403E00606BC010
  000009308DF50D403E0061CBC0100000093087516D403E00632BC0100000093089C32D403E00648BC010000009308750CD403E0065EBC010000009308AF1AD403E00674BC010000009308B639D403E0068ABC010000009308143AD403E006A0BC010000009308D339D403E006B6BC010000009308F739D403E006CCBC010000
  009308072CD403E006E2BC0100000093087449D403E006F8BC010000009308A039D403E0060EBD0100000093088B03D403E00624BD0100000093082765D403E0063ABD0100000093083E3FD403E00650BD010000009308A909D403E00666BD0100000093088F3DD403E0067CBD0100000093081C11D403E00692BD010000009
  3085339D403E0069750000000008318484C0100E006A8BD010000009308A4488822E006D4BD0100000093080123B300E006DBBD0100000093080D238E22E006E3BD0100000093080E0ED403E106F9BD010000009308F732D403E1060FBE0100000093080631D403E10625BE0100000093084048D403E1063BBE010000009308
  1565D403E10651BE0100000093086265D403E10667BE0100000093089C13D403E1067DBE0100000093085465D403E10693BE0100000093084365D403E106A9BE010000009308E031D403E106BFBE010000009308BA52D403E106D5BE010000009308F331D403E106EBBE010000008618484C9522E10601BF010000008618484
  C9C22E20618BF01000000860025311B00E40620C1010000008618484C1B00E50638C1010000008618484CA322E60689C1010000008618484C0100E706B4C1010000008600FD3CA822E70650C201000000860008590100E80670C2010000008600535C9C22E806EEC2010000009608266EB122EA0607C3010000009608326EB1
  22EC0614C3010000009608653DB122EE0654C3010000009608743DB122F0065DC3010000009608C237B122F20669C3010000009608D837B122F40678C3010000008600EB37BB22F606ABC30100000086004F640100F806C9C301000000860059645300F806DEC30100000086001E39C222F806F8C3010000009600954CC622F
  80658C7010000008600954CCF22FB06B4C7010000008600954C0509FC06BCC80100000086002C5C0100FD0680C9010000008600762CD622FD06DCC9010000008600762CDE22FF062ECA01000000860051115300020739CA010000008600415C5300020744CA010000008600CA6BE622020758CA01000000C6006631C5010307
  C4CA0100000086008737ED220307E8CA010000008600C1330509030724CB0100000086006D56F3220407B8CB0100000086006D56FB22070774CC010000008600355603230A0754CD0100000086004A560B230D07F0CD010000008600286013230F077CCE010000008600056021231207E8CE010000008600281B2D23150738C
  F0100000086003B143D231A0750D0010000008600196046231D07B0D0010000008600C3695323200700D101000000860070275323230750D10100000086002A145B232607C9D2010000008600F35F62232807F0D2010000008600616B01002B07D4D401000000C6005E537A0A2B0728D501000000C6003018E3002C07C8D501
  0000008418484C3F0B2C07D2D5010000008618484C490B2E07DCD5010000008618484C1B003007E5D5010000008618484C01003107F0D501000000930011216C23310748D601000000930028457723340778D6010000009118864CF50737074CDD010000009600441A8023370794DD010000008618484C01003807BCDD01000
  0008600535C8523380740E2010000008600940692233B07ACE3010000009118864CF5073B07B8E3010000009600606498233B07DCE3010000008600C15C9E233B072BE4010000008600832CAA233D075BE40100000086001E39B3233E077CE4010000008600D94CB9233E0738E5010000008600D32A9E233F07F4E601000000
  8100435CC023410727E70100000096089B3B9823410730E70100000096006D23C6234107FAE7010000009608266ECF2342072AE8010000009608326ECF2344075AE8010000009608743DCF2346078AE8010000009608653DCF234807BAE8010000009608D837CF234A07EAE8010000009608C237CF234C071AE901000000E60
  13044DB234E074CE90100000086003044E0234F07A4E901000000C6005E537A0A5007ECE901000000C6003018E300510728EA01000000C6006631C501510743EA01000000E609AA3B5300510754EA01000000E601460E79175107F0EA01000000E601CB25871752076D45000000009118864CF5075307000000000300861848
  4CE7235307000000000300C601561B01005507000000000300C601511BED235507000000000300C601471BF72357070000000003008618484CE7235807000000000300C601561BFE235A07000000000300C601511B0D246007000000000300C601471B222468070000000003008618484CE7236A07000000000300C601561B2
  D246C07000000000300C601511B35246E07000000000300C601471BF723720767EB010000008618484C432473079750000000008118484C0100760795EB010000009600F30D4C2476079CEB010000008600A96B5224760708EC010000008600A83A5B24770793EC0100000086008A34AF007A079BEC01000000860074606624
  7A07A3EC010000009118864CF5077A07AFEC010000008618484C6C247A07EFEC010000008618484CA416810720ED010000008618484C7924850748ED0100000086009F658224880755ED010000008608BA6E5300880768ED010000008600AE64882488079CED010000008600CA3A92248A07D1ED010000008600BC589E248E0
  7F5ED0100000086000E6EC2228E079750000000008618484C01008E0700EE010000008618484CA4248E0780EE0100000086003E38AD24910793EE010000008600E95BAD249107A8EE0100000086002C38B1249107F4EE010000008600D25BB12493073EEF0100000086008A34AF00950748EF010000008618484CB724950794
  EF010000008618484CA4169A07BCEF010000009100216AC2249E071DF0010000008600516D2D18A2073CF0010000008600DB6CCC24A2078AF0010000008618484CD424A407B2F00100000086009F65DB24A707BFF0010000008608BA6E5300A707D0F0010000008600AE64E124A70770F1010000008600CA3AEC24AA071CF20
  1000000860096390100AF0735F201000000860060375300AF0746F201000000860074375300AF0756F2010000008618484C0500AF076D4500000000E1014F230100B00770F201000000E10196655300B007FCF401000000E109EA606300B00704F501000000E1018E5A0100B007FCF401000000E1092C616300B0070CF50100
  0000E101B14BF924B007A3F501000000E101F54B7800B007000001009713000001000C2100000100D31800000200BD18000003001E6F000004003B3D00000100D31800000200BD18000003001E6F000004003B3D00000100B70100000200AC0100000300400200000400130200000500300300000600250300000700E403000
  00800AB03000001000C21000001000C21000001009C0A000002003B0B00000100240200000200B40300000100240200000200B403000001008B36000001009C0A000002003B0B00000300870B000004006A0800000100062100000100D75A000002002D2700000100B35A00000200CA5A000003000C2100000100994A000002
  00A44A000001002357000002005D5000000300A54F00000400B65100000500975100000600CF56000001003C45000001000C21000001002357000002005D5000000300A54F00000100A25800000200915000000300035000000100A25800000200915000000300035000000400F55100000500E15100000100A258000002009
  15000000300035000000400F55100000500E15100000600E656000001002357000002005D5000000300A54F00000400CF56000001002357000002005D5000000300A54F00000400B651000005009751000001002357000002005D5000000300A54F00000400B65100000500975100000600CF56000001003C45000001005C6D
  00000100081F00000100081F00000100081F00000200395900000100081F00000100081F00000100542200000100081F000002005422000001005422000002009B2C00000100081F00000100081F00000100081F000001006E5F00000100542200000100542200000100542200000100081F000002005422000001005422000
  00100081F00000200542200000100081F00000200542200000100542200000100081F000002005422000003008062000001005422000002008062000001008062000001000F6500000200C264000001000F6500000200C26400000100081F000001001511000001003D2B000001003D2B00000100244D000002003C40000003
  00573F000004001A6B00000100244D000002001A6B00000100244D000001001B2200000100244D00000200FB5200000300EB5200000100244D00000100E86800000100476D00000100F72D00000100F72D000001009362000001001744000001009A3200000200E35A00000300F55A000004001764000001005422000001006
  422000001006422000001006422000001000463000001000463000001001D1F00000100542200000100081F00000200542200000100542200000100081F00000100081F00000100290A00000200C80A00000300830A00000400220B00000100081F00000100436A00000200026F000001002A0A00000200C90A00000300840A
  00000400230B000001004F37000001004F3700000100B722000002004F3700000100901F000002004F3700000100B722000002004F3700000100B722000002004F3700000300B85F00000100901F000002004F3700000300B85F00000100901F000002004F3700000300B85F000001005A63000001005A63000001005A63000
  002004F37000001005A63000002004F37000001005A63000002004F37000001005068000001005068000001003D2B00000200D42C000001003D2B00000200D42C000001003D2B00000200D42C000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F000003
  001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB0300000100436A00000200026F00000100436A00000200026F000001003A02000002003D0200000300DE0300000400E103000001009713000001000C2100000100D31800000200B
  D18000003001E6F000004003B3D00000100D31800000200BD18000003001E6F000004003B3D00000100B70100000200AC0100000300400200000400130200000500300300000600250300000700E40300000800AB0300000100D31800000200BD1800000100D31800000200BD1800000100B70100000200AC01000003003003
  000004002503000001009A3200000100384500000100244D00000100E868000001009A3200000100384500000100244D00000100E868000001009A3200000100384500000100244D00000100E868000001009A3200000100384500000100184A000001009713000001000C2100000100436A00000200026F000003001E6F000
  004003B3D00000100436A00000200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C2100000100436A00000200026F00000100631D00000100A647000002004F37000001009713000001
  001F5F000001001F5F000001001F5F00000100DC6E00000100DC6E00000100DC6E00000100DC6E00000100DC6E00000100DC6E000001009E45000001009E45000001009E4700000200814500000300465500000400E23C000001000C2100000100436A00000200026F000001009A3200000100384500000100244D00000100E
  868000001009A3200000100384500000100244D00000100E868000001009A3200000100384500000100244D00000100E868000001005352000001009A32000002009713000001009A32000002009713000001009A3200000200971300000100971300000100384500000100244D00000100E868000001009A3200000100300A
  00000200CF0A000003008A0A00000400290B00000100384500000100CE1300000100E82400000200B34D00000100FF07000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D000001005A6300000100436A00000200026F000003001E6F000004003B3D000001003A02000002003D02000
  00300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C21000001002869000002001C6900000100436A00000200026F000003001E6F000004003B3D00000100FC6400000200A81400000100BC2500000100103D00000200A04400000100100200000200A803000003
  00A044000001002357000002005D5000000300A54F00000400CF5600000500982C02000600B16C000001002357000002005D5000000300A54F00000400CF5600000100632100000200982C00000100632100000100BA0C000001004A4400000100632100000100C76400000200660D00000300176400000100181D000001003
  C1A00000200F21900000300D01900000100071D00000200081D00000300F21900000400D01900000100071D00000200081D00000300F21900000400D01900000500EC0100000100071D00000200081D00000300F21900000400D01900000500EC0100000600730300000700740300000100071D00000200081D00000300F219
  00000400D01900000500EC0100000100071D00000200081D00000300F21900000400D01900000500F20100000600F301000007006D0300000800450400000100071D00000200081D00000300F21900000400D01900000500EC01000006006D03000001008B20000002008C2000000300F21900000400D019000001003D18000
  002003C1A00000100251D00000200C01C000003004B5200000100C24A00000200925C01000100DD4400000100681801000200F801010003007903030004002E4B010001009A32030002002E4B01000100F80101000200790302200300BA5C01000100F80101000200790302200300BA5C01000100F801010002007903022003
  00BA5C01000100F80101000200790302200300BA5C01000100F80101000200790302200300BA5C01000100F80101000200790302200300BA5C01000100F80101000200790301000300076A010001009A3202000200BA5C010001009A3202000200BA5C010001009A3202000200BA5C010001009A3202000200BA5C010001009
  A3202200200BA5C010001009A32010002009817010003000717012004002552030005002E4B010001009A32010002009817010003000717010004000111030005002E4B01000100F80101000200790302000300BA5C010001009A3202200200BA5C010001009A3202000200BC2502000300020202000400830302000500C26D
  010001009A32030002002E4B010001009A32030002002E4B010001009A32010002000717030003002E4B010001009A3201000200071701000300672B030004002E4B010001009A32030002002E4B010001009A3202000200300A02000300CF0A020004008A0A02000500290B010001009A3201000200016E010003002036022
  00400BA5C022005007B21010001009A3201000200016E02000300BC2502000400020202000500830302000600C26D010001009A3201000200016E030003002E4B010001009A3201000200BD5502000300BA5C010001009A3201000200BD5502000300BA5C01000100F80101000200790301000300BD55010004000717010005
  00672B02000600BA5C00000100681801000200F80101000300790301000400016E030005002E4B01000100F80101000200790301000300016E02200400BA5C01000100F80101000200790301000300016E02200400BA5C01000100F80101000200790301000300016E02200400BA5C01000100F801010002007903010003000
  16E02200400BA5C010001009A3201000200BD55010003009817010004000717012005002552030006002E4B010001009A3201000200BD55010003000717030004002E4B010001009A3201000200016E02000300BA5C010001009A3201000200016E02000300BA5C010001009A3201000200016E030003002E4B010001009A32
  01000200BD5501000300071701000400672B030005002E4B000001003D1800000100DD4400000100681800000200F801000003007903000001009A32000002009817000003000717000004002552000001009A32000002009817000003000717000001009A3200000100F80100000200790300000100F801000002007903000
  00100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000100F80100000200790300000300076A00000100F801000002007903000001
  009A32000001009A32000001009A32000001009A32000001009A3200000100F801000002007903010001009A32010002001F0A01000300BE0A01000400163301000500435B01000600970A01000700360B01000800D258010009008B5401000A00050F01000B00D60E01000C005A0F02200D00FD12000001009A32000002001
  F0A00000300BE0A00000400163300000500435B00000600970A00000700360B000008001F0F00000900320F00000A008F0F02000B00FD12010001009A3201000200016E01000300973401000400A634010005005035010006005F3501000700163301000800435B01000900970A01000A00360B01000B00D25801000C008B54
  01000D00966801000E00AC6801000F00143C010010002A3C01001100C93401001200B534010013001D35010014008235010015006E3501001600D635000001009A3200000200016E00000300973400000400A634000005005035000006005F3500000700163300000800435B00000900970A00000A00360B00000B009668000
  00C00AC6800000D00143C00000E002A3C00000F00E83400001000083500001100333500001200A13500001300C13500001400EC3500001500DC58000016009854000001009A32000001009A3202000200BC2502000300020202000400830302000500C26D000001009A32000001009A32000001009A32000002000717000001
  009A3200000200071700000300672B000001009A32000001009A3202000200300A02000300CF0A020004008A0A02000500290B000001009A3200000200016E000003002036000001009A3200000200016E02000300BC2502000400020202000500830302000600C26D000001009A3200000200016E000001009A3200000200B
  D55000001009A3200000200BD5500000100F80100000200790300000300BD5500000400071700000500672B00000100681800000200F80100000300790300000400016E00000100F80100000200790300000300016E00000100F80100000200790300000300016E00000100F80100000200790300000300016E00000100F801
  00000200790300000300016E00000100F80100000200790300000300016E00000100F80100000200790300000300016E00000100F80100000200790300000300016E00000100F80100000200790300000300016E000001009A3200000200BD55000003000717000001009A3200000200BD55000003009817000004000717000
  005002552000001009A3200000200016E000001009A3200000200016E000001009A3200000200016E000001009A3200000200BD5500000300071700000400672B01000100F801010002007903030003002E4B00000100F80100000200790301000100F80101000200790301000300BD55030004002E4B00000100F801000002
  00790300000300BD55010001009A3201000200016E03000300B421000001009A3200000200016E00000300B42103000100B421000002003A0300000100B421000002003A03010001009A3201000200016E010003005F1B010004004A35010005000336030006002E4B000001009A3200000200016E000003005F1B000004004
  A35000005000336010001009A32030002002E4B000001009A32010001009A3201000200016E030003002E4B000001009A3200000200016E010001009A32030002002E4B000001009A32010001009A3201000200630C010003000111030004002E4B000001009A3200000200630C01000100240201000200B403010003002545
  010001009A32030002002E4B000001009A32000001009A3200000200A05800000300F35100000400DF51000005008F50000006000150000007000757000001009713000001000C2100000100D31800000200BD18000003001E6F000004003B3D00000100D31800000200BD18000003001E6F000004003B3D00000100B701000
  00200AC0100000300400200000400130200000500300300000600250300000700E40300000800AB03000001000C21000001000C21000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F000003001E6F000004003B3D000001003A02000002003D02000003
  00400200000400130200000500DE0300000600E10300000700E40300000800AB03000001009713000001000C2100000100D31800000200BD18000003001E6F000004003B3D00000100D31800000200BD18000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E
  10300000700E40300000800AB03000001000C21000001007365000001000C21000001000C21000001000C21000001000C21000001000C21000001000C21000001000C21000001000C2100000100FC01000002007D03000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A
  00000200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C21000001004F37000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A000
  00200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C21000001004F37000001004F37000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D000001
  00436A00000200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C21000001004F37000001004F37000001009713000001000C2100000100D31800000200BD18000003001E6F000004003
  B3D00000100D31800000200BD18000003001E6F000004003B3D00000100B70100000200AC0100000300400200000400130200000500300300000600250300000700E40300000800AB03000001000C21000001000C21000001000C21000001000C2100000100766E00000200E66800000300403C000001008F1D000002004B4D
  00000100913400000100913400000100131B00000200A21A00000300A219000004009C0D00000100603800000200A219000003009C0D00000100BA0C00000200D00C00000100BA0C00000200D00C000001008B36000001007C36000002005A1100000300B659000004002359000005009713000006000D0A00000700AC0A000
  008002133000009004F5B00000A009D6A00000B008F1D00000C00796500000D00814800000E00186F000001007559000002005A1100000300B65900000400235900000500971300000600450A00000700E40A000008002133000009004F5B00000A00C73800000B008F1D00000C00796500000D00814800000E00046F000001
  00E53A00000100E53A00000200F02B02000300F30E02000400AA0F020005007B0F02000600121300000100E53A00000200F02B00000300245400000100E53A00000200F02B00000300245400000400B31200000500652F000006002B33000007005A5B00000100E53A00000200F02B00000300245400000400B312000005002
  B33000006005A5B00000100EA59000002006E0A000003000D0B000004008A0A00000500290B000006006D0000000700980100000800110300000900380400000A001A6E00000B00901800000C008148000001008B3602000200010E02000300305102000400AF0D00000100DA59000002006D00000003009801000004001103
  000005003804000006001A6E000007009018000008008148000001008B3602000200010E02000300305102000400AF0D00000100634800000200436A00000300026F00000100634800000200A66402000300426A020004004E6B00000100A33800000200913400000100A33800000200913400000100A33800000100A338000
  00100603800000200FB5B00000300A21900000400BB1900000500CE4C00000100755900000200450A00000300E40A000004002133000005004F5B00000600405400000700814800000800831800000900323900000A00911900000B00186F00000C00161800000100353B00000100450A00000200E40A000003002133000004
  004F5B00000500436A00000600026F00000100033B00000100033B00000200F02B02000300F30E02000400AA0F020005007B0F02000600121300000100033B00000200F02B00000300245400000100033B00000200F02B000003002454000004004F54000005002B33000006005A5B00000100033B00000200F02B000003002
  454000004004F54000005002B33000006005A5B00000100244C00000100EF5400000100EF5400000100EF5400000100A56D000002006E0A000003000D0B000004008A0A00000500290B000006001A6E00000700873400000800EF5400000900814800000100376B000002001A6E00000300873400000400EF54000005008148
  000001008B3602000200010E02000300305102000400B55B02000500F41800000100A338000002005151000001008B36000001008B36000001008B36000001008B3600000100A43B000001009713000001003C45000002009713000001003C45000002009713000001009A32000002009713000001009A32000002009713000
  00100244D00000100E86800000100FD3B000002009713000000000000000001003959000001003D2B00000100DF5F000002003E1D00000100D31800000200BD18000003009713000001000C21000002007066000003009713000001000C21000002007066000003009713000001000C2100000200CB6A000003009713000001
  005D66000002009713000001004D6600000200971300000100DD6500000200971300000100096600000200971300000100386600000200971300000100C36500000200971300000100F265000002009713000001001B6600000200971300000100A56C00000200971300000100FB61000002009713000001006F30000002009
  71300000100583E00000200971300000100796200000200971300000100933000000200971300000100D43E00000200971300000100B741000002009713000001009151000001003D2B000001001A08000001004A0B00000200480800000100B84800000100B84800000100B84800000100B84800000100B84800000100B848
  00000100B84800000100981700000100B84800000100B84800000100B84800000100B84800000100203600000100174400000100174400000100174400000100B84800000100071700000100174400000100FE2000000100981700000200071700000300672B00000100981700000100B84800000100071700000200672B000
  001002613000002001F0A00000300BE0A00000400163300000500435B00000600970A00000700360B00000800D258000009008B5400000A00320F00000B008F0F02000C00E50E02000D006B0F02000E00FD1202000F00AE5302000100300A02000200CF0A020003008A0A02000400290B00000100981702000200652F000001
  004F37000001004F37000001004F3700000100981700000100A43B000001009713000001003C45000002009713000001009A32000002009713000001009A3200000200971300000100244D00000100E86800000100FD3B000002009713000000000000000001003959000001003D2B00000100DF5F000002003E1D000001004
  36A00000200026F000003009713000001000C21000002004D68000003009713000001000C2100000200D46B000003009713000001005D66000002009713000001004D6600000200971300000100DD6500000200971300000100096600000200971300000100386600000200971300000100C36500000200971300000100F265
  000002009713000001001B6600000200971300000100A56C00000200971300000100FB61000002009713000001006F3000000200971300000100583E00000200971300000100796200000200971300000100933000000200971300000100D43E00000200971300000100B741000002009713000001009151000001003D2B000
  001001A08000001004A0B00000200480800000100B84800000100B84800000200076A00000100B84800000100B84800000100B84800000100B84800000100B84800000100B84800000100B84800000100B84800000100981700000100B84800000100B84800000100B84800000100B848000001001744000001001744000001
  00174400000100174400000100FE2000000100981700000200071700000300672B00000100981700000100B84800000100071700000100B848000001002613000002001F0A00000300BE0A00000400163300000500435B00000600970A00000700360B00000800D258000009008B5400000A00320F00000B008F0F02000C00E
  50E02000D006B0F02000E00FD1202000F00AE5302000100300A02000200CF0A020003008A0A02000400290B000001009817020002009E2F000001004F37000001004F37000001004F3700000100981700000100071700000200672B000001002613000002001F0A00000300BE0A00000400163300000500435B00000600970A
  00000700360B00000800D258000009008B5400000A00320F00000B008F0F02000C00E50E02000D006B0F02000E00FD1202000F00AE5302000100300A02000200CF0A020003008A0A02000400290B000001009817020002009E2F00000100981700000100A91000000200591D000003009E1000000400286800000500BE22000
  006006F4C00000700CB5200000800DB52000001008B3602000200A91002000300591D020004009E1002000500286802000600BE22020007006F4C00000100971300000100971300000100436A00000200026F000003001E6F00000100436A00000200026F000001004F37000001009713000001000C2100000100436A000002
  00026F000003001E6F000004003B3D00000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F00000100676800000100676800000100F83C00000100991300000200192A00000300CE0C00000100A56D000002006E0A000003000D0B000004008A0A00000500290B00000600F65800000700A
  95400000100376B00000200F65800000300A954000001008B36000002006E0A000003000D0B00000400543300000500855B00000600F65800000700A954000008001E5A000001006E0A000002000D0B00000300543300000400855B000001008B3602000200991302000300192A02000400CE0C000001000C21000002002B3E
  00000300303E00000400543300000500855B00000100FC64000002008B3600000100FC6400000100FC6400000100971300000100971300000100CC2D000002002357000003007C0A000004001B0B00000500750A00000600140B00000100971300000100436A00000200026F000003001E6F000004003B3D00000100D318000
  00100BD1800000100BA0C00000200D00C00000100CC2D000002002357000003007C0A000004001B0B00000500750A00000600140B00000100631D000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F000003001E6F000004003B3D000001003A02000002
  003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001000C2100000100914200000100BC2500000100BC2500000100971300000100436A00000200026F000003001E6F000004003B3D00000100CC2D000002002357000003007C0A000004001B0B000005007
  50A00000600140B00000100436A00000200026F000003001E6F000004003B3D00000100BA0C000001005A59000001005A5900000200C303000001005A5900000200C30300000300530400000100BA0C00000100526800000100BC2500000200C50F00000300D60F00000400376B00000100BC25000002000202000003008303
  00000400C26D00000500376B00000100BB3C000002004A0B000003004808000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E103000
  00700E40300000800AB03000001000C21000001000C2100000100176400000100176400000100436A00000200026F000003001E6F000004003B3D000001005068000001009151000002004F37000001000C21000002009713000001000C2100000100594800000200430B00000300410800000100594800000200430B000003
  00410800000100594800000200430B00000300410800000100594800000100594800000100594800000100594800000100594800000100594800000200430B00000300410800000100594800000200430B00000300410800000100594800000200430B00000300410800000100594800000200430B000003004108000001005
  94800000200430B00000300410800000100594800000200430B00000300410800000100594800000200430B00000300410800000100594800000200235700000300430B00000400410800000100594800000200430B00000300410800000100594800000200235700000300430B00000400410800000100594800000200430B
  00000300410800000100594800000200FD5100000300430B00000400410800000100331002000200430B02000300410800000100594802000200430B02000300410800000100594800000100594800000100594800000100174400000200594800000100594802000200430B020003004108000001009D48000002005948000
  00100184A000002001A08000001009713000001000C2100000100436A00000200026F000003001E6F000004003B3D00000100436A00000200026F000003001E6F000004003B3D000001003A02000002003D0200000300400200000400130200000500DE0300000600E10300000700E40300000800AB03000001000C21000001
  000C2100000100436A00000200026F000003001E6F000004003B3D000001004055000002004F37000001000C21000002009713000001000C21000001009950000001007A3600000100680D00000100680D00000100174400000100A21400000100E73D00000100E73D00000100E73D00000100E73D000001003D2B000001003
  D2B00000100EF3200000100915100000200923300000100E62F00000100E62F00000100B73600000100B848000001009151000002009233000001002F0100000200B402000001002F0100000200B402000001002F0100000200B402000001002F0100000200B402000001002F0100000200B402000001002F0100000200B402
  00000100915100000200923300000100915100000200923300000300A34400000100B53700000100A34400000100CF5C00000200B04C00000100915100000200923300000300B04C000001009233000001009233000001008C5B000002006756020003007556000001008C5B00000200675602000300755600000100C05A000
  00200436A000003006756000001008C5B020002004D1A00000100C05A000002003960000003000C2100000100C05A00000200A614000003000C21000001007E60000002000C5B00000300C05A00000400A614000005000C2100000100C05A000002004D1A00000300A61400000100C05A000002003960000003000C21000001
  00C05A00000200A61400000300790600000100C05A00000200A61400000300790600000100C05A00000200A61400000100C05A00000200A614000003000C21000001008B36000001009644000002004A68000001003C1A000002006B43000001003C1A000001002C0200000200BC0300000300E23300000100270200000200B
  703000003000C3400000100A614000001005A6000000200125B000003001F5B00000100A501000002001E03000001007E60000001001744000001002B64000002006864000001007365000001009301000002000C03000001009301000002000C03000001009301000002000C03000001009301000002000C03000001009301
  000002000C03000001009301000002000C03000001008B3600000100BE10000001008B3600000100244D00000100E86800000100F959000002002314000001009D3600000200F95900000100BA5C00000100F959000002002314000001002357000002005D5000000300A54F00000400CF5600000500982C02000600B16C000
  001002357000002005D5000000300A54F00000400CF5600000500982C02000600B16C000007009D3600000800F95902000100B16C00000200BA5C00000100F95900000200231400000100632100000200982C00000100632100000200982C000003009D3600000400F95900000100BA5C00000100506000000200E668000003
  00433E00000100192D00000100192D00000200B31300000300AA1300000100450A00000200E40A000003002133000004004F5B00000500D90D00000600E66800000700433E00000100450A00000200E40A000003002133000004004F5B00000100665400000200EE2C000003009C0D00000100010E000002001D4D000001004
  360000002007B6800000300013C000004001D4D00000100506000000200E66800000300433E00000100E66800000200433E00000100E66800000200433E000001002133000002004F5B000003001E3B00000400E66800000500433E00000100450A00000200E40A000003002133000004004F5B000001002B3E00000200303E
  00000300543300000400855B00000100E66800000200433E000001008019000002008F5600000300323900000100353B000002001D4D00000300CE4C00000100353B000002007B6800000300013C000004001D4D00000500CE4C00000100AF25130075001600C8001600C4001700D0001700CC0018007500180006001900750
  0190006001A0075001A0006001B0006001C0024001E0075001E000A001F0075001F000A002000750020000A0023000A00260024002800BD002900BD002A00BD002E0024003200C4003400CC00360024003700240038002400390024003E00E9003F00F1004600F1004700E90049009D004900750049002C014A009D004A0075
  004A002C015000C40056002400580024005A0024006800750068009D00680075017B0012007B00E9007B000E007B00BD007B00F1000900484C01001100484C05001900484C01002100484C0A003100484C01004100484C10004900484C16005100484C16005900484C1B006100484C1B006900484C1B007100484C1B0079004
  84C1B008100484C1B008900484C1B009100484C16009900484C1B00A100484C1B00B100484C2000B900484C0100D900484C01000901484C26006101484C01007101484C3F00A901484C0100B101484C4600C101484C1B00F901484C01001102484C26002102484C01004102484C01006102484C01007902484C4C008102484C
  0100790162230100E101966553001C004B615E00E101AD5A0100E1014B6163002400144C6E00D101144C78008902484C0100A902484C7E00B102484C0100D102484C840009036C089500F1002B2AAF00C1022923B30019035F59B9002903484C1B002903484C0100F100A102E300F100F81BE7000903406E95003103344DEB0
  0F900CB250901F900CB250500F900CB250E018901516B1A01310332485F012C00484C9A01C100484C0100F1004E3D5300F900CB2516008901E16EA50119035F59B0013103353EEB003103AE035F013103BD64EB001101605E7E0011011C2B1B0011011C2B0E011101FA5C01001901C907530019013F5153001901AA63E30019
  01A629530019019F69C5011903A26EC9011901FE1CC50119031421CE011901035E53001901CF5E53001903326ED70119014F5E7E001901725EDD0119018661E30119011520E3011901301DC5011903266ED7011901EB5C01001901725E530019035F59E90191017A1CFA011901264D03023103ED3D5F013103F8685F013C005
  35C01004400144C6E004C004B615E003C000E259A013C002A255E005C00484C01006400484C01006C00484C01007400484C01007400D7329A017400AD365E007C00484C01006C006063E3006C00D03C7F025C006063E30064006063E3006400D03C7F027C006063E3007C00D03C7F026400D93C9C025C00D03C7F025C00D93C
  9C02740034455E006C00D93C9C022C00272B53008400484C050084006B0E9A012C008B2A5E006C00956AB4028400956AB4027C00956AB4025C00956AB4026400956AB4028101F60CBA028101835A63008101DC1801008101F60CC1026103985ECB0281010D1053009101E76EFF026903342B09037903A15B140319036333E30
  03103ED3D1A036103523620036103C23C2503610343362A0319035F593B039101AB2060039101326E68038903A1177203A101484C01009901C419C501A101484C1B009103E5587F0399032B3D85031903E16E8C03AC00484C9903A103D155A103A903121EA50379039B44AB037903326EAE036103B04AB4039901865CE30019
  035F59B803AC000A02C603AC00A203CA0319035F59CE03B103484C1B0099039E43D4039903EE22D803C103484C1B0061031A09DE03C9037B6A100419032C551A0489016333E300B400F7559C048901B733A3047903484CA80419031334150581035A4A1D051903771522051903F33CC501BC003C5A3005BC00484C3605B4004
  84C3605E901484C01003103F8681A03E901832A5005D901AA3B5300D9018B2AE700E103484C0100E9016063E300E9017B2A6300B4007F5A750589016B4584058901516B8D05B4003C5A980501024B2B530009028B2AE3003103AA4AEB0001028B2A5300C9018B2A390681036631C50119035359A5033102AA3B530031025D47
  5D0631029B3B6C063902484C010011017A2372061101DC3201003102484C7B064902AA3B530049028B2AC5011903142182065102484C8906F103484C1B005102AA3B5300C901AA3B5300C9019B3B9E06F900484C7B063902956A3906C901484CA406C901443CAA06F100484C7B060902CC3BB0060902955BB5060902AA3B530
  0F103484C01004902CC3BBC06C9006631C1064902955BC60651029B3BCD065902484C0100C1006631C501C901484C7B060102CC3BD9060102955BDE06D901CC3BE506D901955BEA06F903484C7E000102432BF70601021D64FE0601025E4507070902653D2807D901A15B4C070104FF3DDE070104420CE4070904264AEE0711
  04BE48F5070904585CF90701024623F7060102BC130707CC00484C0100CC006B0E9903D4008B2A6808CC00BF6A6D08CC00D03C7908DC00C86DE300DC006063E3001904484C1B00DC00D56D0500DC006B0E9A0161036F2CB2089101266E6803E400484C0500E400D7329A012C00695C5E00E400AD365E00E4006063E300E4003
  4455E0019035359D50819038254DC0819037715E108EC00484C0100F400484C0100F4006063E300F40034455E00F400D7329A0191029C42F508EC00D7329A019102B236F908EC0034455E00F900CB2505093104803D0E09C9016333F508310498027B093104351C8209C901D03C9209C901460E9C099902CB251B009902CB25
  AA0909036631AF0951026333F5085102D03CB7098103DA5CC20981037F151D055102460E0D0A1903484C160AA102484C0500A1026333E300A102D613240A09036A232B0A8103AD5B1D059101416B3B0AB902484C410AB902C331490A3103ED3D600A8103C32A660A8901516B6F0AC1005E537A0AA102484C1B00A102D613BC0
  AA102D613C30AC1003018E300FC005D5C270BFC003018310BD9033018E30021043018E30004015D5C270B04013018310B9901484C3F0B9901484C490B9901484C1B009901484C01000103CC3B940B0103955B990BF903484C1B001903CD31C60BF1006551DD0BF900CB25E30B0C01484C01000C017B2A5E000C016063E3000C
  01832A9A011401484C010014017B2A5E0014016063E3001401832A9A01A1036A0DB4035104484C01000E000400DA0C08000800EB0C08000C00F00C08001000F50C08001400F00C0E001800FA0C0E001C00030D0E0020002C0D0E002400B20D0E002800D10D0E002C00B20D0E003000040E0E0034000D0E0E0038000D0E0E003
  C000D0E0E004000140E0E0044001F0E0E004800520E0E004C00610E0E0050007C0E0E005400C90E0E005800120F0E005C001F0F0E0060002E0F0E0064003B0F0E006800DA0C09006C00480F09007000F00C0E0074004D0F0E007800600F0E007C007F0F0E008000040E0E00840025100E00880044100E008C0071100E009000
  9C100E00940000000E009800A5100E009C00AC100800A000B3100800A400B8100800AC00BD100800B000C2100800B400C7100500BC00CC100500C000CE100500C400D0100500CC00CC100500D000CE100500D400D0100500D800D2100500E000CC100500E400CE100500E800D0100500EC00D2100500F400CC100500F800CE1
  00500FC00D01005000001D21005000401D41005000801D61005000C01D81005001001DA1005001401DC1005001801DE1005001C01E01005002001E21005002801CC1005002C01CE1005003001D01005003401D41005003801DC1005003C01E41005004001E61005004801CE1005004C01D0100800C401F00C0800C801B31008
  00CC01E8100800D001ED100800D401B8100800D801F2100800DC01F7100800E001FC100800E40101110800E80106110800EC010B110800F00110110800F40115110800F8011A110800FC011F110D002C0224110D003C022D110E00440236110E0048026B110E00580236110E005C026B1108009402F00C08009802B31008009
  C02E8100800A002ED100800A402D6110800A802DB110800C002D6110E008003E01108008403061108008803F00C0800AC03B3100800B003E8100800B403ED100800B803B8100800BC03F2100800C003F7100800C403FC100800C80301110800CC0306110800D0030B110800D803B3100800DC03E8100800E003ED100800E403
  B8100800E803F2100800EC03F7100800F003FC100800F40301110800F80306110800FC030B1108000004101108003C04B8100D004C040F1208006404B8100800680418120800DC04F2100800E004B8100800E404B8100800E80406110800EC04ED100800F004B8100800F404EB0C0800F8041D120800FC04221208000005271
  20D0004052C1208000805B81008000C05181205001405D01005001805CE1005001C05CC1008007C0535120D0080053A120D00840543120A009C054C120D00A00555120D00A4055E120D00A80567120D00AC0555120D00B00570120D00B4055E120D00B80579120800BC0582120800C805F00C0800CC05D6110800D005F00C08
  00D40587120D00D8058C120D00DC053A120D00E005951208001C06D6110D002C065E120D0030069E120D003406A7120D003806B0120A005806B9120A005C06C2120D0060062D1108007806EB0C08007C06CB120D008006D0120D008406D9120900B806E2120900F806E7120900FC06EC1209000007F50C09000407F11209000
  807F61208009807F00C08009C07B3100800A007E81008002C08F00C08003008B31008003408E81008003808ED1008004008F00C08004408B31008004808E81008005008F00C08005408B31008005808E81008005C08ED1008006408F00C05006C08CC1005007008CE1005007408D01005007808D21005007C08D41007008408
  FB1207008808FE1207008C0801130800D008F00C0800D408B3100800D808E8100800DC08ED100800E008B81008001809F00C08001C09B31008002009E81008002409ED1008002809B81008009C09F00C0800A009B3100800A409E8100800A809ED100800AC09B8100800B009F2100800B409F7100800B809FC100800BC09011
  10800C00906110800C4090B110800C80910110800CC0915110800D0091A110800D4091F110800D80904130800DC09EB0C0800E00909130800E4091D120800E8090E130800EC0913130800F00918130800F4091D130800F80922130800FC0927130800000A2C130800040A31130800080A361308000C0A3B130800100A401308
  00140A45130800180A4A1308001C0A4F130800200A54130800280AF00C08002C0AB3100800300AE8100800340AED100800380AB81008003C0AF2100800400AF7100800440AFC100800480A011108004C0A06110800500A0B110800540A10110800580A151108005C0A1A110800600A1F110800640A04130800680AEB0C08006
  C0A09130800700A1D120800740A0E130800780A131308007C0A18130800800A1D130800880AF00C08008C0AB3100800940AF00C0800980AB31008009C0AE8100800A40AF00C0800A80AB3100800AC0AE8100800B40AF2100800B80A59130800C00AF00C0800C40AB3100800CC0AF00C0800D00AB3100800E00AE8100800E40A
  01110800E80A5E130800F80AF00C0800FC0AB3100800000BE8102700A300B3102E000B00B3102E0013007C252E001B0085252E002300A4252E002B00B3102E003300AD252E003B00B3252E004300AD252E004B00B9252E005300D3252E005B00F8252E00630046262E006B0061262E00730061262E007B0072262E008300AD2
  52E008B00B3252E009300C6264301AB00B310C3024300AD25E3024300AD2503034300AD250303B300CE2C23034300AD252303B300CE2C4303B300CE2C6303B300412DC3034300AD25C303B300CE2CE3034300AD25E303B300CE2C0304B300CE2C2304AB00B3106304B300412D0305BB00B3100305C300A22D2305BB00B31023
  05C300A22D4305BB00B3104305C300A22DA305BB00B310A305C300A22DA305CB00B310E3054300AD2503064300AD2523064300AD252306DB00AB2D43064300AD2563064300AD256306DB00E92D83064300AD2529076B01A42549076B01A42523094300AD252309EB00292E43094300AD254309EB00292E630A0B00B310830B5
  B01662E830B6301B310830B1301B310A30B5B01662EA30B6301B310A30B1301B310630C4300AD25030D4300AD25030DEB00A72E230D1301B310630F1301B310A9116B01A425C9116B01A425611CD300B42CE04BE3000027404CE3000027A04C4300B325C04C4300B325A04FE3000027C04FE3000027A051F3002127C051F300
  2127E051F30021276052F30046278052F3004627A052F3002127C052F3004627E052F30046278053F30046270054F30046272054F30046274054F30046276054F30046278054F3004627A054F3004627C054F3004627E054F30046270055F30021272055F30021274055F30021276055F30021278055F3002127A055F300212
  7C055F3002127E055F30021274056F30021276056F30021278056F3002127A056F3002127C056F3004627E056F30046272057F30021274057F30021278057F3002127A057F3004627C057F3004627E057F30046270058F30046272058F30046274058F30046276058F30046278058F3004627A058F3004627C058F3004627E0
  58F30046270059F30046272059F30046274059F30046276059F300462780590301B310A059F3004627C059F3004627E059F3004627005AF3002127205AF3002127405AF3002127605AF3002127805AF3002127A05AF3002127C05AF3002127E05AF3002127005BF3004627205BF3004627405BF3004627605BF3004627805BF
  3004627C05BF3002127E05BF3002127005CF3002127205CF3002127405CF3002127605CF3002127805CF3002127A05CF3002127C05CF3002127E05CF3004627005DF3004627205DF3002127405DF3004627605DF3004627805DF3004627A05DF3004627E05DF3004627005EDB006B27605EF3004627805EF3004627A05EF300
  4627C05EF30046272060F30021274060F30021276060F3002127A060F3004627C060F3004627E060F30021270061F30046272061F3004627C061F30046272062F30046274062F30046276062F30046278062F3004627A062F3004627C062F3004627E062F30046270063F30046272063F30021274063F30021276063F300212
  78063F3002127A063F3002127C063F3002127E063F30021270064F30021276064F30021278064F3002127A064F3002127C064F3002127E064F30046270065F30046272065F30046276065F30021278065F3002127C065F3002127E065F30046270066F30046272066F30046274066F30046276066F30046278066F3004627A0
  66F3004627C066F3004627E066F30046270067F30046272067F30046274067F30046276067F30046278067F3004627A067F3004627C067F3004627E067F30046270068F30046272068F30046274068F30046276068F300462780680301B310A068F3004627C068F3004627E068F30046270069F30046272069F30046274069F
  30021276069F30021278069F3002127A069F3002127C069F3002127E069F3002127206AF3002127406AF3002127606AF3002127806AF3002127A06AF3002127C06AF3002127E06AF3004627006BF3002127206BF3002127406BF3002127606BF3002127806BF3002127A06BF3004627C06BF3002127E06BF3004627006CF300
  4627206CF3004627406CF3004627606CF3004627806CF3004627A06CF3004627206DF3004627406DDB00C627A06DF3004627C06DF3004627206EF3004627606EF3004627806EF3004627006FE30000278071E3000027A071E3000027C0710B011F2880720B00B310A0720B00B310C0720B00B3108497FB00E92EC097F300652
  8E097F300E2290098F30065282098F30065284098F30065286098F30065288098F3006528A098F3005F2BC098F3006528209AF3006528409AF3005F2B609AF3002127809AF3002127E0A05301B31000A15301B31040A15301B31060A15301B31080A15301B310A0A15301B310C0A15301B31044A6FB00E92E9503D4109B03D4
  10A103D410A703D410AD03D410B303D410CD03D410D503D410EB03D4102104D4102304D4105F04D4106704D4106F04D4107704D4108104D4101B05D410080006006313080000000000600000000100000066000100100000008700010014000000880001004000000089000100000100008A0000000000E20100000000E3018
  B0090009A009F00A300A900C400C900F000F900130127012C0133013C0141015301580165016B017801800187018C01A001BA01C101F2010D02130217022002660278028F02AA02D302DA0210033003350345034A03510357037903BF03E303F103FC0306041F042D0434043C0443044D04AE04D704DD04E504F60404050F05
  3C05420555055E057C059E05A605B105B905C905D705DC05E305EA05F8050A0615061D0622062B0633063E0644064B064F06630690069806D306F10613071D0734073B07440753075A07AA07BF07D207DA07E90701080D08130819082108290835083C084F087308800885088B08940899089F08C208CF0801090A0911093C0
  943094C09750989099709A509BC09C709D609080A1C0A380A510A6B0A7F0A870A9E0AA30AA80AAF0ACA0AD00AD60ADC0AE40AEE0AF40AF90AFE0A040B0A0B190B510B590B670B850B8B0BA00BA70BBF0BCC0BD50BEB0B000C060C150C1D0C290C1300010016000B0017000C0022000D0026000F0028001200290013002C0014
  003A0015003F001B0046001C0049001D004A0029004D003400530035005B0036005C0039005D008D0068009B0075009D0079009E007B009F0000004D4F02250000222E02250000815202250000602E06250000F9620B25000038620B2500009C0A102500003B0B10250000870B102500006A0810250000C76C14250000DC6A1
  A250000911302250000AE3B20250000250C24250000F10B24250000DA0B062500009B6D062500005E6A29250000B35C2F250000062134250000E84834250000A922202500006210202500007D5002250000B52E3925000071613E25000071613E250000AE3B20250000CC3B422500003A0C0625000091130225000043134825
  00004F594E25000000324E250000870B4E2500006A084E250000700B20250000530820250000CD1420250000AE3B20250000CC3B542500003A0C06250000911302250000431348250000030A4E250000A20A4E250000870B4E2500006A084E250000700B20250000530820250000CC3B5A250000222F5E25000071616225000
  0053402250000430E20250000A8486625000036236C250000731A72250000550B72250000311772250000481672250000FF13722500002F5772250000B73272250000B757722500009D1672250000044B722500008C4572250000D14172250000B05672250000EC4A72250000D54A72250000DB1172250000AC11722500002A
  1272250000731172250000730E72250000555772250000155172250000BC2C72250000A12C722500000E5372250000305372250000921172250000622072250000571A722500002F6A722500007D3E722500009E6272250000F54472250000AA2B72250000B26D72250000562E7225000098217225000030157225000056157
  2250000116272250000D62D72250000673E72250000992E722500000F4572250000812E72250000FE4372250000062072250000E84372250000265872250000DA5772250000AC0E72250000D368722500004710722500008610722500000912722500007158722500006C2D72250000475872250000492D7225000004587225
  00002E2D72250000C35072250000CA6E72250000E35072250000791672250000A03272250000790C72250000B31A72250000BA3972250000183A72250000D73972250000FB39722500000B2C72250000784972250000A439722500008F03722500002B6572250000423F72250000AD0972250000933D7225000020117225000
  0573972250000A8486625000036236C250000120E72250000FB32722500000A3172250000444872250000196572250000666572250000A01372250000696572250000476572250000E43172250000BE5272250000F73172250000CC3B76250000AE3B20250000D46E20250000D46E2025000085603E250000C3603E25020053
  00030002005500050002005600070002005900090002005B000B0002005C000D0002005D000F0002005E00110002005F00130002006000150002009F0017000200AB001900020020011B00020021011D00020030011F0002003101210002004301230002004D012500020050012700020064012900020040022B00020041022
  D00020042022F0002004302310002004402330002004502350002005802370002007102390002008D023B00020095023D00020098023F0002009902410001009A0241000200B20243000100B30243000200DE0245000200DF0247000200E00249000200E1024B000200E2024D000200E3024F000200E9025100020001035300
  02000703550002000A03570002000B03590001000C035900020023035B00010024035B00020051035D00020052035F00020053036100020054036300020055036500020056036700020076036900020093036B0002000C046D0002000D046F0002000E04710002001E04730002001F047500010020047500020021047700020
  022047900020023047B00020024047D00020025047F0002002604810002002704830002002804850002002904870002002A04890002002B048B0002002C048D0002002D048F0002002E04910002002F049300020030049500020031049700020032049900020033049B00020034049D00020035049F0002003604A100020037
  04A30002003804A50002003904A70002003A04A90002003B04AB0002003C04AD0002003D04AF0002003E04B10002003F04B30002004004B50002004104B70002004204B90002004304BB0002004404BD0002004504BF0002004604C10002004704C30002004804C50002004904C70002004A04C90002004B04CB0002004C04C
  D0002004D04CF0002004E04D10002004F04D30002005004D50002005104D70002005204D90002005304DB0002005404DD0002005504DF0002005604E10002005704E30002005804E50002005904E70002005A04E90002005B04EB0002005C04ED0002005D04EF0002005E04F10002005F04F30002006004F50002006104F700
  02006204F90002006304FB0002006404FD0002006504FF0002006604010102006704030102006804050102006904070102006A04090102006B040B0102006C040D0102006D040F0102006E04110102006F041301020070041501020071041701020072041901020074041B01020075041D01010076041D01020077041F01020
  07804210102007904230102007A04250102007B04270102007C04290102007D042B0102007E042D0102007F042F010200800431010200810433010200820435010200C50437010200D20439010200EE043B01020001053D0102000A053F0102000C0541014900DA05E2064900DC05E4064900DE05E6064900E605E8064A00CC
  06E2064A00CE06E4064A00D206E6064A00DA06E8067B00100A47007B00120A49007B00140A4B007B00160A4D007B00180A4F007B001A0A51007B001C0A53004C3A8402343A2D003600570067009401F7012C0234023C02440247024F0257025F026B02A302EF02F302F702FB028F0394042805FE0745085E08A508B908E708E
  E081F0B370BF70B0C0C0001B1028D6C01004001CB02EA6802000001D302C64403000001D502121E03000001D702903B03000001D9025E5303000001DB02145603000001DD02314F03000001DF02AC5003000001E102825403000001E3020A5503000001E502F42403000001E702053403000001E902A00B03000001EB027112
  03000001ED02071503000001EF02E01C03000001F102964803000001F302904803000001F5028F1703000001F702511103000001F9024A0F03000001FB02091103000001FD02586B03000001FF0223180300000101031716030000010303C51F030000010503CB4D0300000107033311030000010903420F030000010B03EF1
  0030000010D03980B030000010F036E330300000111031C170300000113030A1E03000001150356530300000117030C560300000119037A54030000011B030255030000011D037248030000011F03F61703000001210394610300000123033B4A030000012503473B0300000127030F160300000159035C19030000015D0300
  19030000019B03F31D030000019F03EB1D03000001A303B71F03000001A703143F03000001AB03C61C03000001AF03032503000001B303FB2403000001B703826E03000001BB03051803000001BF03821703000001C1031A1E03001467050003022467050004022C67050005023467050006023468050007024C68050008025
  4680500090204800000100000000000000001000000380C0A5000000400000000000000000000002F0CBC0C000000000400000000000000000000002F0CA50B000000000400000000000000000000002F0CEB3B000000000400000000000000000000002F0CEC3C000000000000000001000000654E0000283E000001000000
  944E00006A001D006B0026006C0028006D0028006E002D006F002D0070003B0071003B0072003D0073003F0074003F0075003F0076003F007700460078004600790046007A0046007B0052007C0056007D0056007E0059007F005B0080005E0081005F0082005F0083005F00840060008500660086006700870069008800690
  0890069008A0069008B007500000000004800FD09000000005D02FD09000000002907FD09000000002B07FD09000000002D07FD098300AC01280773022807850228078A02280797022A07AD082C07AD0802009D000000004947656F67726170687953696E6B313130004947656F6D6574727953696E6B313130005F73696E6B
  313130005F5F5374617469634172726179496E69745479706553697A653D323000436F6D706F756E64437572766541726330004375727665506F6C79676F6E417263300064656E73697479477269643000436F6D706F756E6443757276654C696E6530004375727665506F6C79676F6E4C696E6530004375727665506F6C796
  76F6E3000364436323138413138314146413430314346453245394431434633323244303738323736363634303032353737313238373641413041314235413143383537310042393034394341324543314630383846363335383643303138324637373045313634433645314434304145433136443641333838433439303544
  443832333831006F72645031004E756C6C61626C6560310049456E756D657261626C65603100494167677265676174656031005175657565603100537461636B603100457175616C697479436F6D706172657260310049456E756D657261746F726031004C697374603100686964310064656E7369747947726964310063686
  96C6431006C6F6E67697475646531006C617469747564653100436F6D706F756E64437572766531004C696E65537472696E67310043697263756C6172537472696E6731007041726731007063777341726731005F73696E6B310064657461696C31004974656D310066726F6D31004375727665506F6C79676F6E3100703100
  617272310062797465733100506F696E7431007831007931007A310046313530423333424242423443413433364139343644343538343237434331384344303232423146333032463536443338343244334142423246453930453132006B65726E656C3332005265616455496E74333200546F55496E7433320052656164496
  E7433320053716C496E743332006F72645032004D5F5351525432003C746F75636865643E355F5F32003C47726964436F7665726167653E645F5F320056616C75655475706C656032004B657956616C756550616972603200536F727465644C697374603200686964320064656E736974794772696432006368696C6432006C
  6F6E67697475646532006C6174697475646532007370686572653200436F6D706F756E64437572766532004C696E65537472696E67320043697263756C6172537472696E6732007041726732007063777341726732005F73696E6B320064657461696C32006765745F537472556E657870656374656443616C6C32004974656
  D320066726F6D32004174616E32007032006172723200627974657332007768617432006D5F72696768744C696D69743200506F696E7432007832007932007A32003042333437354235424345323542373634343344333135423230363145433839304237343833333046363532454639363332444241444133414336304141
  3833003C636F6E7461696E65643E355F5F330064656E73697479477269643300704172673300566563746F7233007768617433006D5F7371727433005F5F5374617469634172726179496E69745479706553697A653D3634004B61746D61695F43545034003C6647656F6D6574727945786365656473477269643E355F5F340
  03C66486173416D626967756F7573546F756368656443656C6C733E355F5F35005F5F5374617469634172726179496E69745479706553697A653D31360055496E7431360053716C496E743136005F5F5374617469634172726179496E69745479706553697A653D323536003C63656C6C57696474683E355F5F36003C63656C
  6C4865696768743E355F5F37003C69526F773E355F5F380039384637373737374131304543423535463736313637374335453635453735384238423131324544303733464244463242314236444132363033383333363139003C69436F6C3E355F5F39003C4D6F64756C653E003C50726976617465496D706C656D656E74617
  4696F6E44657461696C733E00443137364330444231433234443638463333383145413741434442423630454342374337363344373430353235453145383735443531393935364245314637410053544D4C696E6546726F6D574B420053544C696E6546726F6D574B4200535447656F6D436F6C6C46726F6D574B4200535447
  656F6D46726F6D574B420053544D506F696E7446726F6D574B42005354506F696E7446726F6D574B420053544D506F6C7946726F6D574B42005354506F6C7946726F6D574B42004375727665506F6C79676F6E4343006C4E4944004E4F5F53524944006D5F66486176654E6578744944004765744E657874494400574F524B5
  3504143455F424F554E4400574F5253504143455F424F554E4400474C5F455F47454F44455449435F4255464645525F57524150535F41524F554E44004441394535343335393738324233333544443233313842394533423842323638364543344542344141333939363936344245363441374536324243373246374500494E
  56414C49445F4445434F4445004154545249425554455F53544147450046495253545F4E454741544956455F5354414745004C4153545F504F5349544956455F53544147450046495253545F504F5349544956455F5354414745004E414D4553504143455F5052454649585F535441474500474C5F455F47454F44455449435
  F524553554C545F455843454544535F48454D495350484552450042494E415259494453495A45006765745F454F4600464143494C4954595F495446004F524450415448004348494C445F4C4556454C0046414B455F4C4556454C006D5F69676E6F72655A4D0053747269705A4D005F73747269705A4D005F7772697465506F
  696E745A4D004173546578745A4D00417342696E6172795A4D006765745F4D00726561644D005F77726974654D006765745F4861734D004765744D005F706F696E744D005F6C6173744D0049734E614E00535443757276654E0047657443757276654E005354496E746572696F7252696E674E00476574496E746572696F725
  2696E674E0047657452696E674E004765744C696E65537472696E674E0047657443697263756C6172537472696E674E005354506F696E744E00476574506F696E744E00535447656F6D657472794E0047657447656F6D657472794E0053797374656D2E494F00436F6D70617265424D50004E445200584452005468726F7745
  7863657074696F6E466F7248520053455645524954595F4552524F52004E5F535441474553004D41585F4341434845445F4C4556454C5300454F53004D494E5F434F444542495453004D41585F434F44454249545300474C5F455F47454F44455449435F414E5449504F44414C5F415247554D454E54530044455343454E444
  14E545F4C494D4954006765745F537472556E6B6E6F776E4C6162656C496E574B54004F52445F434F4D504F4E454E54004154545249425554455F434F4D504F4E454E54004E414D4553504143455F5052454649585F434F4D504F4E454E54006765745F535458006765745F5800726F6F744F6647726964580053697A655800
  72477269644D696E5800704D696E58005F6D696E58005F706F696E7458006D5F526F6F74580067726964526F6F74580047656F646574696354657373656C6C6174696F6E526F6F7458003C3E335F5F726F6F7458005F6C61737458005F66697273745800704D617858005F6D617858006D5F46757A7A58007246757A7A58006
  765745F535459006765745F5900726F6F744F6647726964590053697A65590072477269644D696E5900704D696E59005F6D696E59005F706F696E7459006D5F526F6F74590067726964526F6F74590047656F646574696354657373656C6C6174696F6E526F6F7459003C3E335F5F726F6F7459005F6C61737459005F666972
  73745900704D617859005F6D617859006D5F46757A7A59007246757A7A59006765745F5A00726561645A005F77726974655A006765745F5374724172634E656564546F48617665457175616C5A006765745F4861735A004765745A005F706F696E745A005F6C6173745A0076616C75655F5F005354417265610047656F64657
  46963417265610053797374656D2E44617461004D616B65556E7361666547656F4D61727368616C44617461006765745F47656F44617461006765745F436F6E737472756374656447656F44617461006765745F46756C6C476C6F626547656F44617461006D735F66756C6C476C6F626547656F446174610047657447656F44
  617461006765745F456D70747947656F44617461006D735F656D70747947656F446174610047657444617461006543656C6C4C6162656C496E64657841727261794F6374610072656C61746976654172656144656C7461006765745F53747253696E676C6553696465526564756365506173736564496C6C6567616C4172656
  144656C7461006543656C6C4C6162656C496E646578417272617948657861006D73636F726C6962005061727365576B6200776B620053797374656D2E436F6C6C656374696F6E732E47656E657269630047656F646574696300416C6C6F630041646441726300456E6441726300436F6D706F756E6443757276654172630043
  75727665506F6C79676F6E4172630041646443697263756C6172417263004164645365676D656E7441726300537461727441726300466972737441726300526561644E65787441726300737263006765745F43757272656E744D616E616765645468726561644964003C3E6C5F5F696E697469616C5468726561644964006D5
  F5370617469616C5265666572656E63654964007370617469616C5265666572656E63654964004343656C6C4964006D5F506172656E7443656C6C496400706172656E7443656C6C496400735F526F6F7443656C6C496400476574526F6F7443656C6C49640063656C6C4964004765744964006765745F417267756D656E744E
  6F7453716C48696572617263687949640050726F64756374446973636F766572794964006765745F43616E5265616400546872656164006543656C6C4C6162656C496E64657841727261795175616400416464006765745F537472474C4C6962726172794E6F744C6F616465640054686F774966474C4E61746976654C69627
  26172794E6F744C6F61646564006765745F5374724C69737443617061636974794578636565646564006F72644C656E677468457870616E64656400707472426F6F6C546F7563686564006343656C6C73546F756368656400746F74616C43656C6C73546F756368656400707472426F6F6C416D626967756F75736C79546F75
  6368656400616D626967756F75736C79546F756368656400746F7563686564005F6661696C65640047656F6465746963497356616C696444657461696C656400707472426F6F6C436F6E7461696E6564006343656C6C73436F6E7461696E656400746F74616C43656C6C73436F6E7461696E656400636F6E7461696E6564006
  34772696453697A655371756172656400746F74616C43656C6C735061727469616C6C79436F76657265640064657461696C315A65726F42617365640064657461696C325A65726F42617365640053544973436C6F7365640047656F64657469634973436C6F736564005F646973706F736564006765745F4973416C6C6F6361
  746564006D5F6646616B654C6576656C47656E6572617465640067656F547970654578706563746564006765745F5374724E6F4D6F726543616C6C734578706563746564006765745F48617346696775726553746172746564005F66696775726553746172746564006765745F537472506C6174666F726D4E6F74537570706
  F7274656400617574686F72697A65645F7370617469616C5F7265666572656E63655F6964006869640049735372696456616C69640049734C6F6E67697475646556616C69640049734C6174697475646556616C69640047656F64657469634D616B6556616C6964006650657266726F6D4D616B6556616C6964006D5F665661
  6C6964006765745F53747256616C6964005354497356616C69640047656F6465746963497356616C696400476574497356616C696400536574497356616C6964005F697356616C6964004973506F696E7456616C6964006765745F53747247656F6772617068795372696449734E6F7456616C6964006765745F537472496E7
  374616E636549734E6F7456616C6964006765745F53747247656F677261706879436F6F7264696E617465734C6F6E67697475646549734E6F7456616C6964006765745F53747247656F677261706879436F6F7264696E617465734C6174697475646549734E6F7456616C6964006765745F537472506F696E74436F6F726469
  6E61746549734E6F7456616C6964006765745F53747247656F677261706879496E70757449734E6F7456616C69640041737365727456616C6964005468726F774966496E76616C6964004E756C6C4F6E496E76616C696400535443656E74726F696400735F4C6162656C466F724F6374614772696400735F4C6162656C466F7
  2486578614772696400735F4C6162656C466F7251756164477269640069734C6561664772696400735F4C6162656C466F72446947726964006D5F5472656174526F6F7443656C6C4173506172656E744F66546F704772696400634269747350657247726964006647656F6D6574727945786365656473477269640067656F6D
  657472794578636565647347726964006973546F706D6F737447726964006765745F535453726964007365745F535453726964006765745F53726964007365745F537269640056616C696461746553726964004E756C6C53726964004D696E5372696400536574537269640044656661756C7453726964004D6178537269640
  05F73726964006765745F4E6F74414368696C6400636F6C4368696C6400726F774368696C64006F705F42697477697365416E6400456E64006F706572616E6400417070656E640053797374656D446174614163636573734B696E64004E6F74466F756E64006765745F537472427566666572576F756C645772617041726F75
  6E6400496E69744D6574686F64006D6574686F640057726974654F726400686967684F726400457874726163744F7264006C6F774F7264006343616E64696461746554657373656C6C6174696F6E4361726400634D617854657373656C6C6174696F6E43617264006D5F737172745468697264005265636F676E697A654F707
  4696F6E616C4B6579776F7264006B6579776F726400426567696E5F46756C6C476C6F6265006765745F497346756C6C476C6F626500476574497346756C6C476C6F6265004163636570747346756C6C476C6F62650053514C31315F46756C6C676C6F6265005F66756C6C676C6F6265005354506F696E744F6E537572666163
  6500496E76616C696452696E674F75744F66506C616365006765745F537472496E76616C696447656F67726170687952696E674F75744F66506C616365006765745F537472496E76616C696447656F6D6574727952696E674F75744F66506C616365005265706C616365004973576869746553706163650047656F646574696
  354657373656C6C6174696F6E48656D69737068657273654F6666736574496E476C6F62616C5370616365005F66756C6C476C6F62654E616D657370616365005F676D6C4E616D6573706163650056657273696F6E4249445348656C704E616D6573706163650056657273696F6E48656C704E616D6573706163650047656F64
  657469634375727665546F4C696E6557697468546F6C6572616E63650042756666657257697468546F6C6572616E6365006765745F53747242756666657257697468546F6C6572616E6365506173736564496C6C6567616C546F6C6572616E6365006765745F537472526564756365506173736564496C6C6567616C546F6C6
  572616E6365006765745F5374724375727665546F4C696E65506173736564496C6C6567616C546F6C6572616E63650044656661756C7453696D706C65427566666572546F6C6572616E63650044656661756C74427566666572546F6C6572616E63650044656661756C74546F6C6572616E636500746F6C6572616E63650053
  5444697374616E63650047656F646574696344697374616E6365006765745F537472427566666572506173736564496C6C6567616C44697374616E636500476574446961676F6E616C44697374616E6365004D696E696D616C52656C617469766542756666657244697374616E63650047656F6465746963506F696E7444697
  374616E63650064697374616E636500437265617465496E7374616E6365005354446966666572656E63650047656F6465746963446966666572656E636500535453796D446966666572656E63650047656F646574696353796D446966666572656E63650047656F64657469635265647563650053696E676C65536964655265
  6475636500656E61626C6552656475636500506C616E61725265647563650047657448617368436F6465005F6572726F72436F64650053716C50726F6475637446616D696C79436F646500436F6D62696E654D6F646500636F6D62696E654D6F6465006D5F496E74657276616C4D6F646500696E74657276616C4D6F6465007
  4657373656C6C6174696F6E4D6F6465006465636F6465004578636C756465004D61784C6F6E676974756465006C6F6E676974756465004D61784C61746974756465006C6174697475646500467265650041646453616665006D5F436F76657261676500776B62436F7665726167650047656F646574696347726964436F7665
  72616765005370617469616C47726964436F766572616765004D6963726F736F66742E53716C5365727665722E54797065732E4953716C5370617469616C47726964496E64657861626C652E47657447726964436F766572616765004647656E6572617465436F766572616765006D5F47656E6572617465436F76657261676
  50067656E6572617465436F7665726167650063656C6C436F76657261676500476574436F76657261676500636F766572616765006765745F4D657373616765007063624D65737361676500466F726D6174457863657074696F6E4D65737361676500704D65737361676500466F726D61744572726F724D6573736167650043
  6F6E7374727563744D657373616765004765744D65737361676500436F70794F75747075744D657373616765006D657373616765004765745374616765007374616765006765745F537472496E76616C6964416E7469706F64616C45646765006765745F537472416E7469706F64616C45646765005A4D52616E6765005A526
  16E6765006D5F43656C6C456E6452616E67650063656C6C456E6452616E6765006765745F537472537269644F75744F6652616E6765006D5F43757272656E745370617469616C54657373656C6C6174696F6E52616E6765006D5F43757272656E7454657373656C6C6174696F6E52616E6765006D5F43656C6C537461727452
  616E67650063656C6C537461727452616E6765004D6572676500457874726163744F7264436F6D706F6E656E7446616B65005374726F6B6500456E64496E766F6B6500426567696E496E766F6B65006D5F7363616C6500497346696C6C61626C6500494E756C6C61626C650049436F6D70617261626C650049456E756D65726
  1626C650049446973706F7361626C65004953716C5370617469616C47726964496E64657861626C650047657449734B61746D6169436F6D70617469626C650053657449734B61746D6169436F6D70617469626C65006D5F69734B61746D6169436F6D70617469626C650052656164446F75626C65005265636F676E697A6544
  6F75626C65005265636F676E697A654F7074696F6E616C446F75626C650053716C446F75626C6500546F446F75626C6500526561644F7074446F75626C6500474348616E646C650052756E74696D654669656C6448616E646C650052756E74696D655479706548616E646C65004765745479706546726F6D48616E646C65004
  56E76656C6F7065416E676C6500436F6E73747275637452656374616E676C650050726F647563744C6963656E736546696C65006846696C650047656F646574696354696C65004973566F6C6174696C65005354497353696D706C65004D756C7469506F696E7450617273655374796C65006765745F4E616D65007063777352
  65736F757263654E616D65007265736F757263654E616D65006C7046696C654E616D65006765745F4C6F63616C4E616D6500617267756D656E744E616D6500476C4C6962726172794E616D6500617574686F726974795F6E616D65006D5F4C6162656C6C696E67536368656D65004543656C6C4C6162656C6C696E675363686
  56D65006C6162656C6C696E67536368656D650053696E6B4164644C696E6500436F6D706F756E6443757276654C696E65004375727665506F6C79676F6E4C696E650053544375727665546F4C696E65004164645365676D656E744C696E650047656F646574696353686F72746573744C696E650046697273744C696E650047
  656F6465746963436F6D62696E65004F75746C696E65004E6F6E65005061727365476D6C417263536861706500496E6465784F664E74684368696C64536861706500496E6465784F664C6173744368696C645368617065005061727365476D6C4D756C746953757266616365536861706500506F70756C61746553686170650
  05061727365476D6C436F6D706F7369746543757276655368617065005061727365476D6C4D756C746943757276655368617065005061727365476D6C417263537472696E675368617065005061727365476D6C4C696E65537472696E675368617065005061727365476D6C506F6C79676F6E50617463685368617065006953
  68617065005061727365476D6C506F6C79676F6E53686170650041737369676E466967757265546F5368617065004765745368617065005365745368617065005061727365476D6C4D756C7469506F696E745368617065005061727365476D6C506F696E745368617065005061727365476D6C4D756C746947656F6D6574727
  95368617065007368617065005365637572697479437269746963616C53636F7065005354456E76656C6F70650055706461746547656F6465746963456E76656C6F706500476574475479706500455354797065006765745F547970650053756254797065006D5F73756254797065005265616454797065006765745F537472
  496E76616C696454797065006765745F4E6F64655479706500586D6C4E6F64655479706500474348616E646C65547970650056616C7565547970650049734D756C746954797065004765744D756C746954797065006765745F537472496E7374616E63654F66506173736564496C6C6567616C54797065006C6576656C54797
  0650070637773457863657074696F6E547970650041734F70656E476973547970650047657454797065004765745365676D656E74547970650041734F70656E47697347656F6772617068795479706500535447656F6D65747279547970650041734F70656E47697347656F6D65747279547970650067656F6D657472795479
  7065005F7479706500426974436F6D7061726500537068657265005F7370686572650047657449734C61726765725468616E4148656D697370686572650053657449734C61726765725468616E4148656D69737068657265006D5F69734C61726765725468616E4148656D69737068657265006973536D616C6C65725468616
  E4148656D69737068657265006765745F537472496E76616C696447656F677261706879496E70757448656D6973706865726500506F70756C61746541726346696775726500456E6446696775726500506F70756C6174654C696E6546696775726500506F70756C6174654375727665466967757265005061727365476D6C43
  6F6D706F73697465437572766546696775726500696E6465784F666C6173744375727665466967757265004765744E6578744375727665466967757265004275696C64696E6746696775726500694669677572650053696E6B426567696E466967757265004765744669677572650053657446696775726500496E6465784F6
  64C61737446696775726500496E6465784F664669727374466967757265006765745F497346697273744669677572650066696775726500756E69745F6F665F6D656173757265004765744D696E437572766174757265004765744D6178437572766174757265006765745F4F53417263686974656374757265006765745F43
  756C74757265007365745F43756C74757265007265736F7572636543756C74757265006765745F496E76617269616E7443756C747572650052656C65617365006F705F46616C73650053797374656D2E49446973706F7361626C652E446973706F73650054727950617273650055706461746500437265617465005F616C6C6
  F6344656C6567617465005F6C617267655468616E4148656D6973706865726544656C65676174650053657449734C61726765725468616E4148656D6973706865726544656C6567617465004974656D50617273657244656C6567617465004D756C74696361737444656C656761746500416C6C6F63416E6450696E47656F6D
  6574727944656C65676174650047656F677261706879456E76656C6F70654167677265676174650047656F6D65747279456E76656C6F70654167677265676174650047656F677261706879436F6E76657848756C6C4167677265676174650047656F6D65747279436F6E76657848756C6C4167677265676174650047656F677
  261706879556E696F6E4167677265676174650047656F6D65747279556E696F6E4167677265676174650047656F677261706879436F6C6C656374696F6E4167677265676174650047656F6D65747279436F6C6C656374696F6E4167677265676174650061676772656761746500535452656C6174650047656F646574696354
  657373656C6C61746500416363756D756C61746500496E7465726E616C506F70756C617465005465726D696E61746500456469746F7242726F777361626C65537461746500456E737572655374617465006D5F50726F63657373696E675374617465005472616E736974696F6E5374617465004275696C64657253746174650
  04550726F63657373537461746500474C4C69627261727953746174650056616C69646974795374617465003C3E315F5F7374617465006D5F737461746500497346696E69746500577269746500436F6D70696C657247656E6572617465644174747269627574650053716C4D6574686F644174747269627574650047656E65
  7261746564436F646541747472696275746500556E76657269666961626C65436F64654174747269627574650044656275676765724E6F6E55736572436F646541747472696275746500536563757269747954726561744173536166654174747269627574650044656275676761626C6541747472696275746500456469746
  F7242726F777361626C6541747472696275746500436F6D56697369626C6541747472696275746500417373656D626C794B657946696C6541747472696275746500417373656D626C794B65794E616D65417474726962757465004974657261746F7253746174654D616368696E654174747269627574650053716C55736572
  446566696E656454797065417474726962757465006D5F6E657874466967757265417474726962757465006669677572654174747269627574650053716C55736572446566696E6564416767726567617465417474726962757465004F62736F6C6574654174747269627574650057726974654174747269627574650041737
  3656D626C7954726164656D61726B417474726962757465005461726765744672616D65776F726B41747472696275746500536563757269747953616665437269746963616C417474726962757465005365637572697479437269746963616C417474726962757465006D5F4543656C6C417474726962757465004465627567
  67657248696464656E41747472696275746500417373656D626C7944656C61795369676E41747472696275746500457874656E73696F6E41747472696275746500417373656D626C7946696C6556657273696F6E41747472696275746500417373656D626C79496E666F726D6174696F6E616C56657273696F6E41747472696
  27574650053656375726974795065726D697373696F6E4174747269627574650053716C46756E6374696F6E41747472696275746500536563757269747952756C6573417474726962757465005475706C65456C656D656E744E616D657341747472696275746500466C61677341747472696275746500436F6D70696C617469
  6F6E52656C61786174696F6E7341747472696275746500416C6C6F775061727469616C6C795472757374656443616C6C65727341747472696275746500417373656D626C7950726F64756374417474726962757465004765744174747269627574650053716C466163657441747472696275746500417373656D626C79436F7
  079726967687441747472696275746500434C53436F6D706C69616E74417474726962757465004D6F7665546F466972737441747472696275746500417373656D626C79436F6D70616E794174747269627574650052756E74696D65436F6D7061746962696C697479417474726962757465005375707072657373556E6D616E
  61676564436F646553656375726974794174747269627574650061747472696275746500457865637574650052656164427974650046756C6C476C6F6265427974650062486967684279746500624C6F7742797465006D5F5061727469616C43656C6C436F7665726167655175657565006D5F4F75745175657565004465717
  565756500456E7175657565006765745F56616C75650063757272656E7452656C6561736554696D65426F6D6256616C7565006576616C54696D65426F6D6256616C7565004765744E756D6572696356616C7565004765745265706172656E74656456616C7565004D696E416C7465726E6174697665574B425479706556616C
  7565004D6178416C7465726E6174697665574B425479706556616C756500577269746556616C7565006765745F48617356616C75650047657456616C75650076616C7565006F705F54727565006765745F49735472756500497356616C6964457870656E736976650072656C617469766500426567696E5F436F6D706F756E6
  443757276650052656164436F6D706F756E644375727665004173436F6D706F756E644375727665006765745F537472496E76616C6964456467654F7665726C617053616D65437572766500537061636546696C6C696E67437572766500634772696453697A650055734772696453697A65006772696453697A65004765744F
  626A65637453697A65006765745F537472535452656C617465506173736564496E74657273656374696F6E5061747465726E4D617472697857697468496E636F727265637453697A65004942696E61727953657269616C697A6500446573657269616C697A6500496E7374616E63654F660053697A654F66004973416E63657
  3746F724F6600497344657363656E64616E744F660049734F66660073656C66006765745F537472476D6C4D7573744861766556616C6964546167006765745F537472476D6C4D7573744861766553696E676C6554616700666C6167006D5F54657373656C6C6174696F6E436F6E6669670074657373656C6C6174696F6E436F
  6E666967005765724576656E744E616D655365747570436F6E66696700706C616E617254657373436F6E666967006765745F537472506F6C79676F6E52696E674E6F744152696E67006765745F537472506F6C79676F6E496E746572696F7252696E674E6F744152696E67006765745F537472506F6C79676F6E45787465726
  96F7252696E674E6F744152696E67005265616441726352696E6700537461727453696D706C6552696E670052656164437572766552696E67005374617274436F6D706F756E64437572766552696E67006952696E67006765745F537472496E76616C69644F70656E52696E670056616C6964617465506F6C79676F6E52696E
  6700526561644C696E65617252696E670053544E756D496E746572696F7252696E67006765745F4E756D496E746572696F7252696E670053544578746572696F7252696E67006765745F4578746572696F7252696E67006765745F537472496E76616C69644578746572696F7252696E6700417352696E67005354497352696
  E67006765745F537472496E76616C696453706C697452696E67006765745F537472496E76616C6964526564756E64616E7452696E67006765745F43757272656E7452696E67005F63757272656E7452696E6700537461727452696E670053797374656D2E546872656164696E67006556617242696E617279456E636F64696E
  6700785F665370617469616C4D6178436C72417272617953697A6548616E646C696E67006765745F46477261636566756C4F6F6D48616E646C696E6700677261636566756C4F6F6D48616E646C696E670053797374656D2E52756E74696D652E56657273696F6E696E670064697361626C65496E7465726D656469617465466
  96C746572696E67006D5F6644697361626C65496E7465726E616C46696C746572696E670064697361626C65496E7465726E616C46696C746572696E67006D5F526567696F6E466F72496E7465726E616C46696C746572696E67005061727365476D6C417263537472696E67006368446F74746564537472696E670041535573
  6167654D657472696373526F6C6547756964537472696E670053716C456E67696E6555736167654D657472696373526F6C6547756964537472696E670050726F64756374436F64654E616D65537472696E670050726F647563744E616D65537472696E6700426567696E5F4C696E65537472696E6700776B624C696E6553747
  2696E6700426567696E5F4D756C74694C696E65537472696E6700776B624D756C74694C696E65537472696E67005061727365476D6C4C696E65537472696E670041734C696E65537472696E67004C6F6E6750726F647563744E616D654272616E64696E67537472696E670050726F647563744E616D6553686F727463757442
  72616E64696E67537472696E67006765745F4261644F726470617468537472696E670053716C537472696E6700496E697446726F6D537472696E670050726F6475637456657273696F6E537472696E670050726F6475637456657273696F6E4C6F636174696F6E537472696E6700546F537472696E6700426567696E5F43697
  263756C6172537472696E670053696E6B41646443697263756C6172537472696E6700417343697263756C6172537472696E67004765745265736F75726365466F726D6174537472696E6700476574537472696E6700537562737472696E67006765745F4C6F6E67006765745F4F726470617468546F6F4C6F6E67006765745F
  526573756C74546F6F4C6F6E6700466F726D61744572726F724D657373616765446F75626C6541726700466F726D61744572726F724D657373616765446F75626C65537472696E6741726700466F726D61744572726F724D657373616765496E74574368617241726700466F726D61744572726F724D657373616765496E744
  1726700466F726D61744572726F724D657373616765537472696E67496E74496E74417267006765745F537472536574537269644D69736D61746368006765745F537472436F6D706F756E6443757276654D69736D617463680046696E697368005075736800466C757368004D617468004F726450617468006F726450617468
  006765745F4261644F726470617468006F726470617468006D5F57696474680072477269645769647468006772696457696474680063656C6C57696474680047656F646574696354657373656C6C6174696F6E5769647468003C3E335F5F77696474680053544C656E677468006765745F4C656E6774680047656F646574696
  34C656E677468006F72644C656E67746800636F64654C656E67746800627974654C656E67746800746F74616C4C656E677468005F73747265616D4C656E677468004765744C656E67746800436F6D707574654269744C656E677468006D5F75734269744C656E677468006D5F6269744C656E67746800496E74657273656374
  696F6E5061747465726E4D61747269784C656E677468006C656E677468005374617274735769746800785F634D41585F584D4C44545F4465707468006D5F4465707468006347726964446570746800634D696E477269644465707468006D5F43656C6C4465707468004D617847656F6D65747279436F6C6C656374696F6E446
  5707468006342697473466F724465707468006D61784465707468005F64657074680072477269644D696E584E6F7274680072477269644D696E594E6F72746800707472426F6F6C546F75636865644E6F72746800707472426F6F6C416D626967756F75736C79546F75636865644E6F72746800706F696E7465725F616D6269
  67756F75736C79546F75636865644E6F72746800706F696E7465725F746F75636865644E6F72746800707472426F6F6C436F6E7461696E65644E6F72746800706F696E7465725F636F6E7461696E65644E6F727468006E6F7274680072477269644D696E58536F7574680072477269644D696E59536F75746800707472426F6
  F6C546F7563686564536F75746800707472426F6F6C416D626967756F75736C79546F7563686564536F75746800706F696E7465725F616D626967756F75736C79546F7563686564536F75746800706F696E7465725F746F7563686564536F75746800707472426F6F6C436F6E7461696E6564536F75746800706F696E746572
  5F636F6E7461696E6564536F75746800736F757468006543656C6C4C6162656C496E6465784172726179446900666F7263654B61746D616900466967757265417474726962757465734B61746D616900507472546F537472696E67556E6900537472696E67546F436F5461736B4D656D556E69005765724576656E744E616D6
  553657475704D736900736F757263654F626A003C3E335F5F6F626A004173796E6343616C6C6261636B0063616C6C6261636B005F737461636B005065656B005365656B0072616E6B004C6963656E73654C696E6B00466F7277617264696E6747656F4461746153696E6B00436F6F7264696E617465526576657273696E6747
  656F4461746153696E6B0052656F7269656E7453696E6B0047656F6772617068794F757470757453696E6B0047656F6D657472794F757470757453696E6B004947656F67726170687953696E6B004947656F6D6574727953696E6B005F73696E6B004F7264506174684D61726B004641626F76654869676857617465724D617
  26B004642656C6F774C6F7757617465724D61726B004765744D61726B0045535341626F76654869676857617465726D61726B0045535342656C6F774C6F7757617465726D61726B004D61727368616C006F705F477265617465725468616E4F72457175616C006F705F4C6573735468616E4F72457175616C00497345717561
  6C004172654C6F6E67697475646573457175616C00424C6162656C006D5F4C6162656C0050617273654C6162656C006D5F43656C6C4C6162656C004765744368696C6443656C6C4C6162656C0047657443656C6C4C6162656C006D5F56617242696E61727943656C6C4C6162656C0063656C6C4C6162656C0052656D6F76654
  772696446726F6D4C6162656C0052656D6F7665446570746846726F6D4C6162656C004164644465707468546F4C6162656C006C6162656C0053797374656D2E436F6D706F6E656E744D6F64656C0053504C6576656C0064656E73697479466F7245616368477269644C6576656C006D5F4772696444656E73697479466F7245
  6163684C6576656C0053514C3131436F6D7061744C6576656C0049734B61746D6169436F6D7061744C6576656C004765744C6576656C006D5F4D61784C6576656C006D61784C6576656C004D696E4462436F6D7061746962696C6974794C6576656C006765745F53747257726F6E67436F6D7061746962696C6974794C65766
  56C006D5F6C6576656C004D616E61676564446174615574696C004F7264506174685574696C00496E73657274416C6C006765745F537472556E657870656374656443616C6C006765745F537472535443757276654E496E646578546F6F536D616C6C006765745F5374725354496E746572696F7252696E674E496E64657854
  6F6F536D616C6C006765745F5374725354506F696E744E496E646578546F6F536D616C6C006765745F537472535447656F6D657472794E496E646578546F6F536D616C6C0053716C5365727665725370617469616C3136302E646C6C006B65726E656C33322E646C6C004D6963726F736F66742E53716C5365727665722E547
  97065732E646C6C006D5F43656C6C00546F756368656443656C6C005061727469616C6C79436F766572656443656C6C004772696443656C6C0047657443656C6C4C6162656C56617242696E617279466F724368696C6443656C6C00496E736572744368696C6443656C6C0052656475636543656C6C007061727469616C6C79
  436F766572656443616E64696461746543656C6C0063616E64696461746543656C6C00496E746572696F7243656C6C00706172656E7443656C6C00476574526F6F7443656C6C0063656C6C005354436F6E76657848756C6C0047656F6465746963436F6E76657848756C6C00416363756D756C617465466F7247656F6772617
  06879436F6E76657848756C6C00416363756D756C617465466F7247656F6D65747279436F6E76657848756C6C006765745F4E756C6C00664E756C6C006765745F49734E756C6C005F69734E756C6C005468726F774966417267756D656E744E756C6C00736D5F6E756C6C0047656F6D46726F6D476D6C004173476D6C005379
  7374656D2E586D6C0053716C586D6C00786D6C006368696C64436F6C006D5F43656C6C436F6C00665374697463684E6F72746865726E4D696E436F6C00665374697463684E6F72746865726E4D6178436F6C00636F6C006765745F53747265616D005F72656164456E644F6653747265616D005370617469616C54657373656
  C6C6174696F6E4F757470757443656C6C53747265616D006D5F4F757453747265616D0046696C6C4F757453747265616D00447261696E4F757453747265616D004D656D6F727953747265616D005F73747265616D0046726565436F5461736B4D656D006765745F4974656D007365745F4974656D0070617273654974656D00
  53797374656D005472696D0067656F6D00436F707950726F7065727469657346726F6D0066726F6D006D5F696E7665727365436F6E7374616E745465726D0049734F53506C6174666F726D00456E756D0049734F6E007265736F757263654D616E0052656164426F6F6C65616E0053716C426F6F6C65616E006F705F4772656
  17465725468616E006F705F4C6573735468616E0049734C6974746C65456E6469616E006765745F537472556E7265636F676E697A6564546F6B656E005265636F676E697A65546F6B656E005265636F676E697A654F7074696F6E616C546F6B656E0056657273696F6E48656C7053657474696E6773546F6B656E00746F6B65
  6E004D696E0050696E00417070446F6D61696E006765745F43757272656E74446F6D61696E00426567696E005365656B4F726967696E00535457697468696E00786D696E00796D696E004173696E006D5F436F6C756D6E00636F6C756D6E00426567696E5F506F6C79676F6E00776B62506F6C79676F6E006765745F5374724
  96E76616C6964506F6C79676F6E006765745F537472496E76616C6964446567656E6572617465506F6C79676F6E00426567696E5F4375727665506F6C79676F6E00506F70756C6174654375727665506F6C79676F6E00426567696E5F4D756C7469506F6C79676F6E00776B624D756C7469506F6C79676F6E005F696E4D756C
  7469506F6C79676F6E004973506F6C79676F6E005354556E696F6E0047656F6465746963556E696F6E0047656F6465746963436170556E696F6E00535444696D656E73696F6E0047657444696D656E73696F6E006765745F537472556E657870656374656456657273696F6E00737472556E657870656374656456657273696
  F6E004275696C6456657273696F6E004D61784D61696E74656E616E636556657273696F6E0053716C4D616A6F7246696C6556657273696F6E004D706F426173656C696E6552756E74696D6556657273696F6E004D726F426173656C696E6552756E74696D6556657273696F6E0056697375616C53747564696F323031325368
  656C6C56657273696F6E0056697375616C53747564696F5368656C6C56657273696F6E0053657269616C697A6174696F6E56657273696F6E004D616A6F7256657273696F6E004D696E6F7256657273696F6E006D617856657273696F6E00436F6D706C6574656454657373656C6C6174696F6E0052756E74696D65496E666F7
  26D6174696F6E005370617469616C54657373656C6C6174696F6E436F6E66696775726174696F6E00496E76616C6964496E636F6E73697374656E744F7269656E746174696F6E0053797374656D2E476C6F62616C697A6174696F6E0053797374656D2E52756E74696D652E53657269616C697A6174696F6E00536563757269
  7479416374696F6E0054696C656450726F6A656374696F6E00496E766572736550726F6A656374696F6E0053797374656D2E5265666C656374696F6E005370617469616C54657373656C6C6174696F6E52616E6765436F6C6C656374696F6E0049734F70656E47697354797065436F6C6C656374696F6E005374726970546F7
  04C6576656C436F6C6C656374696F6E005F7374726970546F704C6576656C436F6C6C656374696F6E004973436F6C6C656374696F6E00426567696E5F47656F6D65747279436F6C6C656374696F6E00776B6247656F6D65747279436F6C6C656374696F6E006765745F53747246756C6C476C6F626543616E6E6F7442655061
  72744F6647656F6D65747279436F6C6C656374696F6E005F636F6C6C656374696F6E005354496E74657273656374696F6E0047656F6465746963496E74657273656374696F6E005370617469616C54657373656C6C6174696F6E46756E6374696F6E0047656F67726170687954657373656C6C6174696F6E46756E6374696F6
  E0047656F6D6574727954657373656C6C6174696F6E46756E6374696F6E005472616E736974696F6E005F7472616E736974696F6E006765745F506F736974696F6E004869657261726368794964457863657074696F6E004E6F74496D706C656D656E746564457863657074696F6E00506C6174666F726D4E6F74537570706F
  72746564457863657074696F6E0046696C654E6F74466F756E64457863657074696F6E00417267756D656E744F75744F6652616E6765457863657074696F6E00417267756D656E744E756C6C457863657074696F6E00456E644F6653747265616D457863657074696F6E00496E76616C69644F7065726174696F6E457863657
  074696F6E00696E6E6572457863657074696F6E00466F726D6174457863657074696F6E00474C417267756D656E74457863657074696F6E006765745F4F534465736372697074696F6E0063496E6465785265736F6C7574696F6E0052656164436F6D6D6F6E00537472696E67436F6D70617269736F6E0052657475726E0067
  65745F537472496E76616C6964556E6B6E6F776E006765745F537472496E76616C696453706C697452696E67556E6B6E6F776E0047656F646574696353686F72746573744C696E65546F00436F6D70617265546F00456E6447656F00426567696E47656F0067656F0053726964496E666F0043756C74757265496E666F00417
  373656D626C7956657273696F6E496E666F0053657269616C697A6174696F6E496E666F0050726F7065727479496E666F00696E666F005A65726F00746F006C6576656C73557000557064617465436C72466561747572655377697463684D617000536574436C72466561747572655377697463684D617000636C7246656174
  7572655377697463684D6170006765745F537472496E76616C6964456467654F7665726C6170006765745F537472496E76616C696452696E674F7665726C6170006570006D656D636D70004A756D7000506F700067726F757000785F636D704571005468726F77457863657074696F6E466F72487200584F72006F705F42697
  4776973654F7200436C65617200526561644368617200506C616E6172006D656D626572006765745F53747245787065637465644E756D6265720072696E674E756D626572005265616449734172634865616465720052656164486561646572005772697465486561646572005061727365576B6246756C6C476C6F62655769
  74686F7574486561646572005061727365576B62436F6D706F756E644375727665576974686F7574486561646572005061727365576B624C696E65537472696E67576974686F7574486561646572005061727365576B624D756C74694C696E65537472696E67576974686F7574486561646572005061727365576B624369726
  3756C6172537472696E67576974686F7574486561646572005061727365576B62506F6C79676F6E576974686F7574486561646572005061727365576B624375727665506F6C79676F6E576974686F7574486561646572005061727365576B624D756C7469506F6C79676F6E576974686F757448656164657200506172736557
  6B6247656F6D65747279436F6C6C656374696F6E576974686F7574486561646572005061727365576B62506F696E74576974686F7574486561646572005061727365576B624D756C7469506F696E74576974686F75744865616465720047656F6772617068794D61726B75704C616E677561676552656164657200437265617
  46552656164657200586D6C5265616465720057656C6C4B6E6F776E546578745265616465720057656C6C4B6E6F776E42696E61727952656164657200686561646572005F726561646572004572726F724D65737361676550726F76696465720049466F726D617450726F76696465720047656F446174614275696C64657200
  537472696E674275696C6465720053716C47656F6772617068794275696C6465720053716C47656F6D657472794275696C646572005F6275696C646572005365747570537570706F7274466F6C646572004945454552656D61696E646572006765745F4368696C644F7264657200427974654F7264657200627974654F72646
  572006F726465720053544275666665720047656F64657469634275666665720064697374616E63654275666665720053696D706C6542756666657200627566666572006765745F5265736F757263654D616E61676572006F74686572004D656D6F7279426172726965720053797374656D2E436F6465446F6D2E436F6D7069
  6C6572006765745F436F6E7461696E6572005F636F6E7461696E6572005F67636847656F4461746150696E6E6572005F73686170657350696E6E6572005F6669677572657350696E6E6572005F6D76616C75657350696E6E6572005F7A76616C75657350696E6E6572005F7365676D656E747350696E6E6572005F706F696E7
  47350696E6E657200417272617950696E6E6572006765745F537472535452656C617465506173736564496E74657273656374696F6E5061747465726E4D6174726978576974684E6F7456616C69644368617261637465720047656F6772617068794D61726B75704C616E677561676557726974657200537472696E67577269
  74657200586D6C5772697465720057656C6C4B6E6F776E546578745772697465720057656C6C4B6E6F776E42696E617279577269746572005F7772697465720046696C74657200456E74657200456E76656C6F706543656E7465720047656F646574696343617043656E74657200426974436F6E7665727465720049734C657
  47465720049586D6C4E616D6573706163655265736F6C766572004D6963726F736F66742E53716C5365727665722E5365727665720073656D695F6D616A6F720073656D695F6D696E6F7200466C6F6F72004765744C61737457696E33324572726F72006C61737457696E33324572726F72006765745F53747247656E657269
  63574B424572726F72006765745F53747247656E65726963546578744572726F72006765745F537472456D707479546578744572726F720047656F4461746150696E6E696E67416C6C6F6361746F7200726573756C74416C6C6F6361746F720047656F67726170687956616C696461746F720047656F6D6574727956616C696
  461746F72005F76616C696461746F720043757272656E744973446F75626C65536570617261746F720049456E756D657261746F72005370617469616C54657373656C6C6174696F6E456E756D657261746F720053797374656D2E436F6C6C656374696F6E732E47656E657269632E49456E756D657261626C653C5379737465
  6D2E4F626A6563743E2E476574456E756D657261746F720053797374656D2E436F6C6C656374696F6E732E49456E756D657261626C652E476574456E756D657261746F72006D5F656E756D657261746F7200586D6C496447656E657261746F7200416374697661746F72002E63746F72004D6574686F644F70546F496E64657
  84F70507265636973696F6E466163746F7200756E69745F636F6E76657273696F6E5F666163746F72002E6363746F72004D6F6E69746F7200536574546F416E636573746F72006D5F4973416E636573746F72006653656C664973416E636573746F72004765744973416E636573746F72006973416E636573746F7200476574
  416E636573746F7200496E74507472006D5F4543656C6C436F7665726167654174747200735F43616E6469646174654D6F64654368696C6443656C6C417474720063656C6C417474720052656164436F6E74656E744173004162730053797374656D2E446961676E6F73746963730064656E736974794F664772696473006D5
  F546F756368656443656C6C73466F72416C6C4772696473006D5F436F6E7461696E656443656C6C73466F72416C6C4772696473006D5F5061727469616C6C79436F766572656443656C6C73466F72416C6C4772696473006F706572616E6473005365706172617465426F756E647300476574426F756E647300474C4E617469
  76654D6574686F6473006D5F7371727432546869726473006D5F6F726473005370617469616C52657300536B697057686974655370616365730053797374656D2E52756E74696D652E496E7465726F7053657276696365730053797374656D2E52756E74696D652E436F6D70696C657253657276696365730053797374656D2
  E5265736F7572636573004D6963726F736F66742E53716C5365727665722E54797065732E5370617469616C5265732E7265736F7572636573004D6963726F736F66742E53716C5365727665722E54797065732E6F7264706174687265732E7265736F757263657300436F6D62696E654572726F72436F646573004465627567
  67696E674D6F64657300735F746F4465677265657300435374616765730073746167657300536574436C724665617475726553776974636865730044656661756C74436C72466561747572655377697463686573005354546F75636865730053544E756D47656F6D657472696573006765745F4E756D47656F6D65747269657
  30053657269616C697A6174696F6E50726F70657274696573004E756D6265725374796C6573005F616C6C6F776564547970654E616D6573005F616E636573746F72547970654E616D6573006353686170657300436F6E7461696E73437572766564536861706573004973456D707479416E644E6F4368696C64536861706573
  00436F6E7461696E734368696C6453686170657300476574536861706573006D5F73686170657300705F736861706573004D6963726F736F66742E53716C5365727665722E54797065730053797374656D2E446174612E53716C5479706573004F70656E4769735479706573006F726470617468726573006765745F4669677
  572657300634669677572657300506F70756C6174654C696E65466967757265730047657446696775726573006D5F6669677572657300705F66696775726573007061727365506172656E74686573657300535443726F737365730041676772656761746573006765745F537472506F734C6973744861734F6464436F6F7264
  696E61746573006765745F537472506F734D7573744861766554776F436F6F7264696E617465730046696775726541747472696275746573006765745F537472476D6C4D61794E6F7448617665417474726962757465730063656C6C41747472696275746573006765745F48617341747472696275746573006342797465730
  06343656C6C49644279746573005265616442797465730053716C427974657300576F726454776F4279746573007754776F4279746573006D5F627974657300634D56616C756573004861734D56616C756573004765744D56616C75657300635A56616C756573004861735A56616C756573004765745A56616C756573006D5F
  6D56616C75657300705F6D56616C756573006D5F7A56616C75657300705F7A56616C756573006353756243757276657300427566666572576974684375727665730053544E756D4375727665730072657475726E43757276657300735F4772696453697A65730042696E64696E67466C616773006477466C61677300666C616
  773006356616C696447726964436F6E6669677300735F56616C6964697479436F6E66696773006765745F4E756D52696E6773005370617469616C41646170746976654772696453657474696E6773005370617469616C4772696453657474696E6773006765745F5265706172656E74417267730073656D695F6D616A6F725F
  617869730073656D695F6D696E6F725F617869730067656F677261706879436865636B730067656F6D65747279436865636B73006765745F537472496E636F6D70617469626C6547656F67726170687953696E6B73006765745F537472496E636F6D70617469626C6547656F6D6574727953696E6B73005354457175616C730
  047656F6465746963457175616C73006C6162656C73006D5F7061727365644C6576656C730056616C696469747944657461696C73006D5F546F756368656443656C6C730050726F63657373546F756368656443656C6C730066486173416D626967756F7573546F756368656443656C6C73006D5F436F6E7461696E65644365
  6C6C730050726F63657373436F6E7461696E656443656C6C73006D5F5061727469616C6C79436F766572656443656C6C730050726F636573735061727469616C6C79436F766572656443656C6C7300746F74616C43656C6C73006D5F4D61784F757470757443656C6C73006D61784F757470757443656C6C73006F757470757
  443656C6C73006D5F4D617843656C6C73006D617843656C6C73005354436F6E7461696E730047656F6465746963436F6E7461696E73006347726964436F6C756D6E730067726964436F6C756D6E73003C3E335F5F636F6C756D6E73004C697374457874656E73696F6E730053797374656D2E53656375726974792E5065726D
  697373696F6E730053797374656D2E436F6C6C656374696F6E73006F7074696F6E730053544F7665726C6170730047656F64657469634F7665726C6170730043616E526561644E4368617273005065656B4E4368617273006765745F43686172730053716C4368617273005F6368617273006D656D62657273004D6963726F7
  36F66742E53716C5365727665722E54797065732E4953716C5370617469616C47726964496E64657861626C652E476574426F756E64696E67426F78436F726E6572730052756E74696D6548656C7065727300476574456C6C6970736F6964506172616D657465727300656C6C6970736F6964506172616D6574657273006765
  745F4973363442697450726F6365737300546F4D616368696E65456E6469616E6573730041646472657373005354496E74657273656374730047656F6465746963496E7465727365637473006D5F6269744F666673657473005F6F66667365747300417070656E64426974730045436F646542697473005061727365436F646
  5426974730063496E6465785265736F6C7574696F6E4269747300476574426974730062697473006D5F496E636C75646544657363656E64616E747300696E636C75646544657363656E64616E747300436F6E7374616E7473006765745F53747246756C6C476C6F626543616E6E6F7448617665456C656D656E747300635365
  676D656E747300526561645365676D656E7473006D5365676D656E7473004765745365676D656E7473006D5F7365676D656E747300705F7365676D656E7473006D5F737461636B506172656E747300617263506F696E7473006765745F53747243697263756C6172537472696E674E656564735468726565506F696E7473006
  765745F537472476D6C4172634D7573744861766545786163746C795468726565506F696E747300526561644C696E65537472696E67506F696E7473005265616443697263756C6172537472696E67506F696E74730053544E756D506F696E7473006765745F537472436F6D706F756E6443757276654E6565647354776F506F
  696E7473006765745F5374724C696E65537472696E674E6565647354776F506F696E747300476574506F696E7473006765745F537472506F6C79676F6E52696E67486173546F6F466577506F696E7473006765745F5374724C696E65617252696E67486173546F6F466577506F696E7473006765745F537472506F6C79676F6
  E496E746572696F7252696E67486173546F6F466577506F696E7473006765745F537472506F6C79676F6E4578746572696F7252696E67486173546F6F466577506F696E7473006D5F706F696E747300705F706F696E7473005F636F756E747300537269644578697374730045537461747573004553747265616D5374617475
  73006347726964526F77730067726964526F7773006765745F57696E646F7773003C3E335F5F726F77730043726561746541727261797300496E697441727261797300436F7079506F696E74417272617973006973496E636C756465526F6F7443656C6C416C7761797300785F636D70477400785F636D704C74006765745F4
  C617400436F6E636174007768617400466F726D6174006D5F536F757263654F626A65637400736F757263654F626A656374004973546F6F4C61726765556E736166654F626A656374006D5F4973556E736166654F626A656374005F6C6F636B4F626A65637400697353616665526F6F7443656C6C4F626A6563740052656F72
  69656E744F626A6563740067656F6772617068794F626A6563740067656F6D657472794F626A656374006F626A65637400496E766572736550726F6A65637400556E70726F6A656374003C3E335F5F756E70726F6A65637400496E7465727365637400436F6E7374727563740047657400536563757269747952756C6553657
  4006973477261636566756C4F6F6D48616E646C696E67536574005F6973436C72466561747572655377697463684D6170536574006765745F5461726765740053797374656D2E436F6C6C656374696F6E732E49456E756D657261746F722E5265736574006669677572654F6666736574006269744F66667365740070617265
  6E744F666673657400706F696E744F666673657400736F7572636553746172744F66667365740064657374696E6174696F6E53746172744F666673657400664C65667400706F7264706174684C65667400706F7264706174685269676874006D5F486569676874006D5F4772696448656967687400724772696448656967687
  400677269644865696768740063656C6C4865696768740047656F646574696354657373656C6C6174696F6E486569676874003C3E335F5F686569676874007374617274426974006F705F496D706C69636974006F705F4578706C6963697400497344696769740063656C6C49644C696D6974006D5F43656C6C4C6162656C4C
  696D6974004765744368696C6443656C6C4C6162656C4C696D69740047657443656C6C4C6162656C4C696D69740063656C6C4C6162656C4C696D6974004164644465707468546F4C6162656C4C696D6974006D5F72696768744C696D697400536574546F44657363656E64616E744C696D697400497344657363656E64616E7
  44C696D697400496E69740045786974006765745F44656661756C740047657456616C75654F7244656661756C7400474C5F48526573756C74006765745F48526573756C740070726576696F757348526573756C74006765745F526573756C7400494173796E63526573756C7400726573756C740047657444657363656E6461
  6E740064657363656E64616E7400546F5570706572496E76617269616E740052656164456E64456C656D656E74005772697465456E64456C656D656E74004973456E64456C656D656E74005061727365476D6C46756C6C476C6F6265456C656D656E7400497346756C6C476C6F6265456C656D656E74005061727365476D6C5
  2696E67456C656D656E74005061727365476D6C4C696E65617252696E67456C656D656E74005061727365476D6C496E746572696F724C696E65617252696E67456C656D656E74005061727365476D6C4578746572696F724C696E65617252696E67456C656D656E74005061727365476D6C496E746572696F7252696E67456C
  656D656E74005061727365476D6C4578746572696F7252696E67456C656D656E740050617273654D756C74694974656D456C656D656E74004D6F7665546F456C656D656E74005061727365417263476D6C506F73456C656D656E74005061727365476D6C506F73456C656D656E74005061727365476D6C506F696E74456C656
  D656E7400526561645374617274456C656D656E740057726974655374617274456C656D656E740049735374617274456C656D656E74005061727365476D6C506F734C697374456C656D656E7400556E73616665416464724F6650696E6E65644172726179456C656D656E74005265616453746172744F72456D707479456C65
  6D656E74006765745F4973456D707479456C656D656E74005061727365476D6C417263506F696E7450726F7065727479456C656D656E74005061727365476D6C506F696E7450726F7065727479456C656D656E7400656C656D656E7400496E6372656D656E74004164645365676D656E7400497353696E676C654C696E65536
  5676D656E740049734C696E655365676D656E74005374617274696E675365676D656E7400695365676D656E740053746172745365676D656E740073746172745365676D656E7400496E6465784F664C6173745365676D656E7400496E6465784F6646697273745365676D656E740066697273745365676D656E74006D5F6E65
  78745365676D656E7400456E7669726F6E6D656E7400617267756D656E740053436F6D706F6E656E740057726974654F7264436F6D706F6E656E7400457874726163744F7264436F6D706F6E656E74005772697465436F6D706F6E656E740045787472616374436F6D706F6E656E7400636F6D706F6E656E740063656C6C496
  4506172656E7400636964506172656E7400706F726470617468506172656E74006D5F6F6D506172656E7400476574506172656E7400706172656E740053797374656D2E436F6C6C656374696F6E732E47656E657269632E49456E756D657261746F723C53797374656D2E4F626A6563743E2E43757272656E74005379737465
  6D2E436F6C6C656374696F6E732E49456E756D657261746F722E43757272656E740053797374656D2E436F6C6C656374696F6E732E47656E657269632E49456E756D657261746F723C53797374656D2E4F626A6563743E2E6765745F43757272656E740053797374656D2E436F6C6C656374696F6E732E49456E756D6572617
  46F722E6765745F43757272656E74005F706F7374706F6E6543757272656E74006D5F6F72647061746843757272656E74003C3E325F5F63757272656E74004D6F7665546F436F6E74656E740047656F6465746963416E676C65457874656E740047656F646574696354696C656450726F6A656374696F6E457874656E74004D
  696E696D616C427566666572457874656E74006D5F657874656E74004765744E65787455696E7400426567696E5F506F696E7400776B62506F696E7400416464506F696E74006765745F537472496E76616C696449736F6C61746564506F696E74005354456E64506F696E74006765745F456E64506F696E7400497353696E6
  76C65506F696E740056616C6964617465506F696E74005772697465506F696E7400426567696E5F4D756C7469506F696E7400776B624D756C7469506F696E740049735265616C506F696E74006E506F696E74006765745F537472496E76616C6964446567656E657261746573546F506F696E74004765744C6162656C466F72
  506F696E74004765744173506F696E74004973506F696E7400476574506F696E740053545374617274506F696E74006765745F5374617274506F696E74007374617274506F696E7400496E6465784F664C617374506F696E7400526561644669727374506F696E7400496E6465784F664669727374506F696E7400526561644
  E657874506F696E740053544469736A6F696E7400706F696E74006765745F436F756E74004765745368617065436F756E7400476574466967757265436F756E74006D5F43757272656E7443616E646964617465436F756E74005772697465436F756E74006765745F417474726962757465436F756E74005F72696E67436F75
  6E74004765744D56616C756573436F756E74004765745A56616C756573436F756E74004765745365676D656E74436F756E7400476574506F696E74436F756E74005F706F696E74436F756E74006D5F6F7264636F756E74006F705F4C6F676963616C4E6F74006F6C64526F6F740047656F646574696354696C656450726F6A6
  56374696F6E526F6F7400536574546F526F6F74004973526F6F7400476574526F6F74006E6577526F6F74005265636F676E697A654172634F724C696E655374617274004973506F734C6973745374617274005265766572736548696C626572740068696C6265727400496E7365727400436F6E766572740053717274006C61
  7374006465737400537269644C697374005F737269644C697374005061727365417263506F734C697374005061727365506F734C697374006C69737400454F726450617468436F6E7374006669727374006765745F4E65676174697665496E707574006765745F537472556E6578706563746564456E644F66496E707574006
  765745F4E756C6C526566496E707574006765745F4E756C6C496E707574006765745F4E6F6E4E756C6C496E70757400696E707574006D617843656C6C73496E54657373656C6C6174696F6E4F7574707574004D6F76654E657874004765744E6578740053797374656D2E546578740050617273655461676765645465787400
  6D756C74694C696E65537472696E6754616767656454657874006C696E65537472696E6754616767656454657874006D756C7469506F6C79676F6E5461676765645465787400706F6C79676F6E546167676564546578740067656F6D65747279436F6C6C656374696F6E54616767656454657874006D756C7469506F696E745
  461676765645465787400706F696E74546167676564546578740067656F6D6574727954616767656454657874007461676765645465787400506172736554657874005061727365436F6D706F756E6443757276655465787400506172736552696E67546578740050617273654C696E65537472696E67546578740050617273
  654D756C74694C696E65537472696E675465787400506172736543697263756C6172537472696E67546578740053544D4C696E6546726F6D546578740053544C696E6546726F6D5465787400535447656F6D436F6C6C46726F6D5465787400535447656F6D46726F6D546578740053544D506F696E7446726F6D54657874005
  354506F696E7446726F6D546578740047656F67726170687946726F6D546578740053544D506F6C7946726F6D54657874005354506F6C7946726F6D546578740047656F6D6574727946726F6D54657874005061727365506F6C79676F6E546578740050617273654375727665506F6C79676F6E546578740050617273654D75
  6C7469506F6C79676F6E5465787400506172736547656F6D65747279436F6C6C656374696F6E5465787400546F57656C6C4B6E6F776E54657874005354417354657874005061727365506F696E74546578740050617273654D756C7469506F696E74546578740077656C6C5F6B6E6F776E5F746578740053747265616D696E6
  7436F6E74657874005F636F6E7465787400750047656F6465746963436170556E696F6E5072697600506F70756C617465526177006D5F526F77006368696C64526F77006D5F43656C6C526F770046696C6C526F7700665374697463684E6F72746865726E4D696E526F7700665374697463684E6F72746865726E4D6178526F
  770046517565727957696E646F77006765745F5374724E657374696E674F766572666C6F7700726F77004C6F61644C6962726172794578004D61780055736573424E4653796E74617800557365734578616D706C6553796E74617800695368617065496E6465780069466967757265496E646578006D5F706172656E7442697
  44C656E677468496E646578005F63757272656E74496E646578005F6E657874496E6465780053716C496E7374616E63654944507265666978004173496E7374616E63654944507265666978005273496E7374616E63654944507265666978006765745F5072656669780056657273696F6E48656C704B6579776F7264507265
  6669780057726974654E616D6573706163655072656669780046696C6556657273696F6E53756666697800476574496E74657273656374696F6E5061747465726E4D617472697800696E74657273656374696F6E5061747465726E4D617472697800437265617465426F78006765745F537472496E76616C6964426F756E646
  96E67426F78006765745F50696E6E6564417272617900416464726573734F6650696E6E6564417272617900554C6F6E67546F42797465417272617900496E697469616C697A654172726179005F676368417272617900546F4172726179006772696444656E7369747941727261790045535350726F63657373537465616479
  00436F6E7461696E734B657900776B6247656F677261706879006765745F436F6E737472756374656447656F67726170687900456E6447656F6772617068790053716C47656F67726170687900426567696E47656F67726170687900697347656F677261706879005F696E7665727447656F6772617068790067656F6772617
  06879006765745F417373656D626C79006F7900436F7079005354426F756E6461727900506172736554686542696E6172790047656F67726170687946726F6D42696E6172790047656F6D6574727946726F6D42696E61727900546F57656C6C4B6E6F776E42696E6172790047657443656C6C4C6162656C56617242696E6172
  79005354417342696E6172790047657442696E6172790062696E617279004D6963726F736F66742E53716C5365727665722E54797065732E4953716C5370617469616C47726964496E64657861626C652E427566666572466F7244697374616E63655175657279004D6963726F736F66742E53716C5365727665722E5479706
  5732E4953716C5370617469616C47726964496E64657861626C652E496E746572696F72427566666572466F7244697374616E636551756572790050726F6475637455706461746543617465676F727900436F70794D656D6F7279006765745F47656F6D6574727900776B6247656F6D6574727900616C6C6F63617465644765
  6F6D65747279006765745F436F6E737472756374656447656F6D657472790041734368696C6447656F6D6574727900456E6447656F6D6574727900496E6465784F664C61737453686170654F6647656F6D65747279005061727365476D6C47656F6D657472790053716C47656F6D6574727900416C6C6F63416E6450696E476
  56F6D6574727900426567696E47656F6D6574727900417347656F6D65747279006953686170654F66537461727447656F6D6574727900496E6465784F6653686170654F664E65787447656F6D65747279005265636F676E697A65456D70747947656F6D65747279005F67656F6D65747279006765745F537472496E76616C69
  64456E74727900656E747279006765745F4361706163697479007365745F4361706163697479004765744D6178436170616369747900476574456363656E7472696369747900656363656E747269636974790043617264696E616C6974790063617264696E616C697479006F705F457175616C697479006F705F496E6571756
  16C697479004973496E66696E6974790053797374656D2E536563757269747900454772696444656E736974790055734772696444656E73697479006772696444656E73697479004964656E74697479005374726970456D707479005F7374726970456D7074790049734E756C6C4F72456D7074790053544973456D70747900
  6765745F4973456D707479006765745F537472506F734C6973744973456D70747900616C6C6F77456D7074790047657450726F706572747900416464506F696E7450726F706572747900656E61626C6546757A7A004655736546757A7A0075736546757A7A000013470065006F0067007200610070006800790000114700650
  06F006D006500740072007900000B50006F0069006E007400000770006F00730000154C0069006E00650053007400720069006E006700000F70006F0073004C00690073007400000F50006F006C00790067006F006E0000154D0075006C007400690050006F0069006E007400001970006F0069006E0074004D0065006D0062
  0065007200730000154D0075006C0074006900430075007200760065000019630075007200760065004D0065006D00620065007200730000194D0075006C00740069005300750072006600610063006500001D73007500720066006100630065004D0065006D006200650072007300001B4D0075006C0074006900470065006
  F006D006500740072007900001F670065006F006D0065007400720079004D0065006D0062006500720073000013460075006C006C0047006C006F0062006500006B68007400740070003A002F002F0073006300680065006D00610073002E006D006900630072006F0073006F00660074002E0063006F006D002F0073007100
  6C007300650072007600650072002F0032003000310031002F00670065006F00670072006100700068007900001341007200630053007400720069006E006700001D43006F006D0070006F00730069007400650043007500720076006500001950006F006C00790067006F006E0050006100740063006800001169006E00740
  06500720069006F00720000116500780074006500720069006F00720000154C0069006E00650061007200520069006E006700000320000017630075007200760065004D0065006D006200650072000009520069006E006700003568007400740070003A002F002F007700770077002E006F00700065006E006700690073002E
  006E00650074002F0067006D006C00000B78006D006C006E0073000007410072006300001B70006F0069006E007400500072006F0070006500720074007900001770006F0069006E0074004D0065006D00620065007200001B73007500720066006100630065004D0065006D00620065007200001D670065006F006D0065007
  400720079004D0065006D0062006500720000077800380036000007780036003400002F530071006C005300650072007600650072005300700061007400690061006C003100360030002E0064006C006C00002F7B0030007D0020002800480052006500730075006C0074003A002000300078007B0031003A00780038007D00
  290000137B0030007D0020002D0020007B0031007D00010B50004F0049004E00540000154C0049004E00450053005400520049004E004700000F50004F004C00590047004F004E0000154D0055004C005400490050004F0049004E005400001F4D0055004C00540049004C0049004E00450053005400520049004E004700001
  94D0055004C005400490050004F004C00590047004F004E000025470045004F004D00450054005200590043004F004C004C0045004300540049004F004E00001D430049005200430055004C004100520053005400520049004E004700001B43004F004D0050004F0055004E0044004300550052005600450000194300550052
  005600450050004F004C00590047004F004E000013460055004C004C0047004C004F00420045000001000778006D006C0000094E0075006C006C00000373000027670065006F006700720061007000680079005400610067006700650064005400650078007400001977006B006200470065006F00670072006100700068007
  900000347000011640069007300740061006E006300650000115300540042007500660066006500720000036E00001374006F006C006500720061006E00630065000019670065006F006D00650074007200790054007900700065000027420075006600660065007200570069007400680054006F006C006500720061006E00
  6300650000214200750066006600650072005700690074006800430075007200760065007300002763006F006D007000610074006900620069006C006900740079005F006C006500760065006C00002D63006C0072005F0066006500610074007500720065005F007300770069007400630068005F006D0061007000000B430
  07500720076006500000F5300750072006600610063006500001F4D0075006C00740069004C0069006E00650053007400720069006E00670000194D0075006C007400690050006F006C00790067006F006E000025470065006F006D00650074007200790043006F006C006C0065006300740069006F006E00001D4300690072
  00630075006C006100720053007400720069006E006700001B43006F006D0070006F0075006E0064004300750072007600650000194300750072007600650050006F006C00790067006F006E00001943006F006D0070006F0075006E00430075007200760065000025670065006F006D0065007400720079005400610067006
  700650064005400650078007400001F70006F0069006E007400540061006700670065006400540065007800740000296C0069006E00650053007400720069006E0067005400610067006700650064005400650078007400002370006F006C00790067006F006E00540061006700670065006400540065007800740000296D00
  75006C007400690050006F0069006E007400540061006700670065006400540065007800740000336D0075006C00740069004C0069006E00650053007400720069006E0067005400610067006700650064005400650078007400002D6D0075006C007400690050006F006C00790067006F006E0054006100670067006500640
  054006500780074000039670065006F006D00650074007200790043006F006C006C0065006300740069006F006E005400610067006700650064005400650078007400001777006B006200470065006F006D006500740072007900001177006B00620050006F0069006E007400001B77006B0062004C0069006E006500530074
  00720069006E006700001577006B00620050006F006C00790067006F006E00001B77006B0062004D0075006C007400690050006F0069006E007400002577006B0062004D0075006C00740069004C0069006E00650053007400720069006E006700001F77006B0062004D0075006C007400690050006F006C00790067006F006
  E00002B77006B006200470065006F006D00650074007200790043006F006C006C0065006300740069006F006E000009450050005300470000811F470045004F004700430053005B00220047007200650065006B0022002C00200044004100540055004D005B00220047007200650065006B0022002C00200045004C004C0049
  00500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006
  9006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00000B6D006500740072006500008155470045004F004700430053005B00220047004700520053
  003800370022002C00200044004100540055004D005B00220047007200650065006B002000470065006F006400650074006900630020005200650066006500720065006E00630065002000530079007300740065006D002000310039003800370022002C00200045004C004C004900500053004F00490044005B00220047005
  20053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0049005400
  5B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000816B470045004F004700430053005B0022004100540053003700370022002C00200044004100540055004D005B002200410076006500720061006700650020005
  4006500720072006500730074007200690061006C002000530079007300740065006D002000310039003700370022002C00200045004C004C004900500053004F00490044005B0022004100760065007200610067006500200054006500720072006500730074007200690061006C002000530079007300740065006D002000
  310039003700370022002C00200036003300370038003100330035002C0020003200390038002E003200350037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720065006500220
  02C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008153470045004F004700430053005B0022004B004B004A0022002C00200044004100540055004D005B0022004B006100720074006100730074006F006B006F006F007200640069006E006100610074007400
  69006A00610072006A0065007300740065006C006D006100200028003100390036003600290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C002000320
  0390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D
  005D00008149470045004F004700430053005B002200520054003900300022002C00200044004100540055004D005B002200520069006B0065007400730020006B006F006F007200640069006E0061007400730079007300740065006D002000310039003900300022002C00200045004C004C004900500053004F004900440
  05B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C0020
  0030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B002200540065007400650022002C00200044004100540055004D005B002200540
  065007400650022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C002000500052
  0049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430
  053005B0022004D00610064007A0061006E0073007500610022002C00200044004100540055004D005B0022004D00610064007A0061006E0073007500610022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C002000360033003700380032
  00300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002
  C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B0022004F0062007300650072007600610074006100720069006F0022002C00200044004100540055004D005B0022004F0062007300650072007600610074006100720069
  006F0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004
  D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B
  0022004D006F007A006E006500740022002C00200044004100540055004D005B0022004D006F007A006E006500740020002800490054005200460039003400290022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C002
  0003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500
  330032003900320035003100390039003400330033005D005D00008157470045004F004700430053005B00220049006E006400690061006E002000310039003600300022002C00200044004100540055004D005B00220049006E006400690061006E002000310039003600300022002C00200045004C004C004900500053004
  F00490044005B0022004500760065007200650073007400200031003800330030002000280031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300370037003200370036002E003300340035002C0020003300300030002E0038003000310037005D005D002C0020005000
  520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008137470045004F0047004
  30053005B002200460044003500380022002C00200044004100540055004D005B002200460069006E0061006C00200044006100740075006D002000310039003500380022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300
  290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650
  022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004500530054003900320022002C00200044004100540055004D005B0022004500730074006F006E00690061002000310039003900320022002C0020004500
  4C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680
  022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B002200500044004F00200053007500720076006500790020004400
  6100740075006D002000310039003900330022002C00200044004100540055004D005B002200500044004F002000530075007200760065007900200044006100740075006D002000310039003900330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380
  0300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022
  0044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B0022004F006C006400200048006100770061006900690061006E0022002C00200044004100540055004D005B0022004F006C00640
  0200048006100770061006900690061006E0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038
  005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000
  0815D470045004F004700430053005B002200530074002E0020004C0061007700720065006E00630065002000490073006C0061006E00640022002C00200044004100540055004D005B002200530074002E0020004C0061007700720065006E00630065002000490073006C0061006E00640022002C00200045004C004C0049
  00500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B0022004700720065006
  5006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B002200530074002E0020005000610075
  006C002000490073006C0061006E00640022002C00200044004100540055004D005B002200530074002E0020005000610075006C002000490073006C0061006E00640022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C002000360033003
  70038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500
  650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008155470045004F004700430053005B002200530074002E002000470065006F007200670065002000490073006C0061006E00640022002C00200044004100540055004D005B002200530074002E002
  000470065006F007200670065002000490073006C0061006E00640022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200
  310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039003900340
  0330033005D005D0000813D470045004F004700430053005B002200500075006500720074006F0020005200690063006F0022002C00200044004100540055004D005B002200500075006500720074006F0020005200690063006F0022002C00200045004C004C004900500053004F00490044005B00220043006C0061007200
  6B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C0
  0200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008119470045004F004700430053005B002200490073007200610065006C0022002C00200044004100540055004D005B00220049007300
  7200610065006C0022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B002200470
  07200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B0022004C006F0063006F00
  64006A006F002000310039003600350022002C00200044004100540055004D005B0022004C006F0063006F0064006A006F002000310039003600350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200
  036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030
  002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B00220041006200690064006A0061006E002000310039003800370022002C00200044004100540055004D005B00220041006200690064006A0061006E0020003100390038003700220
  02C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B
  00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B0022004B00610
  06C00690061006E007000750072002000310039003300370022002C00200044004100540055004D005B0022004B0061006C00690061006E007000750072002000310039003300370022002C00200045004C004C004900500053004F00490044005B002200450076006500720065007300740020003100380033003000200028
  0031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300370037003200370036002E003300340035002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002
  00030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008169470045004F004700430053005B0022004B0061006C00690061006E007000750072002000310039003600320022
  002C00200044004100540055004D005B0022004B0061006C00690061006E007000750072002000310039003600320022002C00200045004C004C004900500053004F00490044005B002200450076006500720065007300740020003100380033003000200028003100390036003200200044006500660069006E00690074006
  9006F006E00290022002C00200036003300370037003300300031002E003200340033002C0020003300300030002E0038003000310037003200350035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00
  220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008169470045004F004700430053005B0022004B0061006C00690061006E007000750072002000310039003700350022002C00200044004100540055004D005B0022004
  B0061006C00690061006E007000750072002000310039003700350022002C00200045004C004C004900500053004F00490044005B002200450076006500720065007300740020003100380033003000200028003100390037003500200044006500660069006E006900740069006F006E00290022002C002000360033003700
  37003200390039002E003100350031002C0020003300300030002E0038003000310037003200350035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200
  030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B002200480061006E006F0069002000310039003700320022002C00200044004100540055004D005B002200480061006E006F0069002000310039003700320022002C0020004500
  4C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063006800220
  02C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200480061007200740065006200650065007300740068006F006500
  6B003900340022002C00200044004100540055004D005B002200480061007200740065006200650065007300740068006F0065006B003900340022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C00200032003900380
  02E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032
  0035003100390039003400330033005D005D00008123470045004F004700430053005B00220043004800310039003000330022002C00200044004100540055004D005B00220043004800310039003000330022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C0020003100380
  03400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044
  006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B0022004300480031003900300033002B0022002C00200044004100540055004D005B0022004300480031003900300033002B0022002C0
  0200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B002200470072
  00650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815B470045004F004700430053005B0022004300480054005200460
  03900350022002C00200044004100540055004D005B00220053007700690073007300200054006500720072006500730074007200690061006C0020005200650066006500720065006E006300650020004600720061006D0065002000310039003900350022002C00200045004C004C004900500053004F00490044005B0022
  004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E004
  90054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B0022004E00410044003800330028004800410052004E00290022002C00200044004100540055004D005B0022004E
  004100440038003300200028004800690067006800200041006300630075007200610063007900200052006500670069006F006E0061006C0020004E006500740077006F0072006B00290022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003
  300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002000
  30002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B0022005200610073007300610064006900720061006E0022002C00200044004100540055004D005B0022005200610073007300610064006900720061006E0022002C00200045004
  C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063006800
  22002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B002200450044003500300028004500440037003700290022002C002
  00044004100540055004D005B0022004500750072006F007000650061006E00200044006100740075006D002000310039003500300028003100390037003700290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200
  340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370
  034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B0022004400610062006F006C0061002000310039003800310022002C00200044004100540055004D005B0022004400610062006F006C0061002000310039003800310022002C00200045004C004C004900
  500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D0
  05B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008169470045004F004700430053005B0022005300
  2D004A00540053004B0022002C00200044004100540055004D005B0022004A00650064006E006F0074006E006500200054007200690067006F006E006F006D00650074007200690063006B0065002000530069007400650020004B0061007400610073007400720061006C006E00690022002C00200045004C004C004900500
  053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063
  00680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0001814F470045004F004700430053005B0022004D006F0075006E0074002000440069006C006C006F0
  06E0022002C00200044004100540055004D005B0022004D006F0075006E0074002000440069006C006C006F006E0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003500380022002C00200036003300370038003200390033002E00360034003500320030
  003800370036002C0020003200390034002E003200360030003600370036003300360039003200360031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002
  00030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00001B43006C00610072006B00650027007300200066006F006F007400018135470045004F004700430053005B0022004E00610070006100720069006D0061002000310039003500350022002C00200044004100540055
  004D005B0022004E00610070006100720069006D0061002000310039003500350022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005
  D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000081
  3F470045004F004700430053005B00220045004C0044003700390022002C00200044004100540055004D005B0022004500750072006F007000650061006E0020004C0069006200790061006E00200044006100740075006D002000310039003700390022002C00200045004C004C004900500053004F00490044005B0022004
  9006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E004900
  54005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200430068006F00730020004D0061006C0061006C002000310039003100340022002C00200044004100540055004
  D005B002200430068006F00730020004D0061006C0061006C002000310039003100340022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C00200032003900
  37005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0
  0008149470045004F004700430053005B002200500061006D00700061002000640065006C002000430061007300740069006C006C006F0022002C00200044004100540055004D005B002200500061006D00700061002000640065006C002000430061007300740069006C006C006F0022002C00200045004C004C0049005000
  53004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002000300
  05D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B0022004B006F007200650061006E002000310039003800350022002C00200044004100
  540055004D005B0022004B006F007200650061006E00200044006100740075006D002000310039003800350022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C002000320
  0390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032
  0035003100390039003400330033005D005D0000815B470045004F004700430053005B002200590065006D0065006E0020004E0047004E003900360022002C00200044004100540055004D005B002200590065006D0065006E0020004E006100740069006F006E0061006C002000470065006F0064006500740069006300200
  04E006500740077006F0072006B002000310039003900360022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049
  004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812B470045004F0047004300530
  05B00220053006F007500740068002000590065006D0065006E0022002C00200044004100540055004D005B00220053006F007500740068002000590065006D0065006E0022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022
  002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003
  70034003500330032003900320035003100390039003400330033005D005D00008119470045004F004700430053005B00220042006900730073006100750022002C00200044004100540055004D005B00220042006900730073006100750022002C00200045004C004C004900500053004F00490044005B00220049006E0074
  00650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002
  20044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004B006F007200650061006E002000310039003900350022002C00200044004100540055004D005B0022004B006F00720065
  0061006E00200044006100740075006D002000310039003900350022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C00200050005
  20049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F00470043
  0053005B0022004E005A0047004400320030003000300022002C00200044004100540055004D005B0022004E006500770020005A00650061006C0061006E0064002000470065006F0064006500740069006300200044006100740075006D002000320030003000300022002C00200045004C004C004900500053004F0049004
  4005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C002000
  55004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008105470045004F004700430053005B0022004100630063007200610022002C00200044004100540055004D005B00220041006300630072006
  10022002C00200045004C004C004900500053004F00490044005B00220057006100720020004F006600660069006300650022002C00200036003300370038003300300030002C0020003200390036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002000
  30005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815D470045004F004700430053005B00220041006D00650072006900630061006E002000530061006D006F00610020003
  10039003600320022002C00200044004100540055004D005B00220041006D00650072006900630061006E002000530061006D006F0061002000310039003600320022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C002000360033003700
  38003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650
  022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008183470045004F004700430053005B00220053004900520047004100530022002C00200044004100540055004D005B002200530069007300740065006D00610020006400650020005200650066006500
  720065006E006300690061002000470065006F00630065006E0074007200690063006F0020007000610072006100200041006D00650072006900630061002000640065006C0020005300750072002000310039003900350022002C00200045004C004C004900500053004F00490044005B00220047005200530020003100390
  03800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067
  0072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B0022005200470046003900330022002C00200044004100540055004D005B0022005200650073006500610075002000470065006F0064006500730
  0690071007500650020004600720061006E0063006100690073002000310039003900330022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E00320035003700320032003200310030
  0031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005
  D00008121470045004F004700430053005B0022004900520045004E00450054003900350022002C00200044004100540055004D005B0022004900520045004E00450054003900350022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C0020003600330037
  0038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002
  E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B00220053006900650072007200610020004C0065006F006E0065002000310039003200340022002C00200044004100540055004D005B00220053006900650072007200610020004C0065
  006F006E006500200043006F006C006F006E0079002000310039003200340022002C00200045004C004C004900500053004F00490044005B00220057006100720020004F006600660069006300650022002C00200036003300370038003300300030002C0020003200390036005D005D002C0020005000520049004D0045004
  D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008153470045004F004700430053005B00220053
  006900650072007200610020004C0065006F006E0065002000310039003600380022002C00200044004100540055004D005B00220053006900650072007200610020004C0065006F006E0065002000310039003600380022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002
  000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00
  490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008167470045004F004700430053005B0022004100750073007400720061006C00690061006E00200041006E00740061007200630074006900630022002
  C00200044004100540055004D005B0022004100750073007400720061006C00690061006E00200041006E007400610072006300740069006300200044006100740075006D002000310039003900380022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00
  200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720065006500220
  02C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200500075006C006B006F0076006F0020003100390034003200280038003300290022002C00200044004100540055004D005B002200500075006C006B006F007600
  6F00200031003900340032002F003800330022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D00450
  04D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200
  500075006C006B006F0076006F0020003100390034003200280035003800290022002C00200044004100540055004D005B002200500075006C006B006F0076006F00200031003900340032002F003500380022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0
  079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022
  002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004500530054003900370022002C00200044004100540055004D005B0022004500730074006F006E00690061002000310039003900370022002C00200045004C0
  04C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022
  002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004C007500780065006D0062006F0075007200670020003100390
  03300300022002C00200044004100540055004D005B0022004C007500780065006D0062006F007500720067002000310039003300300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C002000360033
  00370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003
  20035003100390039003400330033005D005D00008169470045004F004700430053005B00220041007A006F0072006500730020004F00630063006900640065006E00740061006C002000310039003300390022002C00200044004100540055004D005B00220041007A006F0072006500730020004F00630063006900640065
  006E00740061006C002000490073006C0061006E00640073002000310039003300390022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C002000320039003
  7005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00
  00815D470045004F004700430053005B00220041007A006F007200650073002000430065006E007400720061006C002000310039003400380022002C00200044004100540055004D005B00220041007A006F007200650073002000430065006E007400720061006C002000490073006C0061006E00640073002000310039003
  400380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B002200470072006500
  65006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008161470045004F004700430053005B00220041007A006F007200650073002
  0004F007200690065006E00740061006C002000310039003400300022002C00200044004100540055004D005B00220041007A006F0072006500730020004F007200690065006E00740061006C002000490073006C0061006E00640073002000310039003400300022002C00200045004C004C004900500053004F0049004400
  5B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C002000550
  04E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812B470045004F004700430053005B0022004F0053004E0049002000310039003500320022002C00200044004100540055004D005B0022004F00
  53004E0049002000310039003500320022002C00200045004C004C004900500053004F00490044005B00220041006900720079002000310038003300300022002C00200036003300370037003500360033002E003300390036002C0020003200390039002E0033003200340039003600340036005D005D002C0020005000520
  049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F0047004300
  53005B002200520045004700560045004E0022002C00200044004100540055004D005B0022005200650064002000470065006F006400650073006900630061002000560065006E0065007A006F006C0061006E00610022002C00200045004C004C004900500053004F00490044005B002200470052005300200031003900380
  0300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072
  006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815D470045004F004700430053005B00220050004F00530047004100520020003900380022002C00200044004100540055004D005B00220050006F0073006900630069006F006E006500730
  02000470065006F006400650073006900630061007300200041007200670065006E00740069006E00610073002000310039003900380022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038
  002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003
  20035003100390039003400330033005D005D00008133470045004F004700430053005B00220041006C00620061006E00690061006E002000310039003800370022002C00200044004100540055004D005B00220041006C00620061006E00690061006E002000310039003800370022002C00200045004C004C004900500053
  004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002
  C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B00220044006F00750061006C0061002000310039003400380022002C00200044004100540055
  004D005B00220044006F00750061006C0061002000310039003400380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002
  C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045
  004F004700430053005B0022004D0061006E006F00630061002000310039003600320022002C00200044004100540055004D005B0022004D0061006E006F00630061002000310039003600320022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380030002
  0002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C002000
  55004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B00220051006F0072006E006F0071002000310039003200370022002C00200044004100540055004D005
  B00220051006F0072006E006F0071002000310039003200370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C002000
  5000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F004
  700430053005B002200530063006F0072006500730062007900730075006E0064002000310039003500320022002C00200044004100540055004D005B002200530063006F0072006500730062007900730075006E0064002000310039003500320022002C00200045004C004C004900500053004F00490044005B0022004900
  6E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E004900540
  05B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B00220041006D006D0061007300730061006C0069006B002000310039003500380022002C00200044004100540055004D00
  5B00220041006D006D0061007300730061006C0069006B002000310039003500380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C00200032003900370
  05D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000
  8127470045004F004700430053005B0022004700610072006F007500610022002C00200044004100540055004D005B0022004700610072006F007500610022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C0
  0200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C0020
  0030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B0022004B006F0075007300730065007200690022002C00200044004100540055004D005B0022004B006F0075007300730065007200690022002C00200045004C004C004900500
  053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077
  0069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B00220045006700790070007400200031003900330
  0300022002C00200044004100540055004D005B002200450067007900700074002000310039003300300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C
  0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200350031003900390034003
  30033005D005D0000812F470045004F004700430053005B002200500075006C006B006F0076006F002000310039003900350022002C00200044004100540055004D005B002200500075006C006B006F0076006F002000310039003900350022002C00200045004C004C004900500053004F00490044005B0022004B00720061
  00730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004
  4006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812B470045004F004700430053005B0022004100640069006E00640061006E0022002C00200044004100540055004D005B0022004100640069006E00640061006E0022002C
  00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B002
  20047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008161470045004F004700430053005B0022004100470044
  003600360022002C00200044004100540055004D005B0022004100750073007400720061006C00690061006E002000470065006F0064006500740069006300200044006100740075006D002000310039003600360022002C00200045004C004C004900500053004F00490044005B0022004100750073007400720061006C006
  90061006E0020004E006100740069006F006E0061006C002000530070006800650072006F006900640022002C00200036003300370038003100360030002C0020003200390038002E00320035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C0020003000
  5D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008161470045004F004700430053005B0022004100470044003800340022002C00200044004100540055004D005B00220041007
  50073007400720061006C00690061006E002000470065006F0064006500740069006300200044006100740075006D002000310039003800340022002C00200045004C004C004900500053004F00490044005B0022004100750073007400720061006C00690061006E0020004E006100740069006F006E0061006C0020005300
  70006800650072006F006900640022002C00200036003300370038003100360030002C0020003200390038002E00320035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007200650
  0650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008133470045004F004700430053005B002200410069006E00200065006C00200041006200640022002C00200044004100540055004D005B002200410069006E00200065006C002000410062006400
  2000310039003700300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220
  047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000811B470045004F004700430053005B002200410066006700
  6F006F007900650022002C00200044004100540055004D005B0022004100660067006F006F007900650022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390
  038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033
  005D005D00008135470045004F004700430053005B002200410067006100640065007A0022002C00200044004100540055004D005B002200410067006100640065007A0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E0
  0290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B
  00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004C006900730062006F006E0022002C00200044004100540055004D005B0022004C006900730062006F006E002000310
  039003300370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B002200470072
  00650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008115470045004F004700430053005B0022004100720061007400750
  022002C00200044004100540055004D005B0022004100720061007400750022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D
  002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008137470
  045004F004700430053005B0022004100720063002000310039003500300022002C00200044004100540055004D005B0022004100720063002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380030002000280041007200630029
  0022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E0034003600360033003000370037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006
  70072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B0022004100720063002000310039003600300022002C00200044004100540055004D005B0022004100720063002000310039003600300022002C
  00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B002
  20047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B0022004200610074
  00610076006900610022002C00200044004100540055004D005B002200420061007400610076006900610022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C00200032003
  90039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200
  35003100390039003400330033005D005D00008143470045004F004700430053005B0022004200610072006200610064006F0073002000310039003300380022002C00200044004100540055004D005B0022004200610072006200610064006F0073002000310039003300380022002C00200045004C004C004900500053004
  F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B00220042006500640075006100720061006D0022002C002
  00044004100540055004D005B00220042006500640075006100720061006D0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C002000320039003300
  2E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330
  032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B0022004200650069006A0069006E0067002000310039003500340022002C00200044004100540055004D005B0022004200650069006A0069006E0067002000310039003500340022002C00200045004C004C0049005000
  53004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D0
  02C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B002200420065006C00670065002000310039003500300022002C0020004400410054005500
  4D005B00220052006500730065006100750020004E006100740069006F006E0061006C002000420065006C00670065002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200
  036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032
  003900320035003100390039003400330033005D005D00008141470045004F004700430053005B0022004200650072006D007500640061002000310039003500370022002C00200044004100540055004D005B0022004200650072006D007500640061002000310039003500370022002C00200045004C004C0049005000530
  04F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077
  0069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B00220042006F0067006F007400610020003100390
  03700350022002C00200044004100540055004D005B00220042006F0067006F00740061002000310039003700350022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C0020003600330037003800330038
  0038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039003
  9003400330033005D005D0000813B470045004F004700430053005B002200420075006B00690074002000520069006D0070006100680022002C00200044004100540055004D005B002200420075006B00690074002000520069006D0070006100680022002C00200045004C004C004900500053004F00490044005B00220042
  0065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002
  C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B002200430061006D006100630075007000610022002C00200044004100540055004D005B0022
  00430061006D006100630075007000610022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005
  D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D47
  0045004F004700430053005B002200430061006D0070006F00200049006E00630068006100750073007000650022002C00200044004100540055004D005B002200430061006D0070006F00200049006E00630068006100750073007000650022002C00200045004C004C004900500053004F00490044005B00220049006E007
  400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00
  220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B002200430061007000650022002C00200044004100540055004D005B002200430061007000650022002C00200045004C004C004
  900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800410072006300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E0034003600360033003000370037005D005D002C0020005000520049004D0045004D005B002200
  47007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004300610072007
  400680061006700650022002C00200044004100540055004D005B0022004300610072007400680061006700650022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C0020003600330037003800320034003900
  2E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002000300
  02E0030003100370034003500330032003900320035003100390039003400330033005D005D00008111470045004F004700430053005B002200430068007500610022002C00200044004100540055004D005B002200430068007500610022002C00200045004C004C004900500053004F00490044005B00220049006E007400
  650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220
  044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F004700430053005B00220043006F0072007200650067006F00200041006C00650067007200650022002C00200044004100540055004D005B0022004300
  6F0072007200650067006F00200041006C00650067007200650022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C00200
  05000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F00
  4700430053005B0022004400650069007200200065007A0020005A006F00720022002C00200044004100540055004D005B0022004400650069007200200065007A0020005A006F00720022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380030002000280
  0490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E
  00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B002200450067007900700074002000310039003000370022002C00200044004100540055004D005B002200450
  067007900700074002000310039003000370022002C00200045004C004C004900500053004F00490044005B002200480065006C006D006500720074002000310039003000360022002C00200036003300370038003200300030002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B0022
  0047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B00220045004400350
  0300022002C00200044004100540055004D005B0022004500750072006F007000650061006E00200044006100740075006D002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C
  00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003
  30032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B002200450044003800370022002C00200044004100540055004D005B0022004500750072006F007000650061006E00200044006100740075006D002000310039003800370022002C00200045004C004C004900500053
  004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005
  D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004600610068007500640022002C00200044004100540055004D005B002200460061
  0068007500640022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C002000500052004
  9004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053
  005B00220048007500200054007A00750020005300680061006E0022002C00200044004100540055004D005B00220048007500200054007A00750020005300680061006E0022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C00200031003
  9003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000
  3100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B002200480044003700320022002C00200044004100540055004D005B002200480075006E00670061007200690061006E00200044006100740075006D002000310039003700320022002C0020004
  5004C004C004900500053004F00490044005B0022004700520053002000310039003600370022002C00200036003300370038003100360030002C0020003200390038002E003200340037003100360037003400320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300
  680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B002200490044003700340022002C00200044004100540055004
  D005B00220049006E0064006F006E0065007300690061006E00200044006100740075006D002000310039003700340022002C00200045004C004C004900500053004F00490044005B00220049006E0064006F006E0065007300690061006E0020004E006100740069006F006E0061006C002000530070006800650072006F00
  6900640022002C00200036003300370038003100360030002C0020003200390038002E003200340037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200
  030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008157470045004F004700430053005B00220049006E006400690061006E002000310039003500340022002C00200044004100540055004D005B00220049006E006400690061006E002000310039003500340022002C00
  200045004C004C004900500053004F00490044005B0022004500760065007200650073007400200031003800330030002000280031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300370037003200370036002E003300340035002C0020003300300030002E003800300
  0310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D
  005D00008157470045004F004700430053005B00220049006E006400690061006E002000310039003700350022002C00200044004100540055004D005B00220049006E006400690061006E002000310039003700350022002C00200045004C004C004900500053004F00490044005B002200450076006500720065007300740
  0200031003800330030002000280031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300370037003200370036002E003300340035002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E
  00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004A0061006D006100690063006100200
  0310038003700350022002C00200044004100540055004D005B0022004A0061006D0061006900630061002000310038003700350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300022002C00200036003300370038003200340039002E00310034
  003400380030003800300031002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003
  4003500330032003900320035003100390039003400330033005D005D00008133470045004F004700430053005B0022004A00410044003600390022002C00200044004100540055004D005B0022004A0061006D0061006900630061002000310039003600390022002C00200045004C004C004900500053004F00490044005B
  00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630068002
  2002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B0022004B0061006C00690061006E0070007500720020003100380038
  00300022002C00200044004100540055004D005B0022004B0061006C00690061006E007000750072002000310038003800300022002C00200045004C004C004900500053004F00490044005B0022004500760065007200650073007400200028003100380033003000200044006500660069006E006900740069006F006E002
  90022002C00200036003300370037003200390039002E00330036003500350039003500330038002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200
  44006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00001749006E006400690061006E00200066006F006F00740000814F470045004F004700430053005B0022004B0061006E0064006100770061006C00610022002C00200044004
  100540055004D005B0022004B0061006E0064006100770061006C00610022002C00200045004C004C004900500053004F00490044005B0022004500760065007200650073007400200031003800330030002000280031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300
  370037003200370036002E003300340035002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0
  030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F004700430053005B0022004B00650072007400610075002000310039003600380022002C00200044004100540055004D005B0022004B00650072007400610075002000310039003600380022002C0020004500
  4C004C004900500053004F00490044005B00220045007600650072006500730074002000310038003300300020004D006F0064006900660069006500640022002C00200036003300370037003300300034002E003000360033002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D00450
  04D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F004700430053005B002200
  4B004F00430022002C00200044004100540055004D005B0022004B007500770061006900740020004F0069006C00200043006F006D00700061006E00790022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C0
  0200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C0020
  0030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B0022004C0061002000430061006E006F00610022002C00200044004100540055004D005B0022004C0061002000430061006E006F00610022002C00200045004C004C004900500
  053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030
  005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008157470045004F004700430053005B00220050005300410044003500360022002C00200044004100540055004D005B00220
  0500072006F0076006900730069006F006E0061006C00200053006F00750074006800200041006D00650072006900630061006E00200044006100740075006D002000310039003500360022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C
  002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C0020003
  0002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008111470045004F004700430053005B0022004C0061006B00650022002C00200044004100540055004D005B0022004C0061006B00650022002C00200045004C004C004900500053004F00490044005B00220049006E0074
  00650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002
  20044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B0022004C006500690067006F006E0022002C00200044004100540055004D005B0022004C006500690067006F006E0022002C0020
  0045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B0022004
  7007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B0022004C006900620065
  007200690061002000310039003600340022002C00200044004100540055004D005B0022004C006900620065007200690061002000310039003600340022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C002
  00036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002000
  30002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B0022004C006F006D00650022002C00200044004100540055004D005B0022004C006F006D00650022002C00200045004C004C004900500053004F00490044005B00220043006C006
  10072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F004700430053005B0022004C0075007A006F006E00200031003900310031002
  2002C00200044004100540055004D005B0022004C0075007A006F006E002000310039003100310022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900
  370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390
  0320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004800690074006F002000580056004900490049002000310039003600330022002C00200044004100540055004D005B0022004800690074006F002000580056004900490049002000310039003600330022002C0020004500
  4C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680
  022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B0022004800650072006100740020004E006F007200740068002200
  2C00200044004100540055004D005B0022004800650072006100740020004E006F0072007400680022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C00200
  03200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033
  005D005D00008133470045004F004700430053005B0022004D006100680065002000310039003700310022002C00200044004100540055004D005B0022004D006100680065002000310039003700310022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380
  0300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022
  0044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812B470045004F004700430053005B0022004D0061006B006100730073006100720022002C00200044004100540055004D005B0022004D0061006B00610073007300610
  0720022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B
  00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008161470045004F004700430053005B0022004500540
  0520053003800390022002C00200044004100540055004D005B0022004500750072006F007000650061006E00200054006500720072006500730074007200690061006C0020005200650066006500720065006E00630065002000530079007300740065006D002000310039003800390022002C00200045004C004C00490050
  0053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C0020003
  0005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B0022004D0061006C006F006E0067006F002000310039003800370022002C00200044
  004100540055004D005B0022004D0061006C006F006E0067006F002000310039003800370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C00200032003
  90037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D00
  5D0000813D470045004F004700430053005B0022004D00650072006300680069006300680022002C00200044004100540055004D005B0022004D00650072006300680069006300680022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00650020003100380038003000200028004
  90047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00
  490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008127470045004F004700430053005B0022004D0061007300730061007700610022002C00200044004100540055004D005B0022004D006100730073006
  1007700610022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D004500
  4D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004
  D0069006E006E00610022002C00200044004100540055004D005B0022004D0069006E006E00610022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E0031003400
  35002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320
  035003100390039003400330033005D005D0000812D470045004F004700430053005B0022004D006F006E007400650020004D006100720069006F0022002C00200044004100540055004D005B0022004D006F006E007400650020004D006100720069006F0022002C00200045004C004C004900500053004F00490044005B00
  220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0
  0490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F004700430053005B0022004D00270070006F00720061006C006F006B006F0022002C00200044004100540055004D005B0022004D00
  270070006F00720061006C006F006B006F0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E0034003600360030003200310
  03200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039
  003400330033005D005D0001814D470045004F004700430053005B0022004E00410044003200370022002C00200044004100540055004D005B0022004E006F00720074006800200041006D00650072006900630061006E00200044006100740075006D002000310039003200370022002C00200045004C004C0049005000530
  04F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077
  0069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B0022004E00410044003200370020004D006900630
  068006900670061006E0022002C00200044004100540055004D005B0022004E004100440020004D006900630068006900670061006E0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360020004D006900630068006900670061006E0022002C0020
  0036003300370038003400350030002E0030003400370035003400380039002C0020003200390034002E003900370038003600390037003100360034003600370034005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E004
  90054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00001D550053002000730075007200760065007900200066006F006F00740000813D470045004F004700430053005B0022004E00410044003800330022002C
  00200044004100540055004D005B0022004E006F00720074006800200041006D00650072006900630061006E00200044006100740075006D002000310039003800330022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C002000360033003700380031003
  30037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100
  370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B0022004E00610068007200770061006E002000310039003600370022002C00200044004100540055004D005B0022004E00610068007200770061006E002000310039003600370022002C00200045004
  C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200
  650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004E0061007000610072006
  9006D0061002000310039003700320022002C00200044004100540055004D005B0022004E00610070006100720069006D0061002000310039003700320022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C00200031003900320034002200
  2C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350
  0330032003900320035003100390039003400330033005D005D0000814B470045004F004700430053005B0022004E005A00470044003400390022002C00200044004100540055004D005B0022004E006500770020005A00650061006C0061006E0064002000470065006F006400650074006900630020004400610074007500
  6D002000310039003400390022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0
  0220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008133470045004F004700430053005B0022004E004700
  4F002000310039003400380022002C00200044004100540055004D005B0022004E0047004F002000310039003400380022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C0020004D006F0064006900660069006500640022002C00200036003300370037003400390032002E0
  03000310038002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037
  0034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B00220044006100740075006D0020003700330022002C00200044004100540055004D005B00220044006100740075006D0020003700330022002C00200045004C004C004900500053004F00490044005B0
  0220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E
  00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B0022004E005400460022002C00200044004100540055004D005B0022004E006F007500760065006C006C00650
  0200054007200690061006E00670075006C006100740069006F006E0020004600720061006E006300610069007300650022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C0020003600330037003800320034
  0039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002
  00030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008113470045004F004700430053005B0022004E00530057004300200039005A002D00320022002C00200044004100540055004D005B0022004E00530057004300200039005A002D00320022002C00200045004C004C
  004900500053004F00490044005B0022004E0057004C0020003900440022002C00200036003300370038003100340035002C0020003200390038002E00320035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0049005
  4005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0001812B470045004F004700430053005B0022004F005300470042002000310039003300360022002C00200044004100540055004D005B0022004F005300470042
  002000310039003300360022002C00200045004C004C004900500053004F00490044005B00220041006900720079002000310038003300300022002C00200036003300370037003500360033002E003300390036002C0020003200390039002E0033003200340039003600340036005D005D002C0020005000520049004D004
  5004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B0022
  004F005300470042003700300022002C00200044004100540055004D005B0022004F00530047004200200031003900370030002000280053004E00290022002C00200045004C004C004900500053004F00490044005B00220041006900720079002000310038003300300022002C00200036003300370037003500360033002
  E003300390036002C0020003200390039002E0033003200340039003600340036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100
  370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B0022004F005300280053004E0029003800300022002C00200044004100540055004D005B0022004F0053002000280053004E0029002000310039003800300022002C00200045004C004C00490050005
  3004F00490044005B00220041006900720079002000310038003300300022002C00200036003300370037003500360033002E003300390036002C0020003200390039002E0033003200340039003600340036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630068002200
  2C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B00220050006100640061006E00670022002C00200044004100540055004
  D005B00220050006100640061006E0067002000310038003800340022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100
  320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D0
  05D0000815F470045004F004700430053005B002200500061006C0065007300740069006E0065002000310039003200330022002C00200044004100540055004D005B002200500061006C0065007300740069006E0065002000310039003200330022002C00200045004C004C004900500053004F00490044005B0022004300
  6C00610072006B0065002000310038003800300020002800420065006E006F0069007400290022002C00200036003300370038003300300030002E003700380039002C0020003200390033002E003400360036003300310035003500330038003900380031005D005D002C0020005000520049004D0045004D005B002200470
  07200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B00220050006F0069006E00
  7400650020004E006F0069007200650022002C00200044004100540055004D005B00220043006F006E0067006F0020003100390036003000200050006F0069006E007400650020004E006F0069007200650022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00650020003100380
  03800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D
  002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B0022004700440041003900340022002C00200044004100540055004D005B0022004700650
  06F00630065006E007400720069006300200044006100740075006D0020006F00660020004100750073007400720061006C00690061002000310039003900340022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037
  002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003
  4003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B002200500075006C006B006F0076006F002000310039003400320022002C00200044004100540055004D005B002200500075006C006B006F0076006F002000310039003400320022002C00200045004C004C
  004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002
  00030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B002200510061007400610072002000310039003700340022002C002000440041
  00540055004D005B002200510061007400610072002000310039003700340022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005
  D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812147
  0045004F004700430053005B002200510061007400610072002000310039003400380022002C00200044004100540055004D005B002200510061007400610072002000310039003400380022002C00200045004C004C004900500053004F00490044005B002200480065006C006D00650072007400200031003900300036002
  2002C00200036003300370038003200300030002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100
  370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004C006F006D00610020005100750069006E00740061006E00610022002C00200044004100540055004D005B0022004C006F006D00610020005100750069006E00740061006E00610022002C002
  00045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008133470045004F004700430053005B00220041006D0065007200730066006F006F00720074002
  2002C00200044004100540055004D005B00220041006D0065007200730066006F006F007200740022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C002000320039003900
  2E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310
  0390039003400330033005D005D00008141470045004F004700430053005B0022005300610070007000650072002000480069006C006C002000310039003400330022002C00200044004100540055004D005B0022005300610070007000650072002000480069006C006C002000310039003400330022002C00200045004C00
  4C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063006800220
  02C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B0022005300630068007700610072007A00650063006B0022002C002000
  44004100540055004D005B0022005300630068007700610072007A00650063006B0022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C0020004E0061006D0069006200690061002000280047004C004D00290022002C00200036003300370037003400380033002E003800360
  03500320038003000340032002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E
  0030003100370034003500330032003900320035003100390039003400330033005D005D0000254700650072006D0061006E0020006C006500670061006C0020006D00650074007200650000812F470045004F004700430053005B00220053006500720069006E00640075006E00670022002C00200044004100540055004D0
  05B00220053006500720069006E00640075006E00670022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D
  005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813
  3470045004F004700430053005B002200540061006E0061006E006100720069007600650022002C00200044004100540055004D005B002200540061006E0061006E00610072006900760065002000310039003200350022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E0061
  00740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007
  2006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815F470045004F004700430053005B002200540069006D00620061006C00610069002000310039003400380022002C00200044004100540055004D005B002200540069006D00620061006C
  00610069002000310039003400380022002C00200045004C004C004900500053004F00490044005B002200450076006500720065007300740020003100380033003000200028003100390036003700200044006500660069006E006900740069006F006E00290022002C00200036003300370037003200390038002E0035003
  50036002C0020003300300030002E0038003000310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200
  3900320035003100390039003400330033005D005D00008129470045004F004700430053005B00220054004D003600350022002C00200044004100540055004D005B00220054004D003600350022002C00200045004C004C004900500053004F00490044005B002200410069007200790020004D006F0064006900660069006
  50064002000310038003400390022002C00200036003300370037003300340030002E003100380039002C0020003200390039002E0033003200340039003600340036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00
  490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B00220054004D003700350022002C00200044004100540055004D005B002200470065006F0064006500740069006
  300200044006100740075006D0020006F0066002000310039003600350022002C00200045004C004C004900500053004F00490044005B002200410069007200790020004D006F006400690066006900650064002000310038003400390022002C00200036003300370037003300340030002E003100380039002C0020003200
  390039002E0033003200340039003600340036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320
  035003100390039003400330033005D005D0000811F470045004F004700430053005B00220054006F006B0079006F0022002C00200044004100540055004D005B00220054006F006B0079006F0022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C0020003100380034003100
  22002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670
  072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008153470045004F004700430053005B0022005400720069006E0069006400610064002000310039003000330022002C00200044004100540055004D005B0022005400720069006E006900
  6400610064002000310039003000330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003500380022002C00200036003300370038003200390033002E00360034003500320030003800370036002C0020003200390034002E0032003600300036003700360
  03300360039003200360031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039
  003400330033005D005D0000812D470045004F004700430053005B0022005400430028003100390034003800290022002C00200044004100540055004D005B0022005400720075006300690061006C00200043006F006100730074002000310039003400380022002C00200045004C004C004900500053004F00490044005B0
  02200480065006C006D006500720074002000310039003000360022002C00200036003300370038003200300030002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022
  0044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220056006F00690072006F006C002000310038003700350022002C00200044004100540055004D005B00220056006F006900720
  06F006C002000310038003700350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E00340036003600300032003100320039
  0033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200350031003900390034003
  30033005D005D0000812F470045004F004700430053005B0022004200650072006E002000310039003300380022002C00200044004100540055004D005B0022004200650072006E002000310039003300380022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038
  003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004
  4006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B0022004E006F007200640020005300610068006100720061002000310039003500390022002C00200044004100540055004D005B0022
  004E006F007200640020005300610068006100720061002000310039003500390022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003
  200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200350031003900
  39003400330033005D005D0000812F470045004F004700430053005B002200520054003300380022002C00200044004100540055004D005B002200530074006F0063006B0068006F006C006D002000310039003300380022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002
  000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0049005400
  5B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008119470045004F004700430053005B00220059006100630061007200650022002C00200044004100540055004D005B00220059006100630061007200650022002
  C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700
  69006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B00220059006F006600660022002C002000440041005
  40055004D005B00220059006F006600660022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E00340036003600300032003100
  3200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200350031003900390
  03400330033005D005D00008121470045004F004700430053005B0022005A0061006E0064006500720069006A0022002C00200044004100540055004D005B0022005A0061006E0064006500720069006A0022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E00610074006900
  6F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650
  022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B0022004D004700490022002C00200044004100540055004D005B0022004D0069006C0069007400610072002D00470065006F006700720061007000680069007300
  630068006500200049006E0073007400690074007500740022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E00310035003200380031003200380
  05D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0001
  8149470045004F004700430053005B002200420065006C00670065002000310039003700320022002C00200044004100540055004D005B00220052006500730065006100750020004E006100740069006F006E0061006C002000420065006C00670065002000310039003700320022002C00200045004C004C0049005000530
  04F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D
  002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B0022004400480044004E0022002C00200044004100540055004D005B00220044006500750
  07400730063006800650073002000480061007500700074006400720065006900650063006B0073006E00650074007A0022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C
  0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003
  2003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B00220043006F006E0061006B00720079002000310039003000350022002C00200044004100540055004D005B00220043006F006E0061006B00720079002000310039003000350022002C00200045004C004C004900500053
  004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B002
  20047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008151470045004F004700430053005B0022004400650061
  006C0075006C002000500069007300630075006C00750069002000310039003300330022002C00200044004100540055004D005B0022004400650061006C0075006C002000500069007300630075006C00750069002000310039003300330022002C00200045004C004C004900500053004F00490044005B00220049006E007
  400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00
  220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B0022004400650061006C0075006C002000500069007300630075006C00750069002000310039003700300022002C00200044004
  100540055004D005B0022004400650061006C0075006C002000500069007300630075006C00750069002000310039003700300022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C002000360033003700380032003400
  35002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310
  0390039003400330033005D005D00008135470045004F004700430053005B0022004E0047004E0022002C00200044004100540055004D005B0022004E006100740069006F006E0061006C002000470065006F006400650074006900630020004E006500740077006F0072006B0022002C00200045004C004C00490050005300
  4F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200
  055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B0022004B005500440041004D00530022002C00200044004100540055004D005B0022004B0075007700
  61006900740020005500740069006C0069007400790022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520
  049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F0047004300
  53005B00220057004700530020003700320022002C00200044004100540055004D005B00220057006F0072006C0064002000470065006F00640065007400690063002000530079007300740065006D002000310039003700320022002C00200045004C004C004900500053004F00490044005B0022005700470053002000370
  0320022002C00200036003300370038003100330035002C0020003200390038002E00320036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E
  0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B0022005700470053002000370032004200450022002C00200044004100540055004D005B00220057004700530020003700320020005400720061006E007300690074002000420072006F0
  0610064006300610073007400200045007000680065006D00650072006900730022002C00200045004C004C004900500053004F00490044005B00220057004700530020003700320022002C00200036003300370038003100330035002C0020003200390038002E00320036005D005D002C0020005000520049004D0045004D
  005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200570
  04700530020003800340022002C00200044004100540055004D005B00220057006F0072006C0064002000470065006F00640065007400690063002000530079007300740065006D002000310039003800340022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C0020
  0036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002
  C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B00220041006E006700750069006C006C0061002000310039003500370022002C00200044004100540055004D005B00220041006E006700750069006C006C006100200031
  0039003500370022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C002000500052004
  9004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053
  005B00220041006E00740069006700750061002000310039003400330022002C00200044004100540055004D005B00220041006E00740069006700750061002000310039003400330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00650020003100380038003000200028005
  20047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700
  72006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B00220044006F006D0069006E006900630061002000310039003400350022002C00200044004100540055004D005B00220044006F006D0069006E006
  900630061002000310039003400350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D00
  2C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F47004
  5004F004700430053005B0022004700720065006E006100640061002000310039003500330022002C00200044004100540055004D005B0022004700720065006E006100640061002000310039003500330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800
  3800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0
  0220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814B470045004F004700430053005B0022004D006F006E0074007300650072007200610074002000310039003500380022002C00200044004100540055004D005B00
  22004D006F006E0074007300650072007200610074002000310039003500380022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C002000320
  0390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039
  003400330033005D005D00008147470045004F004700430053005B002200530074002E0020004B0069007400740073002000310039003500350022002C00200044004100540055004D005B002200530074002E0020004B0069007400740073002000310039003500350022002C00200045004C004C004900500053004F00490
  044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630068
  0022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B002200530074002E0020004C00750063006900610020003100390
  03500350022002C00200044004100540055004D005B002200530074002E0020004C0075006300690061002000310039003500350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038
  003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003
  70034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B002200530074002E002000560069006E00630065006E0074002000310039003400350022002C00200044004100540055004D005B002200530074002E002000560069006E00630065006E007400200031
  0039003400350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C002000500052004
  9004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053
  005B0022004E004100440032003700280037003600290022002C00200044004100540055004D005B0022004E006F00720074006800200041006D00650072006900630061006E00200044006100740075006D0020003100390032003700200028003100390037003600290022002C00200045004C004C004900500053004F004
  90044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000816B470045004F004700430053005B0022004E004100440032003700280043004700510037003
  700290022002C00200044004100540055004D005B0022004E006F00720074006800200041006D00650072006900630061006E00200044006100740075006D00200031003900320037002000280043004700510037003700290022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00
  65002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200
  055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000811B470045004F004700430053005B0022005800690061006E002000310039003800300022002C00200044004100540055004D005B002200
  5800690061006E002000310039003800300022002C00200045004C004C004900500053004F00490044005B0022005800690061006E002000310039003800300022002C00200036003300370038003100340030002C0020003200390038002E003200350037005D005D002C0020005000520049004D0045004D005B002200470
  07200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F004700430053005B00220048006F006E006700
  20004B006F006E0067002000310039003800300022002C00200044004100540055004D005B00220048006F006E00670020004B006F006E0067002000310039003800300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C0020003100390
  03200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031
  00370034003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B0022004A0047004400320030003000300022002C00200044004100540055004D005B0022004A006100700061006E006500730065002000470065006F0064006500740069006300200044006100740
  075006D002000320030003000300022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D
  005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B002200530
  06500670061007200610022002C00200044004100540055004D005B002200470075006E0075006E006700200053006500670061007200610022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E
  003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003
  70034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B00220051004E0044003900350022002C00200044004100540055004D005B0022005100610074006100720020004E006100740069006F006E0061006C00200044006100740075006D0020003100390039
  00350022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0022004700720065006
  5006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008137470045004F004700430053005B00220050006F00720074006F00200053
  0061006E0074006F0022002C00200044004100540055004D005B00220050006F00720074006F002000530061006E0074006F002000310039003300360022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002
  C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500
  330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200530065006C0076006100670065006D0020004700720061006E006400650022002C00200044004100540055004D005B002200530065006C0076006100670065006D0020004700720061006E006400650022002
  C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700
  69006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008165470045004F004700430053005B0022004E00410044003800330028004300530052005
  300290022002C00200044004100540055004D005B0022004E0041004400380033002000430061006E0061006400690061006E0020005300700061007400690061006C0020005200650066006500720065006E00630065002000530079007300740065006D0022002C00200045004C004C004900500053004F00490044005B00
  22004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0
  0490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B0022005300410044003600390022002C00200044004100540055004D005B00220053006F007500740068002000
  41006D00650072006900630061006E00200044006100740075006D002000310039003600390022002C00200045004C004C004900500053004F00490044005B002200470052005300200031003900360037002000280053004100440036003900290022002C00200036003300370038003100360030002C00200032003900380
  02E00320035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033
  005D005D00008121470045004F004700430053005B0022005300570045005200450046003900390022002C00200044004100540055004D005B0022005300570045005200450046003900390022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C002000360
  03300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C0020
  0030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812F470045004F004700430053005B00220050006F0069006E00740020003500380022002C00200044004100540055004D005B00220050006F0069006E00740020003500380022002C00200045004C004C004900500
  053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077
  0069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B00220046006F007200740020004D0061007200690
  067006F00740022002C00200044004100540055004D005B00220046006F007200740020004D0061007200690067006F00740022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038
  003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003
  100390039003400330033005D005D0000813D470045004F004700430053005B002200470075006100640065006C006F007500700065002000310039003400380022002C00200044004100540055004D005B002200470075006100640065006C006F007500700065002000310039003400380022002C00200045004C004C0049
  00500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002
  00030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B0022004300530047003600370022002C00200044004100540055004D005B0022
  00430065006E0074007200650020005300700061007400690061006C00200047007500790061006E006100690073002000310039003600370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C0020003
  6003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200
  3900320035003100390039003400330033005D005D00008159470045004F004700430053005B00220052004700460047003900350022002C00200044004100540055004D005B0022005200650073006500610075002000470065006F00640065007300690071007500650020004600720061006E00630061006900730020004
  7007500790061006E0065002000310039003900350022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C00200050005200
  49004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F00470043005
  3005B0022004D0061007200740069006E0069007100750065002000310039003300380022002C00200044004100540055004D005B0022004D0061007200740069006E0069007100750065002000310039003300380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100
  740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720
  06500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B0022005200650075006E0069006F006E002000310039003400370022002C00200044004100540055004D005B0022005200650075006E0069006F006E00
  2000310039003400370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220
  047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008153470045004F004700430053005B002200520047005200
  3900320022002C00200044004100540055004D005B0022005200650073006500610075002000470065006F00640065007300690071007500650020006400650020006C00610020005200650075006E0069006F006E002000310039003900320022002C00200045004C004C004900500053004F00490044005B0022004700520
  053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B
  00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008125470045004F004700430053005B00220054006100680069007400690020003500320022002C00200044004100540055004D005B0022005400610068006900740
  0690020003500320022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047
  007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B002200540061006800610
  0610020003500340022002C00200044004100540055004D005B0022005400610068006100610020003500340022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038
  002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003
  400330033005D005D0000813D470045004F004700430053005B002200490047004E003700320020004E0075006B0075002000480069007600610022002C00200044004100540055004D005B002200490047004E003700320020004E0075006B0075002000480069007600610022002C00200045004C004C004900500053004F
  00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002
  C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B00220043006F006D00620061006E0069002000310039003500300022002C0020004400410054
  0055004D005B00220043006F006D00620061006E0069002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005
  D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000081
  2D470045004F004700430053005B002200490047004E003500360020004C00690066006F00750022002C00200044004100540055004D005B002200490047004E003500360020004C00690066006F00750022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006
  F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720065006500
  22002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B002200500065007400720065006C0073002000310039003700320022002C00200044004100540055004D005B002200500065007400720065006C007300200031003
  9003700320022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200
  650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008151470045004F004700430053005B00220050006500720072006F007
  50064002000310039003500300022002C00200044004100540055004D005B00220050006F0069006E00740065002000470065006F006C006F00670069006500200050006500720072006F00750064002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220049006E00740065007200
  6E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650
  0670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008185470045004F004700430053005B0022005300610069006E007400200050006900650072007200650020006500740020004D0069007100750065006C006F006E00200031003900
  3500300022002C00200044004100540055004D005B0022005300610069006E007400200050006900650072007200650020006500740020004D0069007100750065006C006F006E002000310039003500300022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00650020003100380
  03600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054
  005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008115470045004F004700430053005B0022004D004F0050003700380022002C00200044004100540055004D005B0022004D004F0050003700380022002C00200
  045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063
  00680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000816F470045004F004700430053005B00220052005200410046002000310039003900310022002C0
  0200044004100540055004D005B00220052006500730065006100750020006400650020005200650066006500720065006E00630065002000640065007300200041006E00740069006C006C006500730020004600720061006E006300610069007300650073002000310039003900310022002C00200045004C004C00490050
  0053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002
  C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B002200490047004E003500330020004D0061007200650022002C00200044004100540055004D
  005B002200490047004E003500330020004D0061007200650022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005
  000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F0047
  00430053005B0022005300540038003400200049006C00650020006400650073002000500069006E00730022002C00200044004100540055004D005B0022005300540038003400200049006C00650020006400650073002000500069006E00730022002C00200045004C004C004900500053004F00490044005B00220049006
  E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0049005400
  5B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B00220053005400370031002000420065006C006500700022002C00200044004100540055004D005B0022005300540037003
  1002000420065006C006500700022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D00
  5B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B0022004E004
  50041003700340020004E006F0075006D006500610022002C00200044004100540055004D005B0022004E00450041003700340020004E006F0075006D006500610022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200
  340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370
  034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004700720061006E006400200043006F006D006F0072006F00730022002C00200044004100540055004D005B0022004700720061006E006400200043006F006D006F0072006F00730022002C002000
  45004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630
  0680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B0022005200650079006B006A006100760069006B0020003100
  39003000300022002C00200044004100540055004D005B0022005200650079006B006A006100760069006B002000310039003000300022002C00200045004C004C004900500053004F00490044005B002200440061006E006900730068002000310038003700360022002C00200036003300370037003000310039002E00320
  037002C0020003300300030005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039
  003400330033005D005D00008131470045004F004700430053005B00220048006A006F0072007300650079002000310039003500350022002C00200044004100540055004D005B00220048006A006F0072007300650079002000310039003500350022002C00200045004C004C004900500053004F00490044005B002200490
  06E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054
  005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008133470045004F004700430053005B002200490053004E003900330022002C00200044004100540055004D005B002200490073006C0061006E0064007300200
  04E006500740077006F0072006B002000310039003900330022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C00200050
  00520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F00470
  0430053005B002200480065006C006C0065002000310039003500340022002C00200044004100540055004D005B002200480065006C006C0065002000310039003500340022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039
  003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003
  100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B0022004C004B0053003900320022002C00200044004100540055004D005B0022004C00610074007600690061002000310039003900320022002C00200045004C004C004900500053004F00490044
  005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C0020005
  5004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B002200490047004E003700320020004700720061006E006400650020005400650072007200650022002C
  00200044004100540055004D005B002200490047004E003700320020004700720061006E006400650020005400650072007200650022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C002000360033003
  70038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200
  35003100390039003400330033005D005D00008141470045004F004700430053005B00220050006F00720074006F002000530061006E0074006F002000310039003900350022002C00200044004100540055004D005B00220050006F00720074006F002000530061006E0074006F002000310039003900350022002C0020004
  5004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300
  680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008161470045004F004700430053005B00220041007A006F0072006500730020004F007200690065006
  E00740061006C002000310039003900350022002C00200044004100540055004D005B00220041007A006F0072006500730020004F007200690065006E00740061006C002000490073006C0061006E00640073002000310039003900350022002C00200045004C004C004900500053004F00490044005B00220049006E007400
  650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220
  044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815D470045004F004700430053005B00220041007A006F007200650073002000430065006E007400720061006C002000310039003900350022002C002000440041005400
  55004D005B00220041007A006F007200650073002000430065006E007400720061006C002000490073006C0061006E00640073002000310039003900350022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C0020003100390032003400220
  02C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035
  00330032003900320035003100390039003400330033005D005D00008137470045004F004700430053005B0022004C006900730062006F006E002000310038003900300022002C00200044004100540055004D005B0022004C006900730062006F006E002000310038003900300022002C00200045004C004C0049005000530
  04F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630068
  0022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220049004B00420044002D003900320022002C0020004400410
  0540055004D005B00220049007200610071002D004B0075007700610069007400200042006F0075006E006400610072007900200044006100740075006D002000310039003900320022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C002000360033003700380031
  00330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003
  100370034003500330032003900320035003100390039003400330033005D005D0001812F470045004F004700430053005B002200450044003700390022002C00200044004100540055004D005B0022004500750072006F007000650061006E00200044006100740075006D002000310039003700390022002C00200045004C
  004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900630068002
  2002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F004700430053005B0022004C004B0053003900340022002C00200044004100540055004D
  005B0022004C00690074006800750061006E00690061002000310039003900340020002800450054005200530038003900290022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003
  200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500
  3100390039003400330033005D005D0000814B470045004F004700430053005B002200490047004D003900350022002C00200044004100540055004D005B00220049007300740069007400750074006F002000470065006F006700720061006600690063006F0020004D0069006C00690074006100690072006500200031003
  9003900350022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B0022004700720065006500
  6E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220056006F00690072006F006C0020003
  10038003700390022002C00200044004100540055004D005B00220056006F00690072006F006C002000310038003700390022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200
  340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C0
  0200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B00220043004900310039003700310022002C00200044004100540055004D005B0022004300680061007400680061006D002000490073006C0061006E006400730020004400
  6100740075006D002000310039003700310022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0
  045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B00
  220043004900310039003700390022002C00200044004100540055004D005B0022004300680061007400680061006D002000490073006C0061006E0064007300200044006100740075006D002000310039003700390022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E00610
  0740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072
  006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000818D470045004F004700430053005B0022005300490052004700410053002000320030003000300022002C00200044004100540055004D005B002200530069007300740065006D006100200
  06400650020005200650066006500720065006E006300690061002000470065006F00630065006E0074007200690063006F0020007000610072006100200041006D00650072006900630061002000640065006C0020005300750072002000320030003000300022002C00200045004C004C004900500053004F00490044005B
  0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004
  E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004700750061006D002000310039003600330022002C00200044004100540055004D005B002200470075
  0061006D002000310039003600330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005
  D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813747
  0045004F004700430053005B0022005600690065006E007400690061006E0065002000310039003800320022002C00200044004100540055004D005B0022005600690065006E007400690061006E0065002000310039003800320022002C00200045004C004C004900500053004F00490044005B0022004B007200610073007
  3006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500
  670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000811F470045004F004700430053005B0022004C0061006F002000310039003900330022002C00200044004100540055004D005B0022004C0061006F002000310039003900330022002
  C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C00200036003300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004C0061006F002000310039003900370022002C002
  00044004100540055004D005B0022004C0061006F0020004E006100740069006F006E0061006C00200044006100740075006D002000310039003900370022002C00200045004C004C004900500053004F00490044005B0022004B0072006100730073006F00770073006B0079002000310039003400300022002C0020003600
  3300370038003200340035002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330
  032003900320035003100390039003400330033005D005D00008137470045004F004700430053005B0022004A006F00750069006B002000310039003600310022002C00200044004100540055004D005B0022004A006F00750069006B002000310039003600310022002C00200045004C004C004900500053004F0049004400
  5B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063006800220
  02C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814B470045004F004700430053005B0022004E006F00750061006B00630068006F0074007400200031003900
  3600350022002C00200044004100540055004D005B0022004E006F00750061006B00630068006F00740074002000310039003600350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370
  038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031
  00370034003500330032003900320035003100390039003400330033005D005D00008157470045004F004700430053005B002200470075006C007300680061006E00200033003000330022002C00200044004100540055004D005B002200470075006C007300680061006E00200033003000330022002C00200045004C004C0
  04900500053004F00490044005B0022004500760065007200650073007400200031003800330030002000280031003900330037002000410064006A007500730074006D0065006E007400290022002C00200036003300370037003200370036002E003300340035002C0020003300300030002E0038003000310037005D005D
  002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815B470
  045004F004700430053005B0022005000520053003900320022002C00200044004100540055004D005B0022005000680069006C0069007000700069006E00650020005200650066006500720065006E00630065002000530079007300740065006D002000310039003900320022002C00200045004C004C004900500053004F
  00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006
  9006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008121470045004F004700430053005B002200470061006E002000310039003700300022002C
  00200044004100540055004D005B002200470061006E002000310039003700300022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005
  D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000081
  69470045004F004700430053005B0022004D00410047004E0041002D0053004900520047004100530022002C00200044004100540055004D005B0022004D006100720063006F002000470065006F00630065006E0074007200690063006F0020004E006100630069006F006E0061006C0020006400650020005200650066006
  500720065006E0063006900610022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D00
  5B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0001815F470045004F004700430053005B00220052004
  7005000460022002C00200044004100540055004D005B0022005200650073006500610075002000470065006F00640065007300690071007500650020006400650020006C006100200050006F006C0079006E00650073006900650020004600720061006E006300610069007300650022002C00200045004C004C0049005000
  53004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C002000300
  05D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B0022004600610074007500200049007600610020003700320022002C00200044004100
  540055004D005B0022004600610074007500200049007600610020003700320022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D0
  05D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135
  470045004F004700430053005B002200490047004E00360033002000480069007600610020004F00610022002C00200044004100540055004D005B002200490047004E00360033002000480069007600610020004F00610022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E0
  06100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067
  0072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008125470045004F004700430053005B00220054006100680069007400690020003700390022002C00200044004100540055004D005B00220054006100680069007400690020003700390
  022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E
  00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008125470045004F004700430053005B0022004D006F006F007200650061002000380
  0370022002C00200044004100540055004D005B0022004D006F006F0072006500610020003800370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020
  003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039003900340033003
  3005D005D00008129470045004F004700430053005B0022004D0061007500700069007400690020003800330022002C00200044004100540055004D005B0022004D0061007500700069007400690020003800330022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E00610074
  0069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006
  500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B0022004E0061006B0068006C002D00650020004700680061006E0065006D0022002C00200044004100540055004D005B0022004E0061006B0068006C002D
  00650020004700680061006E0065006D0022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005
  B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0001815D470045004F004700430053005B00220050004F
  00530047004100520020003900340022002C00200044004100540055004D005B00220050006F0073006900630069006F006E00650073002000470065006F006400650073006900630061007300200041007200670065006E00740069006E00610073002000310039003900340022002C00200045004C004C004900500053004
  F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D00
  2C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B0022004B006100740061006E00670061002000310039003500350022002C002000440041005
  40055004D005B0022004B006100740061006E00670061002000310039003500350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600
  390038003200310033003800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310
  0390039003400330033005D005D00008137470045004F004700430053005B0022004B0061007300610069002000310039003500330022002C00200044004100540055004D005B0022004B0061007300610069002000310039003500330022002C00200045004C004C004900500053004F00490044005B00220043006C006100
  72006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C0
  0200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008191470045004F004700430053005B002200490047004300200031003900360032002000360074006800200050006100720061006C00
  6C0065006C00200053006F0075007400680022002C00200044004100540055004D005B00220049004700430020003100390036003200200041007200630020006F00660020007400680065002000360074006800200050006100720061006C006C0065006C00200053006F0075007400680022002C00200045004C004C00490
  0500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E
  00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B002200490047004E002000310039003600320
  020004B00650072006700750065006C0065006E0022002C00200044004100540055004D005B002200490047004E002000310039003600320020004B00650072006700750065006C0065006E0022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061
  006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C002
  00030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008143470045004F004700430053005B0022004C006500200050006F007500630065002000310039003300340022002C00200044004100540055004D005B0022004C006500200050006F007500630065002000310039
  003300340022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004
  D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B
  002200490047004E00200041007300740072006F002000310039003600300022002C00200044004100540055004D005B002200490047004E00200041007300740072006F002000310039003600300022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B00650020003100380038003
  00020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200
  44006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008173470045004F004700430053005B00220049004700430042002000310039003500350022002C00200044004100540055004D005B00220049006E0073007400690074007
  50074002000470065006F00670072006100700068006900710075006500200064007500200043006F006E0067006F002000420065006C00670065002000310039003500350022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380030002000280052004700
  5300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007200650
  0650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004D006100750072006900740061006E00690061002000310039003900390022002C00200044004100540055004D005B0022004D006100750072006900
  740061006E00690061002000310039003900390022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C00200050005200490
  04D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008177470045004F00470043005300
  5B0022004D0068006100730074002000310039003500310022002C00200044004100540055004D005B0022004D0069007300730061006F00200048006900640072006F006700720061006600690063006F00200041006E0067006F006C006100200079002000530061006F00200054006F006D0065002000310039003500310
  022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D
  005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B0022004D0
  06800610073007400200028006F006E00730068006F0072006500290022002C00200044004100540055004D005B0022004D006800610073007400200028006F006E00730068006F0072006500290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E
  0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002
  C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B0022004D006800610073007400200028006F0066006600730068006F0072006500290022002C00200044004100540055004D005B0022004D006800610073007400200028
  006F0066006600730068006F0072006500290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004
  D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008165470045004F004700430053005B
  002200450067007900700074002000470075006C00660020006F00660020005300750065007A00200053002D00360035003000200054004C0022002C00200044004100540055004D005B002200450067007900700074002000470075006C00660020006F00660020005300750065007A00200053002D0036003500300020005
  4004C0022002C00200045004C004C004900500053004F00490044005B002200480065006C006D006500720074002000310039003000360022002C00200036003300370038003200300030002C0020003200390038002E0033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E0077006900
  6300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00018141470045004F004700430053005B0022005400650072006E002000490073006C0061006E006
  4002000310039003600310022002C00200044004100540055004D005B0022005400650072006E002000490073006C0061006E0064002000310039003600310022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C0020003100390032003400
  22002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340
  03500330032003900320035003100390039003400330033005D005D00008163470045004F004700430053005B00220043006F0063006F0073002000490073006C0061006E00640073002000310039003600350022002C00200044004100540055004D005B00220043006F0063006F0073002000490073006C0061006E006400
  73002000310039003600350022002C00200045004C004C004900500053004F00490044005B0022004100750073007400720061006C00690061006E0020004E006100740069006F006E0061006C002000530070006800650072006F006900640022002C00200036003300370038003100360030002C0020003200390038002E0
  0320035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D
  005D00008135470045004F004700430053005B002200490077006F0020004A0069006D0061002000310039003400350022002C00200044004100540055004D005B002200490077006F0020004A0069006D0061002000310039003400350022002C00200045004C004C004900500053004F00490044005B00220049006E00740
  0650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022
  0044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200530074002E002000480065006C0065006E0061002000310039003700310022002C00200044004100540055004D005B00220
  0530074002E002000480065006C0065006E0061002000310039003700310022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D
  002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470
  045004F004700430053005B0022004D00610072006300750073002000490073006C0061006E0064002000310039003500320022002C00200044004100540055004D005B0022004D00610072006300750073002000490073006C0061006E0064002000310039003500320022002C00200045004C004C004900500053004F0049
  0044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C002
  00055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008155470045004F004700430053005B00220041007300630065006E00730069006F006E002000490073006C0061006E0064002000310039
  003500380022002C00200044004100540055004D005B00220041007300630065006E00730069006F006E002000490073006C0061006E0064002000310039003500380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003
  200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100
  370034003500330032003900320035003100390039003400330033005D005D0000815B470045004F004700430053005B002200410079006100620065006C006C00650020004C00690067006800740068006F0075007300650022002C00200044004100540055004D005B002200410079006100620065006C006C00650020004
  C00690067006800740068006F0075007300650022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E00340036003500
  5D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008
  121470045004F004700430053005B002200420065006C006C00650076007500650022002C00200044004100540055004D005B002200420065006C006C00650076007500650022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C0020003100
  39003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300
  03100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200430061006D00700020004100720065006100200041007300740072006F0022002C00200044004100540055004D005B002200430061006D00700020004100720065006100200041007300
  740072006F0022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0022004700720
  0650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008151470045004F004700430053005B002200500068006F0065006E00
  690078002000490073006C0061006E00640073002000310039003600360022002C00200044004100540055004D005B002200500068006F0065006E00690078002000490073006C0061006E00640073002000310039003600360022002C00200045004C004C004900500053004F00490044005B00220049006E0074006500720
  06E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065
  00670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220043006100700065002000430061006E00610076006500720061006C0022002C00200044004100540055004D005B00220043006100700
  065002000430061006E00610076006500720061006C0022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E0039003700380036003900380032003100330038
  00390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005
  D005D00008131470045004F004700430053005B00220053006F006C006F006D006F006E002000310039003600380022002C00200044004100540055004D005B00220053006F006C006F006D006F006E002000310039003600380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072
  006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006
  500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B0022004500610073007400650072002000490073006C0061006E0064002000310039003600370022002C00200044004100540055004D005B
  0022004500610073007400650072002000490073006C0061006E0064002000310039003600370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003
  200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039003900340033003300
  5D005D00008131470045004F004700430053005B002200460069006A0069002000310039003800360022002C00200044004100540055004D005B002200460069006A0069002000470065006F0064006500740069006300200044006100740075006D002000310039003800360022002C00200045004C004C004900500053004
  F00490044005B00220057004700530020003700320022002C00200036003300370038003100330035002C0020003200390038002E00320036005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400
  6500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008125470045004F004700430053005B002200460069006A0069002000310039003500360022002C00200044004100540055004D005B002200460069006A0069002000310039003
  500360022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B002200470072006500
  65006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220053006F0075007400680020004
  70065006F0072006700690061002000310039003600380022002C00200044004100540055004D005B00220053006F007500740068002000470065006F0072006700690061002000310039003600380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F00
  6E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720065006500220
  02C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008155470045004F004700430053005B0022004700720061006E00640020004300610079006D0061006E002000310039003500390022002C00200044004100540055004D005B0022004700720061006E006400
  20004300610079006D0061006E002000310039003500390022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E0039003700380036003900380032003100330
  03800390038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033
  005D005D00008145470045004F004700430053005B00220044006900650067006F0020004700610072006300690061002000310039003600390022002C00200044004100540055004D005B00220044006900650067006F0020004700610072006300690061002000310039003600390022002C00200045004C004C004900500
  053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030
  005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008151470045004F004700430053005B0022004A006F0068006E00730074006F006E002000490073006C0061006E006400200
  0310039003600310022002C00200044004100540055004D005B0022004A006F0068006E00730074006F006E002000490073006C0061006E0064002000310039003600310022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039
  003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003
  100370034003500330032003900320035003100390039003400330033005D005D00008159470045004F004700430053005B0022004C006900740074006C00650020004300610079006D0061006E002000310039003600310022002C00200044004100540055004D005B0022004C006900740074006C00650020004300610079
  006D0061006E002000310039003600310022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003600360022002C00200036003300370038003200300036002E0034002C0020003200390034002E003900370038003600390038003200310033003800390038005
  D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000081
  2D470045004F004700430053005B0022004D00690064007700610079002000310039003600310022002C00200044004100540055004D005B0022004D00690064007700610079002000310039003600310022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006
  F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002200440065006700720065006500
  22002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F004700430053005B0022005000690063006F0020006400650020006C00610020004E006900650076006500730022002C00200044004100540055004D005B0022005000690063006F002
  0006400650020006C00610020004E006900650076006500730022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C002000
  5000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004
  700430053005B00220050006900740063006100690072006E002000310039003600370022002C00200044004100540055004D005B00220050006900740063006100690072006E002000310039003600370022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E00610074006900
  6F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650
  022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008129470045004F004700430053005B002200530061006E0074006F002000310039003600350022002C00200044004100540055004D005B002200530061006E0074006F00200031003900360035002200
  2C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770
  069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008145470045004F004700430053005B0022004D00610072007300680061006C006C002000
  490073006C0061006E00640073002000310039003600300022002C00200044004100540055004D005B0022004D00610072007300680061006C006C002000490073006C0061006E00640073002000310039003600300022002C00200045004C004C004900500053004F00490044005B00220048006F007500670068002000310
  039003600300022002C00200036003300370038003200370030002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030
  003100370034003500330032003900320035003100390039003400330033005D005D00008141470045004F004700430053005B002200570061006B0065002000490073006C0061006E0064002000310039003500320022002C00200044004100540055004D005B002200570061006B0065002000490073006C0061006E00640
  02000310039003500320022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0022
  0047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008131470045004F004700430053005B00220054007200690
  07300740061006E002000310039003600380022002C00200044004100540055004D005B0022005400720069007300740061006E002000310039003600380022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022
  002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003
  500330032003900320035003100390039003400330033005D005D0000812D470045004F004700430053005B0022004B00750073006100690065002000310039003500310022002C00200044004100540055004D005B0022004B00750073006100690065002000310039003500310022002C00200045004C004C004900500053
  004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005
  D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B00220044006500630065007000740069006F006E002000490073006C0061006E00640022
  002C00200044004100540055004D005B00220044006500630065007000740069006F006E002000490073006C0061006E00640022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003
  200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700
  34003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B0022004B006F007200650061002000320030003000300022002C00200044004100540055004D005B002200470065006F00630065006E007400720069006300200064006100740075006D0020006F0066002
  0004B006F0072006500610022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00
  220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008157470045004F004700430053005B00220048006F006
  E00670020004B006F006E0067002000310039003600330022002C00200044004100540055004D005B00220048006F006E00670020004B006F006E0067002000310039003600330022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003500380022002C002000
  36003300370038003200390033002E00360034003500320030003800370036002C0020003200390034002E003200360030003600370036003300360039003200360031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E0
  0490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008149470045004F004700430053005B00220048006F006E00670020004B006F006E00670020003100390036003300280036003700290022002C002000
  44004100540055004D005B00220048006F006E00670020004B006F006E00670020003100390036003300280036003700290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C002000360033003700380
  03300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E00300031003700340035003300320039003200350031
  00390039003400330033005D005D0000812D470045004F004700430053005B00220050005A002D003900300022002C00200044004100540055004D005B00220050006100720061006D006500740072006F00700020005A0065006D0070002000310039003900300022002C00200045004C004C004900500053004F004900440
  05B00220050005A002D003900300022002C00200036003300370038003100330036002C0020003200390038002E003200350037003800330039003300300033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054
  005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00018129470045004F004700430053005B002200460044003500340022002C00200044004100540055004D005B0022004600610072006F006500200044006100740
  075006D002000310039003500340022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D
  005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B002200470
  044004D00320030003000300022002C00200044004100540055004D005B002200470065006F0064006500740069006300200044006100740075006D0020006F00660020004D0061006C00610079007300690061002000320030003000300022002C00200045004C004C004900500053004F00490044005B0022004700520053
  002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B002
  20044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008173470045004F004700430053005B0022004B0061007200620061006C006100200031003900370039002000280050006F006C00730065007200760069006300650029
  0022002C00200044004100540055004D005B0022004B0061007200620061006C006100200031003900370039002000280050006F006C007300650072007600690063006500290022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B006500200031003800380030002000280052004
  7005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007200
  6500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813F470045004F004700430053005B0022004E00610068007200770061006E002000310039003300340022002C00200044004100540055004D005B0022004E00610068007200770061006E002
  000310039003300340022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800520047005300290022002C00200036003300370038003200340039002E003100340035002C0020003200390033002E003400360035005D005D002C0020005000
  520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008139470045004F0047004
  30053005B002200520044002F003800330022002C00200044004100540055004D005B00220052006100750065006E006200650072006700200044006100740075006D002F003800330022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00
  200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007200650
  0650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008135470045004F004700430053005B002200500044002F003800330022002C00200044004100540055004D005B00220050006F0074007300640061006D00200044006100740075006D002F003800
  330022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B0
  0220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008125470045004F004700430053005B00220047005200
  3900360022002C00200044004100540055004D005B00220047007200650065006E006C0061006E0064002000310039003900360022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E0
  03200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035
  003100390039003400330033005D005D0000817B470045004F004700430053005B002200560061006E007500610020004C006500760075002000310039003100350022002C00200044004100540055004D005B002200560061006E007500610020004C006500760075002000310039003100350022002C00200045004C004C0
  04900500053004F00490044005B00220043006C00610072006B006500200031003800380030002000280069006E007400650072006E006100740069006F006E0061006C00200066006F006F007400290022002C00200036003300370038003300300036002E0033003600390036002C0020003200390033002E003400360036
  00330030003700360035003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003
  100390039003400330033005D005D00000966006F006F00740000816D470045004F004700430053005B002200520047004E004300390031002D003900330022002C00200044004100540055004D005B0022005200650073006500610075002000470065006F00640065007300690071007500650020006400650020004E006F
  007500760065006C006C0065002000430061006C00650064006F006E00690065002000390031002D003900330022002C00200045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003
  200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039003900
  3400330033005D005D00018125470045004F004700430053005B002200530054003800370020004F00750076006500610022002C00200044004100540055004D005B002200530054003800370020004F00750076006500610022002C00200045004C004C004900500053004F00490044005B002200570047005300200038003
  40022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B0022004400650067007200
  6500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000814D470045004F004700430053005B0022004B006500720074006100750020002800520053004F00290022002C00200044004100540055004D005B0022004B006500720074006100750020002
  800520053004F00290022002C00200045004C004C004900500053004F00490044005B00220045007600650072006500730074002000310038003300300020002800520053004F0020003100390036003900290022002C00200036003300370037003200390035002E003600360034002C0020003300300030002E0038003000
  310037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D0
  05D00008177470045004F004700430053005B002200560069007400690020004C006500760075002000310039003100320022002C00200044004100540055004D005B002200560069007400690020004C006500760075002000310039003100320022002C00200045004C004C004900500053004F00490044005B0022004300
  6C00610072006B006500200031003800380030002000280069006E007400650072006E006100740069006F006E0061006C00200066006F006F007400290022002C00200036003300370038003300300036002E0033003600390036002C0020003200390033002E00340036003600330030003700360035003500360033005D0
  05D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008111
  470045004F004700430053005B00220066006B003800390022002C00200044004100540055004D005B00220066006B003800390022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370
  038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035
  003100390039003400330033005D005D00008143470045004F004700430053005B0022004C0047004400320030003000360022002C00200044004100540055004D005B0022004C0069006200790061006E002000470065006F0064006500740069006300200044006100740075006D002000320030003000360022002C00200
  045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220047007200650065006E007700690063
  00680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000813D470045004F004700430053005B002200440047004E003900350022002C00200044004100540
  055004D005B00220044006100740075006D002000470065006F00640065007300690020004E006100730069006F006E0061006C002000310039003900350022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C00200032
  00390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003
  2003900320035003100390039003400330033005D005D00008123470045004F004700430053005B00220056004E002D00320030003000300022002C00200044004100540055004D005B00220056006900650074006E0061006D002000320030003000300022002C00200045004C004C004900500053004F00490044005B0022
  0057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005
  B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00018111470045004F004700430053005B0022005300560059003200310022002C00200044004100540055004D005B0022005300560059003200310022002C00200045
  004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002
  C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008123470045004F004700430053005B0022004A0041004400320030003000310022002C00200044004100540055
  004D005B0022004A0061006D0061006900630061002000320030003000310022002C00200045004C004C004900500053004F00490044005B00220057004700530020003800340022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320033003500360033005D005D002C002
  0005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008151470045004F
  004700430053005B0022004200650072006E0020003100380039003800200028004200650072006E00290022002C00200044004100540055004D005B002200430048003100390030003300200028004200650072006E00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006
  C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B0022004200650072006E0022002C00200037002E003400330039003500380033003300330033003300
  5D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008165470045004F004700430053005B00220042006F0067006F0074006100200031003900370035002000280042006F0067006
  F0074006100290022002C00200044004100540055004D005B00220042006F0067006F0074006100200031003900370035002000280042006F0067006F0074006100290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C00200031003900
  3200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220042006F0067006F007400610022002C0020002D00370034002E0030003800300039003100360036003600360037005D002C00200055004E00490054005B00220044006500670
  072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00018159470045004F004700430053005B0022004C006900730062006F006E00200028004C006900730062006F006E00290022002C00200044004100540055004D005B0022004C0069007300
  62006F006E0020003100390033003700200028004C006900730062006F006E00290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C00200032003900370
  05D005D002C0020005000520049004D0045004D005B0022004C006900730062006F006E0022002C0020002D0039002E0031003300310039003000360031003100310031005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035
  003100390039003400330033005D005D00018169470045004F004700430053005B0022004D0061006B0061007300730061007200200028004A0061006B006100720074006100290022002C00200044004100540055004D005B0022004D0061006B0061007300730061007200200028004A0061006B006100720074006100290
  022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B0022
  004A0061006B00610072007400610022002C0020003100300036002E0038003000370037003100390034003400340034005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000817
  F470045004F004700430053005B0022004D00470049002000280046006500720072006F00290022002C00200044004100540055004D005B0022004D0069006C0069007400610072002D00470065006F006700720061007000680069007300630068006500200049006E00730074006900740075007400200028004600650072
  0072006F00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D004
  5004D005B00220046006500720072006F0022002C0020002D00310037002E0036003600360036003600360036003600360037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00
  018157470045004F004700430053005B0022004D006F006E007400650020004D006100720069006F002000280052006F006D006500290022002C00200044004100540055004D005B0022004D006F006E007400650020004D006100720069006F002000280052006F006D006500290022002C00200045004C004C00490050005
  3004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B00220052006F006D00650022002C002000310032002E00340035003200
  33003300330033003300330033005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000818D470045004F004700430053005B0022004E00540046002000280050006100720069007
  300290022002C00200044004100540055004D005B0022004E006F007500760065006C006C006500200054007200690061006E00670075006C006100740069006F006E0020004600720061006E00630061006900730065002000280050006100720069007300290022002C00200045004C004C004900500053004F0049004400
  5B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B00220050006100720
  06900730022002C00200032002E00330033003700320032003900310037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000816B470045004F004700430053005B0022005000
  6100640061006E006700200028004A0061006B006100720074006100290022002C00200044004100540055004D005B00220050006100640061006E00670020003100380038003400200028004A0061006B006100720074006100290022002C00200045004C004C004900500053004F00490044005B002200420065007300730
  065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B0022004A0061006B00610072007400610022002C0020003100300036002E0038003000370037
  003100390034003400340034005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008181470045004F004700430053005B002200420065006C00670065002000310039003500300
  0200028004200720075007300730065006C007300290022002C00200044004100540055004D005B00220052006500730065006100750020004E006100740069006F006E0061006C002000420065006C006700650020003100390035003000200028004200720075007300730065006C007300290022002C00200045004C004C
  004900500053004F00490044005B00220049006E007400650072006E006100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0022004200720075007300730065006C00730022002C002
  00034002E003300360037003900370035005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815D470045004F004700430053005B002200540061006E0061006E006100720069
  00760065002000280050006100720069007300290022002C00200044004100540055004D005B002200540061006E0061006E0061007200690076006500200031003900320035002000280050006100720069007300290022002C00200045004C004C004900500053004F00490044005B00220049006E007400650072006E006
  100740069006F006E0061006C002000310039003200340022002C00200036003300370038003300380038002C0020003200390037005D005D002C0020005000520049004D0045004D005B0022005000610072006900730022002C00200032002E00330033003700320032003900310037005D002C00200055004E0049005400
  5B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008173470045004F004700430053005B00220056006F00690072006F006C00200031003800370035002000280050006100720069007300290022002C00200044004
  100540055004D005B00220056006F00690072006F006C00200031003800370035002000280050006100720069007300290022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200
  340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B0022005000610072006900730022002C00200032002E00330033003700320032003900310037005D002C00200055004E00490054005B00220044006500670
  072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008165470045004F004700430053005B0022004200610074006100760069006100200028004A0061006B006100720074006100290022002C00200044004100540055004D005B0022004200
  610074006100760069006100200028004A0061006B006100720074006100290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320
  038003100320038005D005D002C0020005000520049004D0045004D005B0022004A0061006B00610072007400610022002C0020003100300036002E0038003000370037003100390034003400340034005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034
  003500330032003900320035003100390039003400330033005D005D00008177470045004F004700430053005B002200520054003300380020002800530074006F0063006B0068006F006C006D00290022002C00200044004100540055004D005B002200530074006F0063006B0068006F006C006D002000310039003300380
  020002800530074006F0063006B0068006F006C006D00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038
  005D005D002C0020005000520049004D0045004D005B002200530074006F0063006B0068006F006C006D0022002C002000310038002E0030003500380032003700370037003700370038005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003
  2003900320035003100390039003400330033005D005D0000814F470045004F004700430053005B00220047007200650065006B002000280041007400680065006E007300290022002C00200044004100540055004D005B00220047007200650065006B002000280041007400680065006E007300290022002C00200045004C
  004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B00220041007400680065006
  E00730022002C002000320033002E0037003100360033003300370035005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008167470045004F004700430053005B002200430061
  007200740068006100670065002000280050006100720069007300290022002C00200044004100540055004D005B002200430061007200740068006100670065002000280050006100720069007300290022002C00200045004C004C004900500053004F00490044005B00220043006C00610072006B0065002000310038003
  800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004D005B0022005000610072006900730022002C00200032002E003300330037003200
  32003900310037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815D470045004F004700430053005B0022004E0047004F0020003100390034003800200028004F0073006
  C006F00290022002C00200044004100540055004D005B0022004E0047004F0020003100390034003800200028004F0073006C006F00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C0020004D006F0064006900660069006500640022002C0020003600330037003700
  3400390032002E003000310038002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B0022004F0073006C006F0022002C002000310030002E0037003200320039003100360036003600360037005D002C00200055004E00490054005B00220044006500670
  072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008155470045004F004700430053005B00220053002D004A00540053004B002000280046006500720072006F00290022002C00200044004100540055004D005B00220053002D004A005400
  53004B002000280046006500720072006F00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D0
  02C0020005000520049004D0045004D005B00220046006500720072006F0022002C0020002D00310037002E0036003600360036003600360036003600360037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E003000310037003400350033003200390032003500310039
  0039003400330033005D005D0001816F470045004F004700430053005B002200530065006700610072006100200028004A0061006B006100720074006100290022002C00200044004100540055004D005B002200470075006E0075006E0067002000530065006700610072006100200028004A0061006B00610072007400610
  0290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D0045004D005B
  0022004A0061006B00610072007400610022002C0020003100300036002E0038003000370037003100390034003400340034005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D000
  08173470045004F004700430053005B00220056006F00690072006F006C00200031003800370039002000280050006100720069007300290022002C00200044004100540055004D005B00220056006F00690072006F006C00200031003800370039002000280050006100720069007300290022002C00200045004C004C0049
  00500053004F00490044005B00220043006C00610072006B0065002000310038003800300020002800490047004E00290022002C00200036003300370038003200340039002E0032002C0020003200390033002E003400360036003000320031003200390033003600320037005D005D002C0020005000520049004D0045004
  D005B0022005000610072006900730022002C00200032002E00330033003700320032003900310037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000816B470045004F0047
  00430053005B0022004100540046002000280050006100720069007300290022002C00200044004100540055004D005B00220041006E006300690065006E006E006500200054007200690061006E00670075006C006100740069006F006E0020004600720061006E00630061006900730065002000280050006100720069007
  300290022002C00200045004C004C004900500053004F00490044005B00220050006C00650073007300690073002000310038003100370022002C00200036003300370036003500320033002C0020003300300038002E00360034005D005D002C0020005000520049004D0045004D005B002200500061007200690073002200
  2C00200032002E00330033003700320032003900310037005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00008147470045004F004700430053005B0022004E004400470020002
  80050006100720069007300290022002C00200044004100540055004D005B0022004E006F007200640020006400650020004700750065007200720065002000280050006100720069007300290022002C00200045004C004C004900500053004F00490044005B00220050006C00650073007300690073002000310038003100
  370022002C00200036003300370036003500320033002C0020003300300038002E00360034005D005D002C0020005000520049004D0045004D005B0022005000610072006900730022002C00200032002E00330033003700320032003900310037005D002C00200055004E00490054005B00220044006500670072006500650
  022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000815F470045004F004700430053005B0022004D006100640072006900640020003100380037003000200028004D0061006400720069006400290022002C00200044004100540055004D005B0022004D00
  6100640072006900640020003100380037003000200028004D0061006400720069006400290022002C00200045004C004C004900500053004F00490044005B0022005300740072007500760065002000310038003600300022002C00200036003300370038003200390038002E0033002C0020003200390034002E003700330
  05D005D002C0020005000520049004D0045004D005B0022004D006100640072006900640022002C0020002D0033002E0036003800370039003300380038003800380039005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035
  003100390039003400330033005D005D0001816D470045004F004700430053005B0022004C006900730062006F006E0020003100380039003000200028004C006900730062006F006E00290022002C00200044004100540055004D005B0022004C006900730062006F006E0020003100380039003000200028004C006900730
  062006F006E00290022002C00200045004C004C004900500053004F00490044005B002200420065007300730065006C002000310038003400310022002C00200036003300370037003300390037002E003100350035002C0020003200390039002E0031003500320038003100320038005D005D002C0020005000520049004D
  0045004D005B0022004C006900730062006F006E0022002C0020002D0039002E0031003300310039003000360031003100310031005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005
  D00018153470045004F004700430053005B002200470044004100320030003200300022002C00200044004100540055004D005B002200470065006F00630065006E007400720069006300200044006100740075006D0020006F00660020004100750073007400720061006C00690061002000320030003200300022002C0020
  0045004C004C004900500053004F00490044005B0022004700520053002000310039003800300022002C00200036003300370038003100330037002C0020003200390038002E003200350037003200320032003100300031005D005D002C0020005000520049004D0045004D005B00220047007200650065006E00770069006
  300680022002C00200030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D0000134D006900630072006F0073006F006600740000810D470045004F004700430053005B00220055
  006E0069007400200053007000680065007200650022002C00200044004100540055004D005B00220055006E0069007400200053007000680065007200650022002C002000530050004800450052004F00490044005B00220053007000680065007200650022002C00200031002E0030002C00200030002E0030005D005D002
  C0020005000520049004D0045004D005B00220047007200650065006E00770069006300680022002C0030002E0030005D002C00200055004E00490054005B00220044006500670072006500650022002C00200030002E0030003100370034003500330032003900320035003100390039003400330033005D005D00000D7200
  61006400690061006E00000978006D0061007800000978006D0069006E00000979006D0061007800000979006D0069006E0000052C00200000035F000003280000032900000729002C002000000B45004D0050005400590000035200000B20004E0055004C004C0000094E0055004C004C0000077B0030007D0000494D00690
  0630072006F0073006F00660074002E00530071006C005300650072007600650072002E00540079007000650073002E005300700061007400690061006C00520065007300002153007400720041006E007400690070006F00640061006C004500640067006500002D5300740072004100720063004E0065006500640054006F
  00480061007600650045007100750061006C005A00003D53007400720042007500660066006500720050006100730073006500640049006C006C006500670061006C00440069007300740061006E00630065000059530074007200420075006600660065007200570069007400680054006F006C006500720061006E0063006
  50050006100730073006500640049006C006C006500670061006C0054006F006C006500720061006E0063006500003153007400720042007500660066006500720057006F0075006C0064005700720061007000410072006F0075006E0064000043530074007200430069007200630075006C00610072005300740072006900
  6E0067004E0065006500640073005400680072006500650050006F0069006E0074007300003153007400720043006F006D0070006F0075006E006400430075007200760065004D00690073006D006100740063006800003D53007400720043006F006D0070006F0075006E006400430075007200760065004E0065006500640
  07300540077006F0050006F0069006E007400730000495300740072004300750072007600650054006F004C0069006E00650050006100730073006500640049006C006C006500670061006C0054006F006C006500720061006E0063006500002353007400720045006D0070007400790054006500780074004500720072006F
  0072000023530074007200450078007000650063007400650064004E0075006D006200650072000059530074007200460075006C006C0047006C006F0062006500430061006E006E006F0074004200650050006100720074004F006600470065006F006D00650074007200790043006F006C006C0065006300740069006F006
  E00003D530074007200460075006C006C0047006C006F0062006500430061006E006E006F007400480061007600650045006C0065006D0065006E00740073000027530074007200470065006E00650072006900630054006500780074004500720072006F0072000025530074007200470065006E0065007200690063005700
  4B0042004500720072006F0072000053530074007200470065006F0067007200610070006800790043006F006F007200640069006E0061007400650073004C006100740069007400750064006500490073004E006F007400560061006C00690064000055530074007200470065006F0067007200610070006800790043006F0
  06F007200640069006E0061007400650073004C006F006E00670069007400750064006500490073004E006F007400560061006C00690064000037530074007200470065006F0067007200610070006800790049006E00700075007400490073004E006F007400560061006C00690064000035530074007200470065006F0067
  00720061007000680079005300720069006400490073004E006F007400560061006C0069006400002B53007400720047004C004C006900620072006100720079004E006F0074004C006F006100640065006400004753007400720047006D006C004100720063004D00750073007400480061007600650045007800610063007
  4006C0079005400680072006500650050006F0069006E0074007300003553007400720047006D006C004D00610079004E006F00740048006100760065004100740074007200690062007500740065007300002F53007400720047006D006C004D007500730074004800610076006500530069006E0067006C00650054006100
  6700002D53007400720047006D006C004D007500730074004800610076006500560061006C0069006400540061006700003B53007400720049006E0063006F006D00700061007400690062006C006500470065006F00670072006100700068007900530069006E006B007300003953007400720049006E0063006F006D00700
  061007400690062006C006500470065006F006D006500740072007900530069006E006B007300002B53007400720049006E007300740061006E0063006500490073004E006F007400560061006C0069006400003D53007400720049006E007300740061006E00630065004F00660050006100730073006500640049006C006C
  006500670061006C005400790070006500002F53007400720049006E00760061006C006900640041006E007400690070006F00640061006C004500640067006500002B53007400720049006E00760061006C006900640042006F0075006E00640069006E00670042006F007800003753007400720049006E00760061006C006
  900640044006500670065006E006500720061007400650050006F006C00790067006F006E00003953007400720049006E00760061006C006900640044006500670065006E0065007200610074006500730054006F0050006F0069006E007400002B53007400720049006E00760061006C006900640045006400670065004F00
  7600650072006C0061007000003D53007400720049006E00760061006C006900640045006400670065004F007600650072006C0061007000530061006D00650043007500720076006500001F53007400720049006E00760061006C006900640045006E00740072007900002D53007400720049006E00760061006C006900640
  04500780074006500720069006F007200520069006E006700004553007400720049006E00760061006C0069006400470065006F0067007200610070006800790049006E00700075007400480065006D006900730070006800650072006500004353007400720049006E00760061006C0069006400470065006F006700720061
  00700068007900520069006E0067004F00750074004F00660050006C00610063006500004153007400720049006E00760061006C0069006400470065006F006D006500740072007900520069006E0067004F00750074004F00660050006C00610063006500002F53007400720049006E00760061006C0069006400490073006
  F006C00610074006500640050006F0069006E007400002553007400720049006E00760061006C00690064004F00700065006E00520069006E006700002353007400720049006E00760061006C006900640050006F006C00790067006F006E00002F53007400720049006E00760061006C006900640052006500640075006E00
  640061006E007400520069006E006700002B53007400720049006E00760061006C0069006400520069006E0067004F007600650072006C0061007000002753007400720049006E00760061006C0069006400530070006C0069007400520069006E006700003553007400720049006E00760061006C0069006400530070006C0
  069007400520069006E00670055006E006B006E006F0077006E00001D53007400720049006E00760061006C00690064005400790070006500002353007400720049006E00760061006C006900640055006E006B006E006F0077006E0000395300740072004C0069006E00650061007200520069006E00670048006100730054
  006F006F0046006500770050006F0069006E007400730000375300740072004C0069006E00650053007400720069006E0067004E006500650064007300540077006F0050006F0069006E0074007300002F5300740072004C0069007300740043006100700061006300690074007900450078006300650065006400650064000
  0255300740072004E0065007300740069006E0067004F0076006500720066006C006F007700002D5300740072004E006F004D006F0072006500430061006C006C00730045007800700065006300740065006400002F53007400720050006C006100740066006F0072006D004E006F00740053007500700070006F0072007400
  65006400003953007400720050006F0069006E00740043006F006F007200640069006E00610074006500490073004E006F007400560061006C0069006400004B53007400720050006F006C00790067006F006E004500780074006500720069006F007200520069006E00670048006100730054006F006F00460065007700500
  06F0069006E0074007300003D53007400720050006F006C00790067006F006E004500780074006500720069006F007200520069006E0067004E006F0074004100520069006E006700004B53007400720050006F006C00790067006F006E0049006E0074006500720069006F007200520069006E00670048006100730054006F
  006F0046006500770050006F0069006E0074007300003D53007400720050006F006C00790067006F006E0049006E0074006500720069006F007200520069006E0067004E006F0074004100520069006E006700003B53007400720050006F006C00790067006F006E00520069006E00670048006100730054006F006F0046006
  500770050006F0069006E0074007300002D53007400720050006F006C00790067006F006E00520069006E0067004E006F0074004100520069006E006700003753007400720050006F0073004C006900730074004800610073004F006400640043006F006F007200640069006E00610074006500730000235300740072005000
  6F0073004C006900730074004900730045006D00700074007900003953007400720050006F0073004D007500730074004800610076006500540077006F0043006F006F007200640069006E006100740065007300003F53007400720052006500640075006300650050006100730073006500640049006C006C0065006700610
  06C0054006F006C006500720061006E0063006500002553007400720053006500740053007200690064004D00690073006D0061007400630068000053530074007200530069006E0067006C006500530069006400650052006500640075006300650050006100730073006500640049006C006C006500670061006C00410072
  0065006100440065006C0074006100002353007400720053007200690064004F00750074004F006600520061006E0067006500003153007400720053005400430075007200760065004E0049006E0064006500780054006F006F0053006D0061006C006C00003753007400720053005400470065006F006D006500740072007
  9004E0049006E0064006500780054006F006F0053006D0061006C006C00003F5300740072005300540049006E0074006500720069006F007200520069006E0067004E0049006E0064006500780054006F006F0053006D0061006C006C0000315300740072005300540050006F0069006E0074004E0049006E00640065007800
  54006F006F0053006D0061006C006C00007753007400720053005400520065006C0061007400650050006100730073006500640049006E00740065007200730065006300740069006F006E005000610074007400650072006E004D0061007400720069007800570069007400680049006E0063006F007200720065006300740
  0530069007A006500007F53007400720053005400520065006C0061007400650050006100730073006500640049006E00740065007200730065006300740069006F006E005000610074007400650072006E004D006100740072006900780057006900740068004E006F007400560061006C0069006400430068006100720061
  006300740065007200002353007400720055006E0065007800700065006300740065006400430061006C006C00002553007400720055006E0065007800700065006300740065006400430061006C006C003200002F53007400720055006E006500780070006500630074006500640045006E0064004F00660049006E0070007
  5007400002953007400720055006E0065007800700065006300740065006400560065007200730069006F006E00002953007400720055006E006B006E006F0077006E004C006100620065006C0049006E0057004B005400002953007400720055006E007200650063006F0067006E0069007A006500640054006F006B006500
  6E000011530074007200560061006C00690064000035530074007200570072006F006E00670043006F006D007000610074006900620069006C006900740079004C006500760065006C0000494D006900630072006F0073006F00660074002E00530071006C005300650072007600650072002E00540079007000650073002E0
  06F00720064007000610074006800720065007300003341007200670075006D0065006E0074004E006F007400530071006C004800690065007200610072006300680079004900640000154200610064004F0072006400700061007400680000214200610064004F0072006400700061007400680053007400720069006E0067
  0000154300680069006C0064004F007200640065007200001B4E00650067006100740069007600650049006E0070007500740000194E006F006E004E0075006C006C0049006E0070007500740000134E006F00740041004300680069006C00640000134E0075006C006C0049006E0070007500740000194E0075006C006C005
  2006500660049006E00700075007400001D4F0072006400700061007400680054006F006F004C006F006E00670000195200650070006100720065006E0074004100720067007300001B52006500730075006C00740054006F006F004C006F006E00670000032F0000032E00001541007000700065006E006400420069007400
  7300000D6300680069006C0064003200000D6300680069006C00640031000011570072006900740065004F007200640000254700650074005200650070006100720065006E00740065006400560061006C00750065000009520065006100640000097400680069007300000D720065006100640065007200000B57007200690
  074006500000D7700720069007400650072000000000095ACDB66C736E745B6886080DC8B84C30003200001042001010805200101111505200101111D0420010102042001010E05200101115506200101118081081512809001128124081512809001128128062001011180B5052001011D0E062001011280C9032000020615
  1280A5011C04200013000320001C06151280A1011C092000151280A50113000520001280F1052002010E0E0620010111816504070111300407020202040001020D040702080803070108050703080808050702112C0E032000050500001281610A00050E1281910E1C1C1C040701112C1907141128080208080808080808050
  808020811201120080808032000080320000D0400010D0D08070508080808111C0F070C112808080808080808080808080420010105042001010D06070311300D0D0C0005011280C5081280C5080804070111180607030808114C08070508080808114C040701114C11070E114C080808080808080808080808080407020208
  060702113011300500020D0D0D0507030D0D0D0C070908112008080808080808070704080808111C060703080811180407011120070701151169010D05151169010D0520010113000407011148061001001D1E00030A011C0900030E1281910E1D1C06070311480D0D0307010E0320000E040001020E080003080E0E11819D0
  50002020E0E052002020E0E0520001181A10800030E1281910E1C0407011D0D021D0D0800011280C91181A50920021C1280C91281A90507021D0D080307010D080705114C0D0D0D0D0B0702151280A5011E001E000715128090011E0007151280A1011E0007151280A5011E00021E0007151280A901113007151280A9011140
  07151280A901114406151280AD0108040701114407151280A901113C040A01114406070211181140052001130008040A011140040A0111300707031140114008040A01113C0620020108130006151280A9010D0907031D0D1D0D1D113C0520001D13000600011180C11C0900021180C11C1181AD070002181280C5080607021
  1809C051407071D11301D11401D11441D0D1D0D1D113C114C031D1130031D1140031D1144031D113C0920021281B50E1181B90620021C1C1D1C030701180500010F0118050002080808040001180E04000101180500020E18080407020D0E0507030D0E0E0900040E1281910E1C1C040702080E0607040E08080E0507030803
  0E0807021280C91280CD0700021280C90E02090002021280C91280C90600011C1280C90507011280CD0500001181C9060001021181C902060E09151180DD021181B80E0720020113001301030000020500020E0E0E020618050002021818030000080600030E0E1C1C0607021181B80E03061300030613010500020E0E1C030
  0000E0500001181DD04000101080D0704114C1280A81280A81280A00A0703114C1280A81280A0090703021280A81280A80907051D081D03020803090002011280C51181E904200103080D07041D081280A81280A81280A40607020D1280A807070211301280A8060702021280A80907030D1280A81280A84607120F020F020F
  024514020200020000451402020002000045140202000200000F1130451D11300F0D451D0D0F0D451D0D0F1140451D11400F1144451D11440F113C451D113C0714020200020000062002100208080420010808052001010F0128070C0F1130451D11300F0D451D0D0F0D451D0D0F1140451D11400F1144451D11440F113C451
  D113C0507011280A807070302021280A8100705114C1280A81280A81280A81280A00D07041280A81280A81280A0114C0A07031280A81280A0114C05070111809C072002020E11819D04000102030520020E030307140502000200000520020508080520020108080507011280F40D070908081181D00707070D070704200101
  1C0807060D0D0D0D0D0D1607101181D002020208080807070808070D0D1181C802062003010808020707050707020202080003011280C508080A0003011280C51280C50805200202080807070307071181C80A070407071181C81181D007070307071181D00F07071D07020208118101118105114C0D07061D0702020811810
  11181050407020B090607040909090B0607021281E00D0D070B0D0D0D0D080D0D0D0D0D0D11070B1281E0080808020808020D0D1181100A0708020202070707070807070309091181100407020909080703114C1181010B070702114C1181010507011281140420001D050507021D05080607040B0E0803030701020D070412
  808D128098122412812405200012808D08070212811D12808905000012811908000112808912814906200101128149060003080E0E0206200101118125070702128098122405070112811D0500001280E5052001011D0505200012814904061181050600011181050804061181250420010E0E0600011181250E05000012812
  905070112812D04061181010600011181010204061180ED0600011180ED0D050701118101060001021181010800011181011181010B00021181011181011181010907051154090909114C0A0703118105118101114C0B0002118101118105118105060702114C114C0807041D0E114C080807070311480D114C0600010D1180
  ED0607021148114C4F071B14020200020000080808080F020F020F024514020200020000451402020002000045140202000200000F020F020F020D0D08140202000200000D0D0F020F020F020F024514020200020000080814070A114C0D0D0D11480D114C114C12812C1280B0120709114C0D0D0D11480D114C12812C1280B
  00707021280B8114C0307011C0500001282010420011C0E0407021C02060002011C100203000001040001011C021D0E0B070312808D128098128128050701128098050702114C0D070702118101114C070702114C1181050B07031402020002000008080607040D0D0D0D0807050D0D0D0D114C091512813502081281300E07
  02128130151181390208128130091511813902081281300420001301052001021300050701128130062001130113000407020D0D050701118138080702118138118138040701125C05070112812805070112814407151280A9011E00040A011E00060001081280C908151280AD011181F00C0702151169010D151169010D050
  7011181F00600030E0E0E0E042001020E0520020E0E0E06151280AD010A06151280AD01090320000A0720020A0A1182150307010A0420010109030701090206022A070F02021181F811201181F81181F81181F81181F81181F81181F81181F81181F81181F81181F81181F80607030909112008070209151169010D28070E0D
  0D0D0D151169010D151169010D151169010D151169010D09020909151169010D151169010D0507011181F8060002091D05080600020D1D05080807020D151169010D042001050A0407011D050820040A0A1D050808040702080504200101030720020E0E128191042001030A0507011181FC04000103030E07040D0D1511690
  10D151169010D31070F020D0D151169010D151169010D0D0D151169010D151169010D0D0D151169010D151169010D151169010D151169010D0407011D030820040A0A1D030808052001011D030707031281510D0E062001128151030C0004020E11821D128191100D020608052000128221072002010E1282210720020E0E12
  81610E070A09020911820C07020A0909030500020909090400010D03030701070A0003011280C51280C50A042001021C0707030909118188160710118180118180090805070805080808070209090504070207080407020905060704070507070C07041281510711817811820C0620011281510A0620011281510E050701118
  184050703070505050703070509070705090909090809070707070709080808050703080705040702090B040702080B05070111820005070309080A0E070808050808081181801181800805070112817C0715128225011D05090000151282250113000520010813000715128225011D070920020112816D118171072002010E
  1280CD07070509080808080D070911819408080808080808081D070F020211820C11820C07070A0A0711817811820C0711817811820C070507011181A008070212819C1181A00406118181060001118181060607021181A0091707101181A01D051D05080808080808081D0508080808050607020E1181A00520020E0808080
  7021181A0118101070704091D0508090520011D0508072003011D0508080B07061281CC1D050507070708151280F9011280F40507011280E5050703080D0D08151280F9011281140707030B1281280B0B07060808081281281D05080507011281EC08B77A5C561934E08980A000240000048000009400000006020000002400
  00525341310004000001000100272736AD6E5F9586BAC2D531EABC3ACC666C2F8EC879FA94F8F7B0327D2FF2ED523448F83C3D5C5DD2DFC7BC99C5286B2C125117BF5CBE242B9D41750732B2BDFFE649C6EFB8E5526D526FDD130095ECDB7BF210809C6CDAD8824FAA9AC0310AC3CBA2AA0523567B2DFA7FE250B30FACBD62D
  4EC99B94AC47C7D3B28F1F6E4C810310036002E0030002E0030002E0030000410000000040000000004E803000008310036002E003000284D006900630072006F0073006F00660074002000530051004C00200053006500720076006500720080847B0030007800620064003700660037006300300064002C00300078003700
  6300330036002C003000780034003700320031002C007B0030007800610066002C0030007800610038002C003000780062002C0030007800610037002C003000780030002C0030007800650032002C0030007800360064002C0030007800390065007D007D001E530051004C002000530065007200760065007200200032003
  00032003200324D006900630072006F0073006F00660074002000530051004C00200053006500720076006500720020003200300032003200083200300032003200063100360030000A730071006C003100330032530051004C0053006500720076006500720042006F006F006B0073004F006E006C0069006E0065002E0031
  0036002E0030000E530051004C0032003000320032001A530051004C0053006500720076006500720032003000320032004C7B00360046003300420034003700430039002D0031003600350039002D0034003500310031002D0041003300460035002D003000300032004500320034003900360039004400460044007D00483
  30046004500370045003600320035002D0039003600340037002D0034003800460034002D0042003000430038002D004100430039004400320033004400420031003600320035000C530051004C007600310036000E4D005300530051004C00310036000C4D00530041005300310036000C4D005300520053003100360004B4
  00000012530051004C003100360030004D00530049001E530051004C0031003600300045007800630065007000740069006F006E0080A47B0030007800320034003100340062006300310062002C0020003000780031003500370032002C0020003000780034006300640039002C0020007B0030007800390063002C0020003
  0007800610035002C002000200030007800360035002C00200030007800310036002C002000200030007800360064002C00200030007800380064002C002000200030007800650066002C002000200030007800330064007D007D001E61006B0061002E006D0073002F007500730065007400650072006D0073002C6D007300
  2D00680065006C0070003A002F002F004D0053002E00530051004C00430043002E007600310036002A6D0073002D00680065006C0070003A002F002F004D0053002E0056005300430043002E0076003900300008310034002E0030000633002E0035000633002E0037000401000000040400000004C800048004C900048004C
  A0004800100010101020103010401050106010701080109010A010B011001200402000000040300000004050000000406000000040700000004080000000409000000040A000000040B000000040C000000040D000000040E000000088165BBBA8CAB4B3C08F8C1631ADCA54C403468007400740070003A002F002F00770077
  0077002E006F00700065006E006700690073002E006E00650074002F0067006D006C006A68007400740070003A002F002F0073006300680065006D00610073002E006D006900630072006F0073006F00660074002E0063006F006D002F00730071006C007300650072007600650072002F0032003000310031002F006700650
  06F0067007200610070006800790004FFFFFFFF04FEFFFFFF2E530071006C005300650072007600650072005300700061007400690061006C003100360030002E0064006C006C00080000000000003042044000000004120000000400000400040020000008000000000000104204E610000008FCA9F1D24D62503F0895D626
  E80B2E113E08000000000000010008000000000000F0C208000000000000004308000000000000F0420800000000000000C3080000000000001043046E000000043F420F00087B14AE47E17A843F0811EA2D819997713D08AA4C58E87AB6FB3F081C339045A779E23F083E2C0C70BD20EA3F080000000000000200080000000
  00000040004C7FFFF7F0800000000806ECD40080000000000805640047E0000000441420F000443420F0004D007000004B80B0000020200020100020000040F00000004110000000413000000041400000004150000000416000000041700000004180000000419000000041A000000041B000000041C000000041D00000004
  1E000000041F00000004200000000421000000047C03000004FF000000809E2E01808453797374656D2E53656375726974792E5065726D697373696F6E732E53656375726974795065726D697373696F6E4174747269627574652C206D73636F726C69622C2056657273696F6E3D342E302E302E302C2043756C747572653D6
  E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038391501540210536B6970566572696669636174696F6E010206090306111002060503061114030611180306111C03061120030611280306112C02060D04061D113003061D0D04061D114004061D114404061D113C0306115403
  0612240406128098040611808803061134040612808904061180E8040612808D04061180840306114C0806151280A90111300706151280A9010D0806151280A901113C0806151280A90111400806151280A90111440706151280AD010804061181AC04061281B004061281B404061180C104061280A40A06151180DD021181B
  80E04061180BC04061180C003061D0E04061280C404061280C804061280CC04061280D003061D0708061405020002000008061402020002000004061181C005061D1181C804061280E504061181C804061280FC040612812C04061280F004061280F504061280F404061281D404061181D809061D1402020002000004061181
  1002060B0406128128040612811404061281E404061181E804061280F104061D1D0E02060A05061F810D0202061C0A0615128135020812813003061D050906151280AD011181F004061181F40606151169010D04061281490306127D0706151280AD010A0706151280AD0109040612814D0406128129020603040612815D040
  6128161040611820004061182080206070406118210040611818805061D118194040612817C05061D118218040611818404061181A0040611821C04061182280406118220040611822404061181B804061181BC04061181C404061281CC0906151280F9011280F40906151280F90112811404061181F004061181F804061181
  FC0406118204040611820C0406118214040611822C0520010111200F2004010D0D151169010D151169010D1B2008010D0D151169010D151169010D0D0D151169010D151169010D05200101111C052001011118052002010D0D0700020211301130072004010D0D0D0D062002010811180720030108081120092006010808080
  80808052001011138062003010808080C2003011D11301D11401D1144102005011D11301D11401D11441D0D1D0D132006011D11301D11401D11441D0D1D0D1D113C0720040108080808082005010808080808052001011130052001114408062002010811440520011140080620021140080806200201081140052001111C08
  0520020808080720031130080808062002113008080520011130080520011120080420001120092004011279112C0E0206200201127902052001011279072003011279020205200101127D052001114C08042000114C052001113808042000113808200401114C08080804200102080520001D11300520001D11400520001D1
  1440420001D0D0520001D113C0B000401100D100D100D100D07200202100D100D080004114C0D0D0D0D052001011224062002010812240720030808122408082001151169010D0805000102111C0500010211200700020211281128080002112811281128062001011180BC052000128128062001011180C005200012812406
  20010112812405200101126005200101126405200101126805200101126C062001011280890820020112808D1224092004010E0E0E1281A80620010112812805200101127805200101127C062001011280800620010111808406200201114C08062001011180880620010112808C131001021E0015128090011E00151280A10
  11E00040000114C0F20020110151280A9010D151169010D062001011181AC092002011181AC1181AC0C2003011181AC1181AC1181AC0E000601080808081280A01011809C09200411809C0808080807000201051280A0062001011280C5032000180520001280C507200111809C114C060003011818080400010E0E06000301
  0E181807000401181818180800050118181818180A000701181818181818180B0008011818181818181818090006011818181818180620020111100E0420001110060003180E18090500020E080810000411101181BC11809C11809C1280A00A0002111011809C1280A00C0003111011809C11809C10020C0003111011809C1
  1809C1D08090002111011809C100D0A0002111011809C101130090002111011809C10020D0005111011809C0D0D021280A00C0003111011809C11809C100D100005111011809C1011541009100910090B0003111011809C0D1280A00C0004111011809C0D021280A00F0005111011809C100D100D100D100D0D000511101180
  9C0D0210021002110006111011809C0D1011541009100910090B0003111011809C1148100D100006111011809C11809C11480D02100D11000511101181BC11809C11809C0D1280A00D0004111011809C11809C0D10020F0006111011809C11480D0D021280A00D0004111011809C11480D1280A00A0003111011809C0D100D0
  B0003111011809C0D1011300E0005111011809C11480D021280A00500010111100B0003114C1181BC114C114C090004114C114C0D0D02080003114C114C0D0D060001114C114C080002114C114C114C07000202114C114C08000302114C114C0E0800021D08114C114C0500010D114C05000102114C0700020D114C114C1400
  0D111011809C0D0D0D0D0D0D0808181818100222000B01114C0D0D0D0D0D0D14020200020000140202000200001402020002000010021C0016111011809C0D0D0D0D0D0D0D0D0D08080202020218181818181820001601114C0D0D0D0D0D0D0D0D0D020202020F020F020F020F020F020F0208080E000501114C10115410091
  0091009070002114C114C0D080003114C114C0D020D000501114C100D100D100D100D0800030210114C0D020F000601114C0D1011541009100910090700020D114C11480B00050D114C114C11480D020C0004114C1181BC114C114C0D090003114C114C114C0D08000302114C114C0D090003114C114C11480D0B0005114C11
  4C11480D0D020600020D114C0D0700021130114C0D0A0004114C114C11480D020D0003111011809C11809C1280A00F0004111011809C11809C11481280A00A0003114C114C114C11480B0003111011809C0D10113409000301114C0D101134090002111010113411340800020110113411340E0006111011809C0D0D0202128
  0A00A0005114C114C0D0D02020900030D11301130114817000711809C114C0F11300F0D0F0D0F11400F11440F113C0500010E112005000111200E0700011180BC112007000111201180BC0700011180C0112007000111201180C0060001112011200720020112241224062001011280C4062001011280C8062001011280CC06
  2001011280D0042000111806000305070707082002011181C01D0704200107070920040109091181C8080A2003011280E51181C808090002021280F41280F418200E0112812C020202080D0D0D0D1D071181C0081180ED02062001021181D00F2006011181D0071008100810081002082003011181D007080C2007011181D00
  70802020D0D0B2006011181D00708020D0D15000C1280E91281280D0D0D0D0808080808081180ED0C0004011C101280E5100610081100081280E91281240808080808081180ED0600030B08090909000401080B100910090500020B0B0805000108100B0C2005010B0B1181101281280213200C0112812C0D0D0D0D081180ED
  02080202020820011281E01281E00900060B0D0D0D0D0D0D062001021281E00F2006011281E0081008100810081002082003011281E008080B2006011281E00808020D0D062001011280F104000102081200091280E91281280D0D0D0D0808081180ED0E00051280E91281240808081180ED0F0005011C101D051005101D051
  01D050600021D050B080400010E1C040001081C0600011281281C040001021C0620020111380806200201113008080002128124114C08042000114809000212812412811908052000128119050000128124080001128124118125050002011C0E0800031281240D0D080A0003114C1120128129080B00031281241120128129
  080B000312812411201280E508090002128124128129080900021281241280E5080520001280E50800011281241280E5052000118105062001011181050520001181250520001281290420010E020720021280E502020520001181010820011181011281240820011180ED1281240620011281240D082001128124128124042
  00102020520001180ED062001128124080620011181010E0820031281240D0D020720021281240D0222200F01020D0D0D0D0D0D0808140202000200001402020002000010081008100210020B200401100D100D100D100D08200212812C0D100206200112812C0D080002128128114C08090002128128128119080500001281
  280800011281281181250800031281280D0D080B00031281281120128129080B000312812811201280E508090002128128128129080900021281281280E5080800011281281280E50820011181011281280920021181011281280E0820011180ED1281280620011281280D08200112812812812806200112812808082003128
  1280D0D020720021281280D020B200801080E080E0E0D0D0D0500001280E9100007011C1008100E1008100E100E100D050001114808062003010D0D0D0700021181380D0D0600010D1181380800011281241281280720030108051D050E00071280E91281280D0D0D0D08080A00031280E912812408080F00081280E912812C
  0D0D0D0D0808020900041281440D0D0D0D0B0004011C10081005101D050C00051281281180BC0D0D0D0D0D10010201151280A9011E001E000B10010108151280A9011E000920060108080D0D0D0D050002020D0D062001011181F4062001011181F00F0004020D0D151169010D151169010D092002011181F41181F40C20030
  11181F41181F41181F40620010E1181F404000109090800040E11540909020900050E115409090902082003011281490202082002011280E5122406200201112008082003011181F80202062001011181F8092004011181F80902020B20031181F81120100210020A2003021181F810021002062001091181F80620010D1181
  F80A2001151169010D1181F80820021D05081181F80B200311201181F810021002080002011D051181F80720020112814D02082002011281291224032000030420010E08072000151169010D042001020305000012815D060001011281610620010112817C062002011D0509042001010A08200112817C12817C09000202128
  17C12817C062002021D050903200009080003021D05100909062001011181840720020212817C02072003021D0509020620011D0510090520001181840720030107071005072003010707100B0720030110070B0707200201100710090D2003011007101181781011820C0B2003011007100A1011820C0F20050112817C0210
  07100A1011820C08200301100709100A0C20030110071011817811820C0720030110070A080620020110070A0920030110070A11820C0A00031181881D051D0509080003081D051D0509040001070A0C20030112817C12817C12817C05200012817C0500001181A00B20021181A01181A01181A00820011181011181A005200
  01181810620011181A0080520001181A00800011181A01181250B00021181011181A01181A0042001081C062001081181A0052002011C180920021280951280991C062001011280950E200601080808081280A01011809C142008128095080808081280A01011809C1280991C0A2002011011809C12809507200201051280A0
  0D2004128095051280A01280991C082003011281CC07070500001281CC0820011280E51280F00A20031280E51280F007070520001281CC0C2007010D0D0D0D1281CC070708200301091280F0080520001280F4092002011281CC1181C80B2004011281CC07071181C805200011822C082003011281DC09090320000B0520020
  B09090A2005010D0D1281E009090900041281280D0D0D0D0720021281280909062003010202080520001281140A2003011281E0118110020C2005011281E0090911811002082000151280A5011C03280008042800114C04280011380328000D05280012812805280012812403280002040800114C0528001280C50428001110
  042800112004280011180328001C0508001281240528001181050528001180ED05080012812803080008030800020328000305080012815D0508001281610308000E0508001181A00801000800000000001E01000100540216577261704E6F6E457863657074696F6E5468726F7773010801000200000000000501000100000
  50100000000190100144D6963726F736F66742053514C2053657276657200002401001F4D6963726F736F66742E20416C6C207269676874732072657365727665642E00004D0100484D6963726F736F66742053514C20536572766572206973206120726567697374657265642074726164656D61726B206F66204D6963726F
  736F667420436F72706F726174696F6E2E00001A0100154D6963726F736F667420436F72706F726174696F6E00001001000B31362E302E313030302E3600005301004E443A5C6462735C73685C35756A355C313030385F3035343230395C636D645C395C546F6F6C735C73636F7061735C637573746F6D5C646174615C736E6
  B5C73716C32303033736E6B65792E736E6B00003901001C2E4E45544672616D65776F726B2C56657273696F6E3D76342E362E320100540E144672616D65776F726B446973706C61794E616D65002001000100540E1146696C6C526F774D6574686F644E616D650746696C6C526F77240100020054020F497344657465726D69
  6E69737469630154020949735072656369736501240100020054020F497344657465726D696E697374696301540209497350726563697365005A010055506F70756C617465284947656F67726170687953696E6B29206D6574686F64206973206F62736F6C6574652C2075736520506F70756C617465284947656F677261706
  87953696E6B3131302920696E73746561642E000058010053506F70756C617465284947656F6D6574727953696E6B29206D6574686F64206973206F62736F6C6574652C2075736520506F70756C617465284947656F6D6574727953696E6B3131302920696E73746561642E0000450100404D6963726F736F66742E53716C53
  65727665722E54797065732E5370617469616C47726964436F7665726167652B3C47726964436F7665726167653E645F5F320000817B010007005455794D6963726F736F66742E53716C5365727665722E5365727665722E446174614163636573734B696E642C2053797374656D2E446174612C2056657273696F6E3D342E3
  02E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038390A446174614163636573730000000054557F4D6963726F736F66742E53716C5365727665722E5365727665722E53797374656D446174614163636573734B696E642C2053797374656D
  2E446174612C2056657273696F6E3D342E302E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038391053797374656D4461746141636365737300000000540216496E766F6B654966526563656976657249734E756C6C0054020A4F6E4E756C6
  C43616C6C0054020F497344657465726D696E6973746963015402094973507265636973650154020949734D757461746F7200817B010007005455794D6963726F736F66742E53716C5365727665722E5365727665722E446174614163636573734B696E642C2053797374656D2E446174612C2056657273696F6E3D342E302E
  302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038390A446174614163636573730000000054557F4D6963726F736F66742E53716C5365727665722E5365727665722E53797374656D446174614163636573734B696E642C2053797374656D2E4
  46174612C2056657273696F6E3D342E302E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038391053797374656D4461746141636365737300000000540216496E766F6B654966526563656976657249734E756C6C0054020A4F6E4E756C6C43
  616C6C0154020F497344657465726D696E6973746963015402094973507265636973650154020949734D757461746F72008153010005005455794D6963726F736F66742E53716C5365727665722E5365727665722E446174614163636573734B696E642C2053797374656D2E446174612C2056657273696F6E3D342E302E302
  E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038390A446174614163636573730000000054557F4D6963726F736F66742E53716C5365727665722E5365727665722E53797374656D446174614163636573734B696E642C2053797374656D2E4461
  74612C2056657273696F6E3D342E302E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038391053797374656D446174614163636573730000000054020F497344657465726D696E6973746963015402094973507265636973650154020949734
  D757461746F72001901000200000007474C5374617465084572726F724D736700007201000200000005005402174973496E76617269616E74546F4475706C696361746573015402124973496E76617269616E74546F4E756C6C73015402124973496E76617269616E74546F4F726465720154020D49734E756C6C4966456D70
  74790054080B4D61784279746553697A65FFFFFFFF6001000100000004005402174973496E76617269616E74546F4475706C696361746573015402124973496E76617269616E74546F4E756C6C73015402124973496E76617269616E74546F4F726465720154020D49734E756C6C4966456D707479010801000100000000003
  D0100384947656F6D6574727953696E6B206973206F62736F6C6574652C20757365204947656F6D6574727953696E6B31313020696E73746561642E00003F01003A4947656F67726170687953696E6B206973206F62736F6C6574652C20757365204947656F67726170687953696E6B31313020696E73746561642E00003C01
  0002000000030054020D4973427974654F7264657265640054080B4D61784279746553697A65FFFFFFFF54020D497346697865644C656E677468004001003353797374656D2E5265736F75726365732E546F6F6C732E5374726F6E676C7954797065645265736F757263654275696C64657207342E302E302E3000004101000
  2000000030054020D4973427974654F7264657265640154080B4D61784279746553697A657C030000540E044E616D650E53716C486965726172636879496412010001005408074D617853697A65FFFFFFFF1F3E0000CECAEFBE01000000910000006C53797374656D2E5265736F75726365732E5265736F7572636552656164
  65722C206D73636F726C69622C2056657273696F6E3D342E302E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038392353797374656D2E5265736F75726365732E52756E74696D655265736F757263655365740200000052000000000000005
  0414450414450A7673182FB631A856EFAE98EA176D08F31CCE89096493F9184248A95C90ECB97009A2598245FCA9EFD658FA3385EEAA3A45F01A877112EAAC20BEEB4911209B8C43FC2BBDB0C17C408BFA8C48634D3C737FB44C9699B4CCCC06211D2263169D357D4E5DCEE04DCDE223A00E00A6B89E0E89F2EE4CCDB3EE4FD
  1C57EB344EF9EE9EF513F305AC87F482D18CF487F070F96363D8F9B0B6F706276D920BCF14C913F686C6140FCB62176C33C61879274819B5BA732941A7AC2BC0C5FA2BADC34F2C50D0BD2C9C73982D66C117341CE76437CCE9CE380B2CB73AC7A7C03E655D6944DF7C5445C4A099481998FF486166774A00B44F4EA71B21502
  BA59353C5423654A74198558D465B585AD50059A019DA5B0F43BD5EA3367C613B0092612D2F64648CE88E643DBE4A675533E767A01657685AACBD687720B3695A45896A0B3EDE76312D7779055FA07940090000850E0000F50E00009E0A0000740700001F0300004E0300001D0A000033020000900900008D040000F20C0000
  050E00007D050000F4000000C2110000970000004A050000720D00009A06000000000000770A00002A0600001C12000012110000DE020000620C0000E80F000094100000C6040000160B0000A30B000059060000560000007001000079030000F9030000A2030000FC06000095110000BA0E0000420E00006D0F00000708000
  0C8080000F2090000C3090000E6010000EF110000A3070000CD060000290100008102000031120000ED0500006211000038080000EB100000560A0000130C0000490B000052040000720B0000AE050000D60B00005A0200006B100000380F00003707000011050000A30C000069090000A501000025000000E40700000D0900
  00D90A000081080000A30D0000330D0000DE0D000039110000AE1500002053007400720041006E007400690070006F00640061006C004500640067006500000000002C5300740072004100720063004E0065006500640054006F00480061007600650045007100750061006C005A00DD0000003C53007400720042007500660
  066006500720050006100730073006500640049006C006C006500670061006C00440069007300740061006E00630065003301000058530074007200420075006600660065007200570069007400680054006F006C006500720061006E006300650050006100730073006500640049006C006C006500670061006C0054006F00
  6C006500720061006E0063006500A40100003053007400720042007500660066006500720057006F0075006C0064005700720061007000410072006F0075006E0064001102000042530074007200430069007200630075006C006100720053007400720069006E0067004E00650065006400730054006800720065006500500
  06F0069006E00740073006D0200003053007400720043006F006D0070006F0075006E006400430075007200760065004D00690073006D006100740063006800F60200003C53007400720043006F006D0070006F0075006E006400430075007200760065004E006500650064007300540077006F0050006F0069006E00740073
  0096030000485300740072004300750072007600650054006F004C0069006E00650050006100730073006500640049006C006C006500670061006C0054006F006C006500720061006E00630065001B0400002253007400720045006D0070007400790054006500780074004500720072006F0072008D0400002253007400720
  0450078007000650063007400650064004E0075006D006200650072009F05000058530074007200460075006C006C0047006C006F0062006500430061006E006E006F0074004200650050006100720074004F006600470065006F006D00650074007200790043006F006C006C0065006300740069006F006E00ED0500003C53
  0074007200460075006C006C0047006C006F0062006500430061006E006E006F007400480061007600650045006C0065006D0065006E0074007300050700002A53007400720047004C004C006900620072006100720079004E006F0074004C006F0061006400650064009C07000026530074007200470065006E00650072006
  900630054006500780074004500720072006F007200DE07000024530074007200470065006E00650072006900630057004B0042004500720072006F0072001408000052530074007200470065006F0067007200610070006800790043006F006F007200640069006E0061007400650073004C00610074006900740075006400
  6500490073004E006F007400560061006C00690064004C08000054530074007200470065006F0067007200610070006800790043006F006F007200640069006E0061007400650073004C006F006E00670069007400750064006500490073004E006F007400560061006C00690064008808000036530074007200470065006F0
  067007200610070006800790049006E00700075007400490073004E006F007400560061006C0069006400CB08000034530074007200470065006F006700720061007000680079005300720069006400490073004E006F007400560061006C0069006400A40900004653007400720047006D006C004100720063004D00750073
  0074004800610076006500450078006100630074006C0079005400680072006500650050006F0069006E0074007300590A00003453007400720047006D006C004D00610079004E006F00740048006100760065004100740074007200690062007500740065007300880A00002E53007400720047006D006C004D00750073007
  4004800610076006500530069006E0067006C006500540061006700030B00002C53007400720047006D006C004D007500730074004800610076006500560061006C0069006400540061006700570B00003A53007400720049006E0063006F006D00700061007400690062006C006500470065006F0067007200610070006800
  7900530069006E006B007300A70C00003853007400720049006E0063006F006D00700061007400690062006C006500470065006F006D006500740072007900530069006E006B0073001D0D00002A53007400720049006E007300740061006E0063006500490073004E006F007400560061006C0069006400910D00003C53007
  400720049006E007300740061006E00630065004F00660050006100730073006500640049006C006C006500670061006C0054007900700065006E0E00002E53007400720049006E00760061006C006900640041006E007400690070006F00640061006C004500640067006500D00F00002A53007400720049006E0076006100
  6C006900640042006F0075006E00640069006E00670042006F0078005D1000003653007400720049006E00760061006C006900640044006500670065006E006500720061007400650050006F006C00790067006F006E00D61000003853007400720049006E00760061006C006900640044006500670065006E0065007200610
  074006500730054006F0050006F0069006E007400271100002A53007400720049006E00760061006C006900640045006400670065004F007600650072006C0061007000651100003C53007400720049006E00760061006C006900640045006400670065004F007600650072006C0061007000530061006D0065004300750072
  0076006500B71100001E53007400720049006E00760061006C006900640045006E00740072007900FA1100002C53007400720049006E00760061006C00690064004500780074006500720069006F007200520069006E006700381200004453007400720049006E00760061006C0069006400470065006F00670072006100700
  06800790049006E00700075007400480065006D006900730070006800650072006500A21200004253007400720049006E00760061006C0069006400470065006F00670072006100700068007900520069006E0067004F00750074004F00660050006C00610063006500391400004053007400720049006E00760061006C0069
  006400470065006F006D006500740072007900520069006E0067004F00750074004F00660050006C006100630065009A1400002E53007400720049006E00760061006C0069006400490073006F006C00610074006500640050006F0069006E007400F41400002453007400720049006E00760061006C00690064004F0070006
  5006E00520069006E0067005B1500002253007400720049006E00760061006C006900640050006F006C00790067006F006E00971500002E53007400720049006E00760061006C006900640052006500640075006E00640061006E007400520069006E006700D51500002A53007400720049006E00760061006C006900640052
  0069006E0067004F007600650072006C0061007000351600002653007400720049006E00760061006C0069006400530070006C0069007400520069006E006700731600003453007400720049006E00760061006C0069006400530070006C0069007400520069006E00670055006E006B006E006F0077006E00C61600001C530
  07400720049006E00760061006C00690064005400790070006500181700002253007400720049006E00760061006C006900640055006E006B006E006F0077006E0050170000365300740072004C0069006E00650053007400720069006E0067004E006500650064007300540077006F0050006F0069006E0074007300731700
  00385300740072004C0069006E00650061007200520069006E00670048006100730054006F006F0046006500770050006F0069006E0074007300F11700002E5300740072004C006900730074004300610070006100630069007400790045007800630065006500640065006400A0180000245300740072004E0065007300740
  069006E0067004F0076006500720066006C006F007700FC1800002C5300740072004E006F004D006F0072006500430061006C006C007300450078007000650063007400650064006A1900002E53007400720050006C006100740066006F0072006D004E006F00740053007500700070006F0072007400650064009E19000038
  53007400720050006F0069006E00740043006F006F007200640069006E00610074006500490073004E006F007400560061006C0069006400E11900004A53007400720050006F006C00790067006F006E004500780074006500720069006F007200520069006E00670048006100730054006F006F0046006500770050006F006
  9006E0074007300251A00003C53007400720050006F006C00790067006F006E004500780074006500720069006F007200520069006E0067004E006F0074004100520069006E006700BE1A00004A53007400720050006F006C00790067006F006E0049006E0074006500720069006F007200520069006E006700480061007300
  54006F006F0046006500770050006F0069006E00740073006E1B00003C53007400720050006F006C00790067006F006E0049006E0074006500720069006F007200520069006E0067004E006F0074004100520069006E006700121C00003A53007400720050006F006C00790067006F006E00520069006E00670048006100730
  054006F006F0046006500770050006F0069006E0074007300CD1C00002C53007400720050006F006C00790067006F006E00520069006E0067004E006F0074004100520069006E006700681D00003653007400720050006F0073004C006900730074004800610073004F006400640043006F006F007200640069006E00610074
  00650073001A1E00002253007400720050006F0073004C006900730074004900730045006D007000740079009B1E00003853007400720050006F0073004D007500730074004800610076006500540077006F0043006F006F007200640069006E006100740065007300CA1E00003E53007400720052006500640075006300650
  050006100730073006500640049006C006C006500670061006C0054006F006C006500720061006E0063006500361F00003053007400720053005400430075007200760065004E0049006E0064006500780054006F006F0053006D0061006C006C00961F00003653007400720053005400470065006F006D0065007400720079
  004E0049006E0064006500780054006F006F0053006D0061006C006C00512000003E5300740072005300540049006E0074006500720069006F007200520069006E0067004E0049006E0064006500780054006F006F0053006D0061006C006C0022210000305300740072005300540050006F0069006E0074004E0049006E006
  4006500780054006F006F0053006D0061006C006C00F12100007653007400720053005400520065006C0061007400650050006100730073006500640049006E00740065007200730065006300740069006F006E005000610074007400650072006E004D0061007400720069007800570069007400680049006E0063006F0072
  007200650063007400530069007A006500AC2200007E53007400720053005400520065006C0061007400650050006100730073006500640049006E00740065007200730065006300740069006F006E005000610074007400650072006E004D006100740072006900780057006900740068004E006F007400560061006C00690
  06400430068006100720061006300740065007200532300002453007400720053006500740053007200690064004D00690073006D006100740063006800F923000052530074007200530069006E0067006C006500530069006400650052006500640075006300650050006100730073006500640049006C006C006500670061
  006C004100720065006100440065006C00740061001E2400002253007400720053007200690064004F00750074004F006600520061006E00670065009C2400002253007400720055006E0065007800700065006300740065006400430061006C006C00FE2400002453007400720055006E00650078007000650063007400650
  06400430061006C006C003200322500002E53007400720055006E006500780070006500630074006500640045006E0064004F00660049006E007000750074006D2500002853007400720055006E0065007800700065006300740065006400560065007200730069006F006E00D02500002853007400720055006E006B006E00
  6F0077006E004C006100620065006C0049006E0057004B005400332600002853007400720055006E007200650063006F0067006E0069007A006500640054006F006B0065006E003D27000010530074007200560061006C00690064007A27000034530074007200570072006F006E00670043006F006D0070006100740069006
  20069006C006900740079004C006500760065006C008827000001DA0132343230363A205468652073706563696669656420696E7075742063616E6E6F74206265206163636570746564206265636175736520697420636F6E7461696E7320616E2065646765207769746820616E7469706F64616C20706F696E74732E20466F
  7220696E666F726D6174696F6E2061626F7574207573696E67207370617469616C206D6574686F647320776974682046756C6C476C6F6265206F626A656374732C20736565205479706573206F66205370617469616C204461746120696E2053514C2053657276657220426F6F6B73204F6E6C696E652E015432343231343A2
  043697263756C617220617263207365676D656E74732077697468205A2076616C756573206D757374206861766520657175616C205A2076616C756520666F7220616C6C203320706F696E74732E016F32343130313A205468652064697374616E636520706172616D6574657220287B307D2920666F7220287B317D29206973
  206E6F742076616C69642E2044697374616E6365732063616E6E6F7420626520696E66696E697465206F72206E6F742061206E756D62657220284E614E292E016B32343130383A2054686520746F6C6572616E636520287B307D292070617373656420746F2042756666657257697468546F6C6572616E6365206973206E6F7
  42076616C69642E20546F6C6572616E636573206D75737420626520706F736974697665206E756D626572732E015A32343230373A2054686520737065636966696564206275666665722064697374616E63652065786365656473207468652066756C6C20676C6F62652E204465637265617365207468652062756666657220
  64697374616E63652E01860132343231323A205468652043697263756C6172537472696E6720696E707574206973206E6F742076616C6964206265636175736520697420646F6573206E6F74206861766520656E6F75676820706F696E74732E20412043697263756C6172537472696E67206D7573742068617665206174206
  C6561737420746872656520706F696E74732E019D0132343133343A2053657175656E7469616C207061727473206F66206120636F6D706F756E64206375727665206D7573742068617665206F6E6520636F6D6D6F6E20656E64706F696E742E20416464206120636F6D6D6F6E20656E64706F696E742E20416C6C20636F6F72
  64696E617465732C20696E636C7564696E67206F7074696F6E616C205A20616E64204D2C206D75737420626520657175616C2E01820132343231333A2054686520436F6D706F756E64437572766520696E707574206973206E6F742076616C6964206265636175736520697420646F6573206E6F74206861766520656E6F756
  76820706F696E74732E204120436F6D706F756E644375727665206D7573742068617665206174206C656173742074776F20706F696E74732E017032343135323A2054686520746F6C6572616E636520287B307D292070617373656420746F204375727665546F4C696E6557697468546F6C6572616E6365206973206E6F7420
  76616C69642E20546F6C6572616E636573206D75737420626520706F736974697665206E756D626572732E018F0232343131323A205468652077656C6C2D6B6E6F776E20746578742028574B542920696E70757420697320656D7074792E20546F20696E70757420616E20656D70747920696E7374616E63652C20737065636
  9667920616E20656D70747920696E7374616E6365206F66206F6E65206F662074686520666F6C6C6F77696E672074797065733A20506F696E742C204C696E65537472696E672C20506F6C79676F6E2C204D756C7469506F696E742C204D756C74694C696E65537472696E672C204D756C7469506F6C79676F6E2C2043697263
  756C6172537472696E672C20436F6D706F756E6443757276652C204375727665506F6C79676F6E206F722047656F6D65747279436F6C6C656374696F6E2E014C32343134313A2041206E756D62657220697320657870656374656420617420706F736974696F6E207B307D206F662074686520696E7075742E2054686520696
  E70757420686173207B317D2E01950232343135303A2046756C6C476C6F626520696E7374616E6365732063616E6E6F74206265206F626A6563747320696E207468652047656F6D65747279436F6C6C656374696F6E2E2047656F6D65747279436F6C6C656374696F6E732063616E20636F6E7461696E2074686520666F6C6C
  6F77696E6720696E7374616E6365733A20506F696E74732C204D756C7469506F696E74732C204C696E65537472696E67732C204D756C74694C696E65537472696E67732C20506F6C79676F6E732C204D756C7469506F6C79676F6E732C2043697263756C6172537472696E67732C20436F6D706F756E644375727665732C204
  375727665506F6C79676F6E7320616E642047656F6D65747279436F6C6C656374696F6E732E01940132343134393A2046756C6C476C6F62652063616E6E6F74206861766520696E7465726E616C20656C656D656E747320616E64206D75737420626520746865206F6E6C79206F626A65637420696E2074686520696E737461
  6E63652E2052656D6F766520616E79206F74686572206F626A6563747320696E207468652073616D652067656F67726170687920696E7374616E63652E014053514C20536572766572205370617469616C206C69627261727920636F756C64206E6F74206265206C6F616465642E204572726F7220636F64653A207B307D2E0
  13432343131313A205468652077656C6C2D6B6E6F776E20746578742028574B542920696E707574206973206E6F742076616C69642E013632343131353A205468652077656C6C2D6B6E6F776E2062696E6172792028574B422920696E707574206973206E6F742076616C69642E013A32343230313A204C6174697475646520
  76616C756573206D757374206265206265747765656E202D393020616E6420393020646567726565732E014132343230323A204C6F6E6769747564652076616C756573206D757374206265206265747765656E202D313530363920616E6420313530363920646567726565732E01D60132343230303A2054686520737065636
  96669656420696E70757420646F6573206E6F7420726570726573656E7420612076616C69642067656F67726170687920696E7374616E63652E20557365204D616B6556616C696420746F20636F6E766572742074686520696E7374616E636520746F20612076616C696420696E7374616E63652E204E6F7465207468617420
  4D616B6556616C6964206D61792063617573652074686520706F696E7473206F662061207370617469616C20696E7374616E636520746F20736869667420736C696768746C792E01B20132343230343A20546865207370617469616C207265666572656E6365206964656E74696669657220285352494429206973206E6F742
  076616C69642E20546865207370656369666965642053524944206D757374206D61746368206F6E65206F662074686520737570706F7274656420535249447320646973706C6179656420696E20746865207379732E7370617469616C5F7265666572656E63655F73797374656D7320636174616C6F6720766965772E012D32
  343231363A2054686520617263206D75737420636F6E7461696E2065786163746C79203320706F696E74732E017932343133303A2054686520676976656E20584D4C20696E7374616E636520636F6E7461696E7320617474726962757465732E204174747269627574657320696E2047656F677261706879204D61726B75702
  04C616E67756167652028474D4C2920696E70757420617265206E6F74207065726D69747465642E015232343132383A205468652047656F677261706879204D61726B7570204C616E67756167652028474D4C2920696E707574206D757374206861766520612073696E676C6520746F702D6C6576656C207461672E01CD0232
  343132393A2054686520676976656E20584D4C20696E7374616E6365206973206E6F742076616C696420626563617573652074686520746F702D6C6576656C20746167206973207B307D2E2054686520746F702D6C6576656C20656C656D656E74206F662074686520696E7075742047656F67726170686963204D61726B757
  0204C616E67756167652028474D4C29206D75737420636F6E7461696E206120506F696E742C204C696E65537472696E672C20506F6C79676F6E2C204D756C7469506F696E742C204D756C746947656F6D657472792C204D756C746943757276652C204D756C7469537572666163652C204172632C20417263537472696E672C
  20436F6D706F7369746543757276652C20506F6C79676F6E5061746368206F722046756C6C476C6F6265202867656F67726170687920446174612054797065206F6E6C7929206F626A6563742E017432343330393A204F626A65637473207769746820636F6D7061746962696C697479206C6576656C203131302063616E6E6
  F7420626520706F70756C61746564207573696E67204947656F67726170687953696E6B2E20557365204947656F67726170687953696E6B31313020696E73746561642E017232343330383A204F626A65637473207769746820636F6D7061746962696C697479206C6576656C203131302063616E6E6F7420626520706F7075
  6C61746564207573696E67204947656F6D6574727953696E6B2E20557365204947656F6D6574727953696E6B31313020696E73746561642E01DA0132343134343A2054686973206F7065726174696F6E2063616E6E6F7420626520636F6D706C6574656420626563617573652074686520696E7374616E6365206973206E6F7
  42076616C69642E20557365204D616B6556616C696420746F20636F6E766572742074686520696E7374616E636520746F20612076616C696420696E7374616E63652E204E6F74652074686174204D616B6556616C6964206D61792063617573652074686520706F696E7473206F6620612067656F6D6574727920696E737461
  6E636520746F20736869667420736C696768746C792E01DF0232343130353A205468652067656F6D657472795479706520617267756D656E7420696E20496E7374616E63654F662028277B307D2729206973206E6F742076616C69642E205468697320617267756D656E74206D75737420636F6E7461696E206F6E65206F662
  074686520666F6C6C6F77696E672074797065733A2047656F6D657472792C20506F696E742C204C696E65537472696E672C2043757276652C20506F6C79676F6E2C20537572666163652C204D756C7469506F696E742C204D756C74694C696E65537472696E672C204D756C7469506F6C79676F6E2C204D756C746943757276
  652C204D756C7469537572666163652C2047656F6D65747279436F6C6C656374696F6E2C2043697263756C6172537472696E672C20436F6D706F756E6443757276652C204375727665506F6C79676F6E206F722046756C6C476C6F6265202867656F67726170687920446174612054797065206F6E6C79292E018A013234343
  1363A204E6F742076616C6964206265636175736520696E20637572766520287B307D2920746865206564676520746861742073746172747320617420706F696E7420287B317D29206973206569746865722061206C696E65206F72206120646567656E657261746520617263207769746820616E7469706F64616C20656E64
  706F696E74732E017732343231353A20426F756E64696E6720626F7820696E707574206973206E6F742076616C69642E205468652076616C7565206F6620706172616D6574657220277B307D27206D7573742062652067726561746572207468616E207468652076616C7565206F6620706172616D6574657220277B317D272
  E014F32343430373A204E6F742076616C6964206265636175736520706F6C79676F6E2072696E6720287B307D2920636F6C6C617073657320746F2061206C696E6520617420706F696E7420287B317D292E013C32343430363A204E6F742076616C6964206265636175736520637572766520287B307D2920646567656E6572
  6174657320746F206120706F696E742E015032343431343A204E6F742076616C6964206265636175736520616E2065646765206F6620637572766520287B307D29206F7665726C61707320616E2065646765206F6620637572766520287B317D292E014132343431333A204E6F742076616C69642062656361757365206F662
  074776F206F7665726C617070696E6720656467657320696E20637572766520287B307D292E013C205468652070726F626C656D206F636375727320696E20656E74727920287B307D2920696E20612067656F6D6574727920636F6C6C656374696F6E2E016832343431303A204E6F742076616C696420626563617573652072
  696E6720287B307D29206973207468652066697273742072696E6720696E206120706F6C79676F6E206F66207768696368206974206973206E6F7420746865206578746572696F722072696E672E01940332343230353A205468652073706563696669656420696E70757420646F6573206E6F7420726570726573656E74206
  12076616C69642067656F67726170687920696E7374616E63652062656361757365206974206578636565647320612073696E676C652068656D697370686572652E20456163682067656F67726170687920696E7374616E6365206D7573742066697420696E7369646520612073696E676C652068656D697370686572652E20
  4120636F6D6D6F6E20726561736F6E20666F722074686973206572726F722069732074686174206120706F6C79676F6E20686173207468652077726F6E672072696E67206F7269656E746174696F6E2E20546F206372656174652061206C6172676572207468616E2068656D697370686572652067656F67726170687920696
  E7374616E63652C2075706772616465207468652076657273696F6E206F662053514C2053657276657220616E64206368616E67652074686520646174616261736520636F6D7061746962696C697479206C6576656C20746F206174206C65617374203131302E015F32343431323A204E6F742076616C696420626563617573
  652074686520696E746572696F72206F66206120706F6C79676F6E20776974682072696E677320287B307D2920616E6420287B317D29206973206E6F7420636F6E6E65637465642E015832343431313A204E6F742076616C696420626563617573652072696E6720287B307D29206C696573206F75747369646520746865206
  578746572696F722072696E6720287B317D29206F662069747320706F6C79676F6E2E016532343430323A204E6F742076616C6964206265636175736520706F696E7420287B307D2920697320616E2069736F6C6174656420706F696E742C207768696368206973206E6F742076616C696420696E2074686973207479706520
  6F66206F626A6563742E013A32343430383A204E6F742076616C6964206265636175736520706F6C79676F6E2072696E6720287B307D29206973206E6F7420636C6F7365642E013C32343431353A204E6F742076616C696420736F6D6520706F6C79676F6E2068617320616E20696E76616C69642072696E672073747275637
  47572652E015E32343430393A204E6F742076616C6964206265636175736520736F6D6520706F7274696F6E206F6620706F6C79676F6E2072696E6720287B307D29206C69657320696E2074686520696E746572696F72206F66206120706F6C79676F6E2E013C32343430333A204E6F742076616C6964206265636175736520
  736F6D652070616972206F6620706F6C79676F6E206564676573206F7665726C61702E015132343430343A204E6F742076616C6964206265636175736520706F6C79676F6E2072696E6720287B307D2920696E746572736563747320697473656C66206F7220736F6D65206F746865722072696E672E015032343430353A204
  E6F742076616C6964206265636175736520736F6D6520706F6C79676F6E2072696E6720696E746572736563747320697473656C66206F7220736F6D65206F746865722072696E672E013632343330333A20546865204F70656E4769737B307D547970652070726F76696465642C207B317D2C206973206E6F742076616C6964
  2E012132343430313A204E6F742076616C69642C20726561736F6E20756E6B6E6F776E2E017C32343131373A20546865204C696E65537472696E6720696E707574206973206E6F742076616C6964206265636175736520697420646F6573206E6F74206861766520656E6F75676820706F696E74732E2041204C696E6553747
  2696E67206D7573742068617665206174206C656173742074776F20706F696E74732E01AC0132343133333A20546865206C696E65617252696E6720696E707574206973206E6F742076616C6964206265636175736520746865726520617265206E6F7420656E6F75676820706F696E747320696E2074686520696E7075742E
  2041206C696E65617252696E67206D7573742068617665206174206C65617374203420706F696E74732C206275742074686973206C696E65617252696E6720696E707574206F6E6C7920686173207B307D2E015A54686520696E7465726D656469617465206F7220726573756C74696E67206F626A656374206F66207468652
  07370617469616C206F7065726174696F6E2065786365656473206D6178696D756D2073697A65206F66203247422E016C32343330343A204E657374696E67206F766572666C6F772E205468652063616C6C20746F207B307D20776F756C6420726573756C7420696E207B317D206C6576656C73206F66206E657374696E672E
  204F6E6C79207B327D206C6576656C732061726520616C6C6F7765642E013232343330323A204E6F206D6F72652063616C6C732065787065637465642C20627574207B307D207761732063616C6C65642E014152657175697265642066756E6374696F6E616C697479206973206E6F7420696D706C656D656E746564206F6E2
  07468697320706C6174666F726D20287B307D292E014232343132363A20506F696E7420636F6F7264696E617465732063616E6E6F7420626520696E66696E697465206F72206E6F742061206E756D62657220284E614E292E01960132343131383A2054686520506F6C79676F6E20696E707574206973206E6F742076616C69
  64206265636175736520746865206578746572696F722072696E6720646F6573206E6F74206861766520656E6F75676820706F696E74732E20456163682072696E67206F66206120706F6C79676F6E206D75737420636F6E7461696E206174206C6561737420666F757220706F696E74732E01AD0132343131393A205468652
  0506F6C79676F6E20696E707574206973206E6F742076616C696420626563617573652074686520737461727420616E6420656E6420706F696E7473206F6620746865206578746572696F722072696E6720617265206E6F74207468652073616D652E20456163682072696E67206F66206120706F6C79676F6E206D75737420
  68617665207468652073616D6520737461727420616E6420656E6420706F696E74732E01A10132343132303A2054686520506F6C79676F6E20696E707574206973206E6F742076616C696420626563617573652074686520696E746572696F722072696E67206E756D626572207B307D20646F6573206E6F742068617665206
  56E6F75676820706F696E74732E20456163682072696E67206F66206120706F6C79676F6E206D75737420636F6E7461696E206174206C6561737420666F757220706F696E74732E01B80132343132313A2054686520506F6C79676F6E20696E707574206973206E6F742076616C696420626563617573652074686520737461
  727420616E6420656E6420706F696E7473206F662074686520696E746572696F722072696E67206E756D626572207B307D20617265206E6F74207468652073616D652E20456163682072696E67206F66206120706F6C79676F6E206D7573742068617665207468652073616D6520737461727420616E6420656E6420706F696
  E74732E01980132343330353A2054686520506F6C79676F6E20696E707574206973206E6F742076616C69642062656361757365207468652072696E67206E756D626572207B307D20646F6573206E6F74206861766520656E6F75676820706F696E74732E20456163682072696E67206F66206120706F6C79676F6E206D7573
  7420636F6E7461696E206174206C6561737420666F757220706F696E74732E01AF0132343330363A2054686520506F6C79676F6E20696E707574206973206E6F742076616C696420626563617573652074686520737461727420616E6420656E6420706F696E7473206F66207468652072696E67206E756D626572207B307D2
  0617265206E6F74207468652073616D652E20456163682072696E67206F66206120706F6C79676F6E206D7573742068617665207468652073616D6520737461727420616E6420656E6420706F696E74732E017F32343133323A2054686520706F734C69737420656C656D656E742070726F766964656420686173207B307D20
  636F6F7264696E617465732E20546865206E756D626572206F6620636F6F7264696E6174657320696E206120706F734C69737420656C656D656E74206D75737420626520616E206576656E206E756D6265722E012D32343134333A2054686520706F734C69737420656C656D656E742070726F766964656420697320656D707
  4792E016A32343133313A2054686520676976656E20706F7320656C656D656E742070726F7669646573207B307D20636F6F7264696E617465732E204120706F7320656C656D656E74206D75737420636F6E7461696E2065786163746C792074776F20636F6F7264696E617465732E015E32343132353A2054686520746F6C65
  72616E636520287B307D292070617373656420746F20526564756365206973206E6F742076616C69642E20546F6C6572616E636573206D75737420626520706F736974697665206E756D626572732E01B80132343135313A2054686520637572766520696E646578206E20287B307D292070617373656420746F20535443757
  276654E206973206C657373207468616E20312E2054686973206E756D626572206D7573742062652067726561746572207468616E206F7220657175616C20746F203120616E64206C657373207468616E206F7220657175616C20746F20746865206E756D626572206F66206375727665732072657475726E65642062792053
  544E756D4375727665732E01CE0132343130333A205468652067656F6D6574727920696E646578206E20287B307D292070617373656420746F20535447656F6D657472794E206973206C657373207468616E20312E20546865206E756D626572206D7573742062652067726561746572207468616E206F7220657175616C207
  46F203120616E642073686F756C64206265206C657373207468616E206F7220657175616C20746F20746865206E756D626572206F6620696E7374616E6365732072657475726E65642062792053544E756D47656F6D6574726965732E01CC0132343130343A205468652072696E6720696E646578206E20287B307D29207061
  7373656420746F205354496E746572696F7252696E674E206973206C657373207468616E20312E20546865206E756D626572206D7573742062652067726561746572207468616E206F7220657175616C20746F203120616E642073686F756C64206265206C657373207468616E206F7220657175616C20746F20746865206E7
  56D626572206F662072696E67732072657475726E65642062792053544E756D496E746572696F7252696E672E01B80132343130323A2054686520706F696E7420696E646578206E20287B307D292070617373656420746F205354506F696E744E206973206C657373207468616E20312E2054686973206E756D626572206D75
  73742062652067726561746572207468616E206F7220657175616C20746F203120616E64206C657373207468616E206F7220657175616C20746F20746865206E756D626572206F6620706F696E74732072657475726E65642062792053544E756D506F696E74732E01A40132343130393A2054686520696E746572736563746
  96F6E5061747465726E4D617472697820617267756D656E7420746F20535452656C617465206973206E6F742076616C69642E205468697320617267756D656E74206D75737420636F6E7461696E2065786163746C79203920636861726163746572732C206275742074686520737472696E672070726F766964656420686173
  207B307D20636861726163746572732E01A30132343131303A20436861726163746572207B307D20287B317D29206F662074686520696E74657273656374696F6E5061747465726E4D617472697820617267756D656E7420746F20535452656C617465206973206E6F742076616C69642E205468697320617267756D656E742
  06D757374206F6E6C7920636F6E7461696E20746865206368617261637465727320302C20312C20322C20542C20462C20616E64202A2E012332343330373A20446966666572656E7420535249447320656E636F756E74657265642E017C32343231373A205468652072656C617469766520617265612064656C746120706172
  616D6574657220287B307D2920666F722053696E676C6553696465526564756365206973206E6F742076616C69642E2056616C7565206D7573742062652067726561746572207468616E206F7220657175616C20746F202D312E016032343130303A20546865207370617469616C207265666572656E6365206964656E74696
  669657220285352494429206973206E6F742076616C69642E205352494473206D757374206265206265747765656E203020616E64203939393939392E013232343330303A20457870656374656420612063616C6C20746F207B307D2C20627574207B317D207761732063616C6C65642E013932343330313A20457870656374
  656420612063616C6C20746F207B307D206F72207B317D2C20627574207B327D207761732063616C6C65642E016132343230393A20556E657870656374656420656E64206F6620696E7075742E20436865636B20746861742074686520696E707574206461746120697320636F6D706C65746520616E6420686173206E6F742
  06265656E207472756E63617465642E016132343231303A207B307D2074797065207769746820616E20756E65787065637465642076657273696F6E206F66207B317D2072656365697665643B206F6E6C792076657273696F6E7320757020746F207B327D206172652061636365707465642E01870232343131343A20546865
  206C6162656C207B307D20696E2074686520696E7075742077656C6C2D6B6E6F776E20746578742028574B5429206973206E6F742076616C69642E2056616C6964206C6162656C732061726520504F494E542C204C494E45535452494E472C20504F4C59474F4E2C204D554C5449504F494E542C204D554C54494C494E45535
  452494E472C204D554C5449504F4C59474F4E2C2047454F4D45545259434F4C4C454354494F4E2C2043495243554C4152535452494E472C20434F4D504F554E4443555256452C204355525645504F4C59474F4E20616E642046554C4C474C4F4245202867656F67726170687920446174612054797065206F6E6C79292E013B
  32343134323A20457870656374656420227B307D2220617420706F736974696F6E207B317D2E2054686520696E7075742068617320227B327D222E010C32343430303A2056616C696401E60132343231313A2054686520737065636966696564206F7065726174696F6E2063616E6E6F742072756E20756E646572207468652
  063757272656E7420636F6D7061746962696C697479206C6576656C2E204120636F6D6D6F6E20726561736F6E20666F7220746869732069737375652069732074686174206F626A65637420636F6E7461696E732063697263756C617220617263732E204368616E67652074686520646174616261736520636F6D7061746962
  696C697479206C6576656C20746F20313130206F72206869676865722C206F72207573652053544375727665546F4C696E652E000000000016070000CECAEFBE01000000910000006C53797374656D2E5265736F75726365732E5265736F757263655265616465722C206D73636F726C69622C2056657273696F6E3D342E302
  E302E302C2043756C747572653D6E65757472616C2C205075626C69634B6579546F6B656E3D623737613563353631393334653038392353797374656D2E5265736F75726365732E52756E74696D655265736F75726365536574020000000C0000000000000050414450414450D232ABA6704135ED2135400B8827C51F4FD743
  44491A615459BA425B378B0962A7B6EB700397F47156F37C797B14D97A530100008E00000075000000E10000001501000036010000F800000000000000AD0000005000000037000000CA000000860200003241007200670075006D0065006E0074004E006F007400530071006C0048006900650072006100720063006800790
  04900640000000000144200610064004F007200640070006100740068005F000000204200610064004F0072006400700061007400680053007400720069006E006700D2000000144300680069006C0064004F007200640065007200550100001A4E00650067006100740069007600650049006E00700075007400DB01000018
  4E006F006E004E0075006C006C0049006E007000750074001F020000124E006F00740041004300680069006C00640068020000124E0075006C006C0049006E00700075007400E4020000184E0075006C006C0052006500660049006E007000750074002C0300001C4F0072006400700061007400680054006F006F004C006F0
  06E00670072030000185200650070006100720065006E0074004100720067007300BB0300001A52006500730075006C00740054006F006F004C006F006E0067004F040000015D32343031323A20436F6D70617265546F206661696C6564206265636175736520746865206F626A65637420636F6D706172656420746F207761
  73206E6F7420616E20696E7374616E6365206F662053716C48696572617263687949642E017132343030303A2053716C4869657261726368794964206F7065726174696F6E206661696C65642062656361757365204869657261726368794964206F626A6563742077617320636F6E73747275637465642066726F6D20616E2
  0696E76616C69642062696E61727920737472696E672E2001800132343030313A2053716C48696572617263687949642E5061727365206661696C656420626563617573652074686520696E70757420737472696E6720277B307D27206973206E6F7420612076616C696420737472696E6720726570726573656E746174696F
  6E206F6620612053716C4869657261726368794964206E6F64652E01830132343030373A2053716C48696572617263687949642E47657444657363656E64616E74206661696C6564206265636175736520276368696C643127206D757374206265206C657373207468616E20276368696C6432272E2020276368696C6431272
  077617320277B307D2720616E6420276368696C6432272077617320277B317D272E014232343031313A2053716C48696572617263687949642E476574416E636573746F72206661696C6564206265636175736520276E2720776173206E656761746976652E014732343030333A2053716C48696572617263687949642E7B30
  7D206661696C6564206265636175736520277B317D2720776173206E6F742061204E554C4C20696E7374616E63652E017A32343030383A2053716C48696572617263687949642E47657444657363656E64616E74206661696C6564206265636175736520277B307D27206D7573742062652061206368696C64206F662027746
  86973272E2020277B307D272077617320277B317D2720616E64202774686973272077617320277B327D272E014632343030323A2053716C48696572617263687949642E5772697465206661696C6564206265636175736520277468697327207761732061204E554C4C20696E7374616E63652E014432343030343A2053716C
  48696572617263687949642E7B307D206661696C6564206265636175736520277B317D27207761732061206E756C6C207265666572656E63652E014732343030353A2053716C48696572617263687949642E52656164206661696C656420626563617573652074686520696E707574206578636565646564207B307D2062797
  465732E01910132343030393A2053716C48696572617263687949642E4765745265706172656E74656456616C7565206661696C6564206265636175736520276F6C64526F6F742720776173206E6F7420616E20616E636573746F72206E6F6465206F66202774686973272E2020276F6C64526F6F74272077617320277B307D
  272C20616E64202774686973272077617320277B317D272E013F32343030363A2053716C48696572617263687949642E7B307D206661696C656420626563617573652069747320726573756C7420697320746F6F206269672E0000000000001B4BC9343D3982442D2AF30E1F4644A398A71F41E37A4534A9BA8B27A65018CFD
  7B0A6A249005571E46676C83BEB5C628DBD9FA477F9206AF6C680D4C8A8EB68CC514024E0F5DAD67221FD6332031CF69C03290A23916B1EC721B8DC9B154D8B1FA9EC1D0C084B72CE26B46745BC9D83E3B4C8CF3DDA88C317DE7CFF87C57605000000002972416300000000020000001C010000A0650500A055050052534453
  C127334E447A71408DB3FB554D51987E01000000443A5C6462735C73685C35756A355C313030385F3035343230395C636D645C395C6F626A5C78363472657461696C5C73716C5C6E7464626D735C6D73716C5C737973636C7274797065735C617373656D626C795C6D6963726F736F66742E73716C7365727665722E7479706
  5732E637370726F6A5C4D6963726F736F66742E53716C5365727665722E54797065732E7064620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  00000000000000000000000000000000000000000000000000E46605000000000000000000FE660500002000000000000000000000000000000000000000000000F0660500000000000000000000005F436F72446C6C4D61696E006D73636F7265652E646C6C0000000000FF250020001000010E0F03020D0C0407080B05060
  90A0003010200000000020004000800100000010E0F10131415EAEBECEFF0F1FEFF03020D0C11121716E9E8EDEEF3F2FDFC0407080B1E1D1819E6E7E2E1F4F7F8FB0506090A1F1C1B1AE5E4E3E0F5F6F9FA3A39363520232425DADBDCDFCAC9C6C53B38373421222726D9D8DDDECBC8C7C43C3D32332E2D2829D6D7D2D1CCCD
  C2C33F3E31302F2C2B2AD5D4D3D0CFCEC1C0404344457A7B7C7F80838485BABBBCBF4142474679787D7E81828786B9B8BDBE4E4D4849767772718E8D8889B6B7B2B14F4C4B4A757473708F8C8B8AB5B4B3B050515E5F60616E6F90919E9FA0A1AEAF53525D5C63626D6C93929D9CA3A2ADAC5457585B6467686B9497989BA4A
  7A8AB5556595A6566696A9596999AA5A6A9AA0000000001010000010101010101010101010101000000004600300031003200000304053A3B3C3F0102070639383D3E0E0D0809363732310F0C0B0A3534333010111E1F20212E2F13121D1C23222D2C1417181B2427282B1516191A2526292A00000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001000000018000080000
  000000000000000000000000001000100000030000080000000000000000000000000000001000000000048000000588005002E04000000000000000000002E0434000000560053005F00560045005200530049004F004E005F0049004E0046004F0000000000BD04EFFE00000100000010000600E803000010000600E8033F
  000000000000000400000002000000000000000000000000000000440000000100560061007200460069006C00650049006E0066006F00000000002400040000005400720061006E0073006C006100740069006F006E00000000000000B0048E030000010053007400720069006E006700460069006C00650049006E0066006
  F0000006A03000001003000300030003000300034006200300000004C001600010043006F006D00700061006E0079004E0061006D006500000000004D006900630072006F0073006F0066007400200043006F00720070006F0072006100740069006F006E0000002C0002000100460069006C00650044006500730063007200
  69007000740069006F006E00000000002000000038000C000100460069006C006500560065007200730069006F006E0000000000310036002E0030002E0031003000300030002E00360000005C001E00010049006E007400650072006E0061006C004E0061006D00650000004D006900630072006F0073006F00660074002E0
  0530071006C005300650072007600650072002E00540079007000650073002E0064006C006C0000006400200001004C006500670061006C0043006F00700079007200690067006800740000004D006900630072006F0073006F00660074002E00200041006C006C002000720069006700680074007300200072006500730065
  0072007600650064002E000000BA00490001004C006500670061006C00540072006100640065006D00610072006B007300000000004D006900630072006F0073006F00660074002000530051004C002000530065007200760065007200200069007300200061002000720065006700690073007400650072006500640020007
  40072006100640065006D00610072006B0020006F00660020004D006900630072006F0073006F0066007400200043006F00720070006F0072006100740069006F006E002E000000000064001E0001004F0072006900670069006E0061006C00460069006C0065006E0061006D00650000004D006900630072006F0073006F00
  660074002E00530071006C005300650072007600650072002E00540079007000650073002E0064006C006C0000004A0015000100500072006F0064007500630074004E0061006D006500000000004D006900630072006F0073006F00660074002000530051004C002000530065007200760065007200000000003C000C00010
  0500072006F006400750063007400560065007200730069006F006E000000310036002E0030002E0031003000300030002E00360000003A000900010041007300730065006D0062006C0079002000560065007200730069006F006E000000310036002E0030002E0030002E0030000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006005000C000000103
  700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  0000000000000A0270000000202003082279306092A864886F70D010702A082278430822780020101310F300D06096086480165030402010500305C060A2B060104018237020104A04E304C3017060A2B06010401823702010F3009030100A004A20280003031300D0609608648016503040201050004205EEBC812BF0E21B4
  1AA3806ACD9586E0D8221B5E3B13EACA430F0D815C0E2D28A0820D8530820603308203EBA003020102021333000002CDF364BFF8D44C5D510000000002CD300D06092A864886F70D01010B0500307E310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646
  D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E312830260603550403131F4D6963726F736F667420436F6465205369676E696E67205043412032303131301E170D3232303531323230343630325A170D3233303531313230343630325A3074310B3009060355040613025553311330
  110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E311E301C060355040313154D6963726F736F667420436F72706F726174696F6E30820122300D06092A864886F70D01010105000382010F003082010
  A0282010100EB233B18EB63262ABCDEAE09BB51C9EEF83B921DD8334595422068BD09A945AE1C2D88AFB71480F394E61BB3FCF31F0B8B0B7862AF9E705601E8682E25890C10EB4C15C91D7B1193DAE01436F02E40465C6A7ED769DC7F11AD759B572BD06949C141564CEF75C3C86575A143D9187196B6076AB4151DEB45639C
  53C80927FCA671628ADEA1BD2C47E4855623488E9DFA9D5D8A0F594B5550C995A96D72057D0DB5B425487214EA194FBE8F7FBAA2AF923154140D8B6C2F405906C9987FB5B8CD25E270D229F0AA71CBDD239977CE3124F72512526875210843167FB948BD899A7085D236446787F91C4EF29033FEA2203743E7E1282B1E83ED1
  A1078BE0D13D90203010001A38201823082017E301F0603551D2504183016060A2B0601040182374C080106082B06010505070303301D0603551D0E04160414D16CA61F808FEECD7EC9092D1306DC2D0B91F59C30540603551D11044D304BA4493047312D302B060355040B13244D6963726F736F6674204972656C616E6420
  4F7065726174696F6E73204C696D69746564311630140603550405130D3233303031322B343730353330301F0603551D23041830168014486E64E55005D382AA17373722B56DA8CA75029530540603551D1F044D304B3049A047A0458643687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B696F70732F637
  26C2F4D6963436F64536967504341323031315F323031312D30372D30382E63726C306106082B0601050507010104553053305106082B060105050730028645687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B696F70732F63657274732F4D6963436F64536967504341323031315F323031312D30372D30
  382E637274300C0603551D130101FF04023000300D06092A864886F70D01010B050003820201004ECB4AEB8D39B081598BADB7124082295727DD86A7257F7D38B25C767FF4B6F35ECFCC7CA9CFC11C9D9660366A4D2B1962C3161F3DCC0587148F2DF492F0A5DFD5468544DFE5B2CD322C91D6C19C76DFD728E8FFED2DA4796
  7AE814975C0D2308B07F93EF3DC2958FBA5A78D24DEB6983563FA4B38B5D9A598D8797422170A3D1B997351C49DF1855034F4001880A5D89452682365CC07481421793CD2A85DB26D12A0DC3D9F280EB33D29D3BB4EA504E55A9E05EE83820635B19627403FBF2D6973E43D300AB88D80643F4D659EC4CC309C4AA52307E421
  C345C68D10343FFA61AF434C0532924D9228648FB7490BB47C4D127D8626F70DB5FA21558FDBD2DBB2174E5E5C4DDC76D6196DE1A8535C508B13D90254DDB4B99E14D972F36B8155BC9B019E14B75F05FFF52BBA0550F5451D2B5B9899CFB649D45040271C2B05C63AE62067550B5B6BB93F27D6C73A38051FBEE77381FED65
  7429CF83A480165EAACF586982C57CA46540756D990821147CC1E6FFD61689F10D596F3F1CB68286B4BBD67E665229BE8A1946F9BA3AD5F17408CC05C58102C9C146BFCE8F9B37E7A10375FDA5FEC2F02C5604EB5B7E30488D61DCB4A572FA80DDC3C5355FDAA8C9C5716415F8E34E2B2776E747B20B84324F2612D9EFC28F5
  F392293EA844784CF6C6781D383F4D33235258E6377981616016239131742D629EEA20D31ACA98E5953082077A30820562A003020102020A610E90D2000000000003300D06092A864886F70D01010B0500308188310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E06035504071
  3075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E31323030060355040313294D6963726F736F667420526F6F7420436572746966696361746520417574686F726974792032303131301E170D3131303730383230353930395A170D3236303730383231303930395A307E31
  0B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E312830260603550403131F4D6963726F736F667420436F6465205369676E696E6720504341203230313130820
  222300D06092A864886F70D01010105000382020F003082020A0282020100ABF0FA72101C2EADD86EAA82104D34BAF2B658219F421B2A6BE95A50AAB806381A0449BA7FC30C1EDD376BC612D80BF038C29906B0C839D501143142D3890D7964877E9460246CAF9E499CE9685ED2DF9B53B20A2CC3AFD9A92BAE7A09AFD79659
  CA601A05E96676E8325226122FE7AB0850CFB344B75DD8C42E0375AB68F3CB6DF33A5CA116F446BAE03864AC6E643578A6A0630F2DD34093F8E3DE070DD55C79A54929E70DBEA01377BE943DEFFBE32B5A101F4D5628A27A72E0123AB7495ED8EDED439183D97BB27B861BD93EB18C5DE8894F841AF2A12F59E4903B2DAE335
  8C5B73EFE32D3B3033DB1B2AF92387ED29D802CF54E5691213525C3396E647F53BA9C0FAD192384CBF4BA03868DF75FF0D052BF8C9487BCC02174255F1828B6CC2728382598394A36CF7CB192AE1C23A7A966EC611F6AE128499D5F88E2255DD3214B3E52C4B5573F2403F0D17A5B2FD523E3705D0F514677B3F800E1BCAC02
  825FDBC015B3BD1BD4554BE739A10FE92349BC18B8447C45E4C1C3727AE072E724DFBF4699C5EFC21C57DB838DEC4D4930A7AB8EDFEC5B9FAFFCDDB066E2C197817BEDD6ED4BE74929A71328A6A77D6780E68A62785FB22F84D7579C5CBF772828F1ED6DC3288F2C8F40374FC1E1854489C4094CC5D4A5432F7495F76EF8782
  0582C135D60959A3E4F3384DAB08817DE9E4EF496B0BC46A06C98D2E0D6888C0B0203010001A38201ED308201E9301006092B06010401823715010403020100301D0603551D0E04160414486E64E55005D382AA17373722B56DA8CA750295301906092B0601040182371402040C1E0A00530075006200430041300B0603551D
  0F040403020186300F0603551D130101FF040530030101FF301F0603551D23041830168014722D3A02319043B914054EE1EAA7C731D1238934305A0603551D1F04533051304FA04DA04B8649687474703A2F2F63726C2E6D6963726F736F66742E636F6D2F706B692F63726C2F70726F64756374732F4D6963526F6F4365724
  17574323031315F323031315F30335F32322E63726C305E06082B0601050507010104523050304E06082B060105050730028642687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B692F63657274732F4D6963526F6F436572417574323031315F323031315F30335F32322E63727430819F0603551D200481
  9730819430819106092B0601040182372E03308183303F06082B060105050702011633687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B696F70732F646F63732F7072696D6172796370732E68746D304006082B0601050507020230341E32201D004C006500670061006C005F0070006F006C00690063007
  9005F00730074006100740065006D0065006E0074002E201D300D06092A864886F70D01010B0500038202010067F286A598E054791A2ED3D87467229B0B9611E163929942967DD2790C90C1655F2E2C3EF8C372D16D83FEBE3FE80ACA3BBF47A9A3F369DB63BF2235A5975D6584907D8B465055D80C927CD21A4B1CF33C428B
  52D0B0FD6BE33E072E299BE63D1BA5D4B51D779439E2E964C9443D787A23F3137DA69074838DF4CB2602462AC28A10BBA4A9050C9BED68FA682E95A02A3F2A6B5849631F09696E5A9896E483F4C08FF3462BDEFC3BD0BD35EF6E25AEE5AF27EDD0DDF30EAF992897984D0E3D0BF20889D61FC33218E2F0C52DCE5B9EB449390
  AC60AC2C6ADAEE5B2D9DB1588514558383271271A7FB1F427F8DE2C3A206998B25989686E6FA7B774C3400506A6012A283E823F134D660BC0B34DF5E18F7F1C6F157D45A776E5402A65A3C35D526286C31D63369786DFDAF3F8F216A19A27E1CDA597D0EE5D6341E35B079C873E067706D106B1751F14BE6161B5F0DCC61B04
  BEDF41C70E28EEDE652FEC97F6A15C96D800D6A146BD59F397A5094B481099801FD00029C5B19BA53F45771E35C6D2A2A29F7A7A22FA48951FABFB472380F59EF8BF6BB74B97E2EB75781AECEA379979184BFFD6B3236875E6AFFAFC8BEB0B80EA693BAFFC30ED044C8EDFDF756D63913DD19D564E4FBF805722A1781132217
  AEF410AB13FFBA8CCA45DC1A1889B5771564E4845C042C99B765B0A80486BFD799FC1BD6D6D6AC95273130D7A50CD318219813082197D020101308195307E310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D69
  63726F736F667420436F72706F726174696F6E312830260603550403131F4D6963726F736F667420436F6465205369676E696E67205043412032303131021333000002CDF364BFF8D44C5D510000000002CD300D06096086480165030402010500A081BA301906092A864886F70D010903310C060A2B0601040182370201043
  01C060A2B06010401823702010B310E300C060A2B060104018237020115302F06092A864886F70D0109043122042093E24196B263EBAEA67C60975E08D52EC63F9E5168690D3395DC3862665DF2FB304E060A2B06010401823702010C3140303EA020801E00530051004C002000530065007200760065007200200032003000
  320032A11A8018687474703A2F2F7777772E6D6963726F736F66742E636F6D300D06092A864886F70D010101050004820100AFEFBD6BB85E011BFABA3E1E5D7F361A4B5339A51606B260FFFC17D50AFDF2ACB1EC21313B34834B30B9886D61F2FB3E0E7E9461AD336D0489BF2B6F3009A7858D0FA02CC6F3335D37B84CBC0B9
  671075C26B5771B7081D6DC88ADDC593A9BCB56EFC5232D9F0FA32886ABAE6FCC0E0F2E003F2C8401300E212FBCDAEEE022F75B061BFBAE17BE59C783FFD7ED6984A3F716EDD49CE4ED831CA57F5FB0EFA9BCC80435CA90705943B02D28F8AAAD3E4FF2AF285EFE13476C36B240B8F9F345E1DEC99C2B2B2D19B34ABDFAB066
  31867EC4EA226A5B0A7BA2A9441F4061B722777C58BFC7481CC8651D216BBAD6078C4F6502B1EB16C6F10251560023F9F3D664A18216FF308216FB060A2B060104018237030301318216EB308216E706092A864886F70D010702A08216D8308216D4020103310F300D0609608648016503040201050030820150060B2A86488
  6F70D0109100104A082013F0482013B30820137020101060A2B0601040184590A03013031300D060960864801650304020105000420BC0C4004A0348A74ED1DEA53729ED53DD1972B0F235C1DD4013168538997F234020663232B50BB6B181232303232313030383132353132382E39335A3004800201F4A081D0A481CD3081
  CA310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E31253023060355040B131C4D6963726F736F667420416D6572696361204F7065726174696F6E733126302
  4060355040B131D5468616C6573205453532045534E3A334537412D453335392D41323544312530230603550403131C4D6963726F736F66742054696D652D5374616D702053657276696365A08211573082070C308204F4A003020102021333000001A0E9BB8CBB0EA2D17A0001000001A0300D06092A864886F70D01010B05
  00307C310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E312630240603550403131D4D6963726F736F66742054696D652D5374616D702050434120323031303
  01E170D3231313230323139303532335A170D3233303232383139303532335A3081CA310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E31253023060355040B
  131C4D6963726F736F667420416D6572696361204F7065726174696F6E7331263024060355040B131D5468616C6573205453532045534E3A334537412D453335392D41323544312530230603550403131C4D6963726F736F66742054696D652D5374616D70205365727669636530820222300D06092A864886F70D010101050
  00382020F003082020A0282020100BFDAE20E68719D00E8F662F86123A0BC88502AEF0AE5FF95A93E38F47C41C28BA22FC7F234D89B2CFC756191F193306B6D4798D1861AC95F27560E73A6CD15370781B9DB94FBA70905345057BA633FF7C9799345365E2699F9BBA55C77B9E31EAE8FFEAFE55185BFED078757728C65133D
  A444C12EF1F7C4DEE6D14712298F6BE02C1B698CFA7F4DC1F4118DDD4B88409B702645920C1B96243F6A488CAF5B599A39036F1B6ED9A41C5E311F0E76BC247FB06667DDBB45FB93A749E56191170CD988B3895B8421004A5E8767359A66ED01F0678523CDF84E7250B7E97D34F6C17F116C7E977C083AB19C7CF3DEB1AB4FA
  0503F661F2F19B69744784D590341E00720D6DAB2426D3009021B7BD41ED1CF6A4F426839477FAF482AE2F0179C481F99F26C182F7B8E4B747A6DE50127B884E2B3D2F560B5C357D947B2B8E194A67B6748F8EF7F9E181BDCC2D8826EB3C771E1B4BA0684654F2FE5A80E4327B7DDC81A83BA90D0423365FE0ACDB6AA5DAD3E
  3908472C70C45E91B1787F4079E1289801CDF3BE7BCE08DD361B2348B6F730132FAC873AFE6C12CD7368D322876EC8C1F5A0E10EFEE342FB7BAF2E0BAC83F04504A5A0F6B364F9F4D8526AE4F30849C0A7962B4AC71CF4C415222EE0FB9180742F290AFFB48916BB408BDA954FBD956824C80054FE78851D63E3C86A01E31DC
  ACE8DED5C1E9A0B7C99FDD4D15E9267690203010001A382013630820132301D0603551D0E0416041472B92E50D8294E91B8916C142F44CF0B618CD0E8301F0603551D230418301680149FA7155D005E625D83F4E5D265A71B533519E972305F0603551D1F045830563054A052A050864E687474703A2F2F7777772E6D696372
  6F736F66742E636F6D2F706B696F70732F63726C2F4D6963726F736F667425323054696D652D5374616D70253230504341253230323031302831292E63726C306C06082B060105050701010460305E305C06082B060105050730028650687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B696F70732F63657
  274732F4D6963726F736F667425323054696D652D5374616D70253230504341253230323031302831292E637274300C0603551D130101FF0402300030130603551D25040C300A06082B06010505070308300D06092A864886F70D01010B05000382020100317DC602ABF8DFAC9409A56DC12A4019692F93DF04CA9C2E44BAC9
  27862631BE2CA5F75A8BF9A7282B84A7ED5D9F743585947ED219A73758B387A1479465684DDE62E6D695C365C2C2A472B1920C929AC1B6C319FBCEE21FF52F5DEC83AEA13E26FAEE61BDE8202A455174739300D7088A8E397FE607EB6DD34B1E0B51110F330A96CAE3EEBA97515DD2EA7D9B170E104A61849AFC537C21C05C2
  82BE409FE4C56A201AD7C389AABA472A055A13FCB8A48B54357E3131131D96F7A763B09C1584D56EB4EF55C329DC5190DFE9004675E44D4B24DBFD898A359753FF45D17E233A4C2C60C07FF3E556F4D4C3756B1FDB9AA9B62BFAB471B62F9B33769BD70BFDBF7C512DCFB03E89E24B15B6A7AF433785A8F7A2031592242D1F8
  77160A2A875701579E090251F74C7B7C66BCE2176119132B43FAC0F2DF0BE3ACEE879545E323D9303540C324819FAB84F3B4EE25BB379EF3001BCC88725074744C78ADC50604787DA12F4E350074A45090A155F36B84EF0D14327B1E25F5FB10B0D8F53E1A5B1DAAC04A9A9BD97B1875F8036666D279F5A1A6BF63173327B80
  85444521923962F010CC5C16A0463E6F50490EE880C067E561F091D4D39266A705BFD9D9C0E9C41C5DD6F3A3C889B804E1652E3078A62BC294ED9992C58A1FBA81625A186B4ED4D4EDC2F23B5BCC651D1F22C269518157C0DF0F987C78E9F28EB6811BB3CD3593082077130820559A00302010202133300000015C5E76B9E02
  9B4999000000000015300D06092A864886F70D01010B0500308188310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E31323030060355040313294D6963726F7
  36F667420526F6F7420436572746966696361746520417574686F726974792032303130301E170D3231303933303138323232355A170D3330303933303138333232355A307C310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C0603
  55040A13154D6963726F736F667420436F72706F726174696F6E312630240603550403131D4D6963726F736F66742054696D652D5374616D7020504341203230313030820222300D06092A864886F70D01010105000382020F003082020A0282020100E4E1A64CE7B472210B79A2CBD72479BD0ED582D3FDEE9C0707D2A96C4
  E75C8CA3557F6017F6C4AE0E2BDB93E176033FF5C4FC766F79553715AE27E4A5AFEB836678546230CB58D13CF7732C01018E8607D6A528344B7A68E466B0714F3C576F58650DCC144C8715C513137A00A386E8DEDD70FD826537C3961027AC4AAFD7269AF1DABACF636BE352664DA983BBA1A7B33AD805B7E8C101C9D52FEB6
  E86225DC6A0FCF5DF4FE8E53CFD6EC85564DEFDDBC8DA4E3918FB2392C519CE970690DCA362D708E31C83528BDE3B48724C3E0C98F7EB5548FDCFA0555986D683B9A46BDEDA4AE7A2937ACCBEB8345E7466ECA32D5C086305C4F2CE262B2CDB9E28D88E496AC014ABBBE71A9175B6760DEF892911E1D3DFD20CF737D419A467
  5CDC45F34DD1289D6FDA5207D7EFCD99E45DFB6722FDB7D5F80BADBAA7E36EC364CF62B6EA81251E8BF0503A3D173A64D3774941C34820FF010F2B74718EDA7E8997C3F4CDBAF5EC2F3D5D8733D434EC133394C8E02BC42682E10EA845146E2D1BD6A185A610173CA67A25ED7287602E2331872D7A720F0C2FA120AD7636F0C
  C936648B5BA0A683215D5F3074919494D8B950F90B8961F3360635188447DBDC1BD1FDB2D41CC56BF65C52515D12DB25BAAF50057A6CC5111D72EF8DF952C4851793C03C15DB1A37C70815183F78AB45B6F51E875EDA8F9E167269C6AE7BB7B73E6AE22EAD0203010001A38201DD308201D9301206092B06010401823715010
  4050203010001302306092B0601040182371502041604142AA752FE64C49ABE82913C463529CF10FF2F04EE301D0603551D0E041604149FA7155D005E625D83F4E5D265A71B533519E972305C0603551D20045530533051060C2B0601040182374C837D01013041303F06082B060105050702011633687474703A2F2F777777
  2E6D6963726F736F66742E636F6D2F706B696F70732F446F63732F5265706F7369746F72792E68746D30130603551D25040C300A06082B06010505070308301906092B0601040182371402040C1E0A00530075006200430041300B0603551D0F040403020186300F0603551D130101FF040530030101FF301F0603551D23041
  830168014D5F656CB8FE8A25C6268D13D94905BD7CE9A18C430560603551D1F044F304D304BA049A0478645687474703A2F2F63726C2E6D6963726F736F66742E636F6D2F706B692F63726C2F70726F64756374732F4D6963526F6F4365724175745F323031302D30362D32332E63726C305A06082B06010505070101044E30
  4C304A06082B06010505073002863E687474703A2F2F7777772E6D6963726F736F66742E636F6D2F706B692F63657274732F4D6963526F6F4365724175745F323031302D30362D32332E637274300D06092A864886F70D01010B050003820201009D557DFC2AADE12C1F670131245BE19E724BFCA96FEA5C14B63E4E476478B
  10693973D3133B539D7C271363FDA646C7CD075396DBB0F31E4C28FFB6CD1A1941822EEE966673A534DDD98BAB61E78D8362E9CA982560003B005BE89E869E0BA09EE7BDF6A6FBE29CB6ED83F487501D918DE6D820CF56D2354E47853752457B9DD9FF38E3DC6F368DF65F6A456AAF795B6285527D024BD40A0BF19B6121211
  5D3D27E0409638ACF7F92989C3BC17B0548542B3FC0C9E8B1989E7F00B6A81C28119421952758A36C21DC361732E2C6B7B6E3F2C097814E991B2A95BDF49A3740CBCEC9180D23DE64A3E663B4FBB86FA321AD996F48FF69101F6CEC674FDF64C726F10AB7530C534B07AD850FE0A58DD403CC7546D9D6374482CB14E472DC11
  40471BF64F924BE736DCA8E09BDB30157495464D973D77F1E5B44018E5A19916B0D9FA428DC67192824BA384B9A6EFB21546B6A451147A9F1B7AEC8E8895E4F9DD2D04C76B5575409B16901447E7CA1616C73FE0ABBEC41663D69FDCBC141497E7E93BECBF83BE4B715BFB4CE3EA5315184BCBF02C182A27B171D15898D70FE
  E7B5D0281A890B8F36DABA4CF99BFF0AE934F82435672BE00DB8E68C99D6E122EAF027423D2594E674745B6AD19E3EED7EA031337DBCCBE97BBF387044D190F1C8AB3A8A3A08627FD97063534D8DEE826DA50510C171066A10B41D553358B3A17066F2A18202CE308202370201013081F8A181D0A481CD3081CA310B3009060
  355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E31253023060355040B131C4D6963726F736F667420416D6572696361204F7065726174696F6E7331263024060355040B13
  1D5468616C6573205453532045534E3A334537412D453335392D41323544312530230603550403131C4D6963726F736F66742054696D652D5374616D702053657276696365A2230A0101300706052B0E03021A0315001306B88D68DA71B39853EFBDE72749EE14828B98A08183308180A47E307C310B3009060355040613025
  553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E312630240603550403131D4D6963726F736F66742054696D652D5374616D70205043412032303130300D06092A864886F70D0101050500
  020500E6EB51BA3022180F32303232313030383039333234325A180F32303232313030393039333234325A3077303D060A2B0601040184590A0401312F302D300A020500E6EB51BA020100300A0201000202180E0201FF300702010002021156300A020500E6ECA33A0201003036060A2B0601040184590A040231283026300
  C060A2B0601040184590A0302A00A3008020100020307A120A10A300802010002030186A0300D06092A864886F70D01010505000381810005955FDFD182829E7E70236F920E392F10CFA11A4348817F6CF9D50CE5F0AD3EC708AE6D48E24487A0915664ABCD95863EE445483ACE7B03E979F2130DECDCD3067375666DE713DE
  9B509E0D7858A2110FEAB634459301B4C0B24B8305C66CC398244C1B65FF0CDBBEC19FDC62503E462141B7C8FCCE9C556C8F369CCBC979783182040D30820409020101308193307C310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301
  C060355040A13154D6963726F736F667420436F72706F726174696F6E312630240603550403131D4D6963726F736F66742054696D652D5374616D70205043412032303130021333000001A0E9BB8CBB0EA2D17A0001000001A0300D06096086480165030402010500A082014A301A06092A864886F70D010903310D060B2A86
  4886F70D0109100104302F06092A864886F70D01090431220420AD52C77F1D7B986918868C5D533694EAE768F75364E19798868086C8387C950D3081FA060B2A864886F70D010910022F3181EA3081E73081E43081BD04202F478A3C68650422122DDD112FB31D3EB2F9CCE9689A81AE523DA2B883AFB4D3308198308180A47
  E307C310B3009060355040613025553311330110603550408130A57617368696E67746F6E3110300E060355040713075265646D6F6E64311E301C060355040A13154D6963726F736F667420436F72706F726174696F6E312630240603550403131D4D6963726F736F66742054696D652D5374616D7020504341203230313002
  1333000001A0E9BB8CBB0EA2D17A0001000001A0302204203600A399CEA97B263BACDED8BCFF519477C011031C45268DAA0DD8946B8D16E6300D06092A864886F70D01010B0500048202008CCAB15EBFC0A11743FE504F35B15E2F94709D655D219903EA6288B686F0179C4702B57D3CE2A8D8C60FB5CF57D2D5921E0B10E26
  7B1D4329182BF9F654C90CBC1C356083FF45720FE43773CC9759238B8F60D66D85EEED79599E27E6D1A1D6577069EB3CB4976232C74ACA177C450DD301A0129D00D9F4CB22D38B4605A16AD5F46AECB246D1C4250A33D7DF5C6785854E731830624BF34DBBC0C0310125B1E551DAC87196C8667235BC3EDBB14A4173904EA20
  09320AA3EF9295E019FE1E99891BCC627AF0F9248234AFEE4FD94711CBEF8BBFA73A67D34CBAA6DC4ABC62777281BC26E44B4A3A7CC3B4DC2709A3D10F19BC0EF381729BA5E9F73F0D5DD4739864E74BF0077E0B83F24D29B3CC3C90DC1A2D767F986A96CD97C322F742C5EAFB83D5904E3F462B8E16419AA2B00D11328D6D4
  52E003DF359FFD76FA2850F9A28053170F90C2DCC91C851D0ABBE9AA536B4843D56A05C819E75BA653594EB47687DCBEE237F831FC5971ADA7E4D9BA8D781ABACDFC49F647EB4D79057F8A406042DF73AB90618E080399D8DD273B8A616072631CBCA1F269B6BDD6F6A147F14139D6075467ED3D14A8DDA19BC3562C5169290
  6085955F3D13BB998F14B8D10504339FA37438B66E7904D92410ABFE645EAE349F67C79C9202594A398CFEC5AA8F8577BCD5706C6ECCD2BE8A3AE66B671AF79014D96669B74D717E7B2545678C00
  WITH PERMISSION_SET = UNSAFE

  GO

