### YamlMime:DocDB
type: Table
id: table.purchasing.purchaseorderdetail
description: Individual products associated with a specific purchase order. See PurchaseOrderHeader.
createdAt: 2023-05-08T12:07:29.5400000
lastModifiedAt: 2023-05-08T12:07:39.4200000
name: Purchasing.PurchaseOrderDetail
foreignKeys: []
checks: []
partitionInfo:
  isPartitioned: false
  columns: []
  partitionScheme: 
  fileGroup: 
indexes: []
columns:
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.purchaseorderid
  description: Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: PurchaseOrderID
  dataType: INT
  maxLengthBytes: 4
  precision: 10
  scale: 0
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.purchaseorderdetailid
  description: Primary key. One line number per purchased product.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: PurchaseOrderDetailID
  dataType: INT
  maxLengthBytes: 4
  precision: 10
  scale: 0
  isComputed: false
  computedText: ''
  isIdentity: true
  identityIncrement: 1
  identitySeed: 1
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.duedate
  description: Date the product is expected to be received.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: DueDate
  dataType: DATETIME
  maxLengthBytes: 8
  precision: 23
  scale: 3
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.orderqty
  description: Quantity ordered.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: OrderQty
  dataType: SMALLINT
  maxLengthBytes: 2
  precision: 5
  scale: 0
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.productid
  description: Product identification number. Foreign key to Product.ProductID.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: ProductID
  dataType: INT
  maxLengthBytes: 4
  precision: 10
  scale: 0
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.unitprice
  description: Vendor's selling price of a single product.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: UnitPrice
  dataType: MONEY
  maxLengthBytes: 8
  precision: 19
  scale: 4
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.linetotal
  description: Per product subtotal. Computed as OrderQty * UnitPrice.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: LineTotal
  dataType: MONEY
  maxLengthBytes: 8
  precision: 19
  scale: 4
  isComputed: true
  computedText: (isnull([OrderQty]*[UnitPrice],(0.00)))
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.receivedqty
  description: Quantity actually received from the vendor.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: ReceivedQty
  dataType: DECIMAL
  maxLengthBytes: 5
  precision: 8
  scale: 2
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.rejectedqty
  description: Quantity rejected during inspection.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: RejectedQty
  dataType: DECIMAL
  maxLengthBytes: 5
  precision: 8
  scale: 2
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.stockedqty
  description: Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: StockedQty
  dataType: DECIMAL
  maxLengthBytes: 5
  precision: 9
  scale: 2
  isComputed: true
  computedText: (isnull([ReceivedQty]-[RejectedQty],(0.00)))
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: 
  script: ""
- type: TableColumn
  id: table.purchasing.purchaseorderdetail.column.modifieddate
  description: Date and time the record was last updated.
  createdAt: 0001-01-01T00:00:00.0000000
  lastModifiedAt: 0001-01-01T00:00:00.0000000
  name: ModifiedDate
  dataType: DATETIME
  maxLengthBytes: 8
  precision: 23
  scale: 3
  isComputed: false
  computedText: ''
  isIdentity: false
  identityIncrement: 0
  identitySeed: 0
  inPrimaryKey: false
  isForeignKey: false
  default: (getdate())
  script: ""
script: |+
  SET ANSI_NULLS ON
  GO

  SET QUOTED_IDENTIFIER ON
  GO

  CREATE TABLE [Purchasing].[PurchaseOrderDetail](
  	[PurchaseOrderID] [int] NOT NULL,
  	[PurchaseOrderDetailID] [int] IDENTITY(1,1) NOT NULL,
  	[DueDate] [datetime] NOT NULL,
  	[OrderQty] [smallint] NOT NULL,
  	[ProductID] [int] NOT NULL,
  	[UnitPrice] [money] NOT NULL,
  	[LineTotal]  AS (isnull([OrderQty]*[UnitPrice],(0.00))),
  	[ReceivedQty] [decimal](8, 2) NOT NULL,
  	[RejectedQty] [decimal](8, 2) NOT NULL,
  	[StockedQty]  AS (isnull([ReceivedQty]-[RejectedQty],(0.00))),
  	[ModifiedDate] [datetime] NOT NULL,
   CONSTRAINT [PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID] PRIMARY KEY CLUSTERED
  (
  	[PurchaseOrderID] ASC,
  	[PurchaseOrderDetailID] ASC
  )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
  ) ON [PRIMARY]

  GO

  CREATE NONCLUSTERED INDEX [IX_PurchaseOrderDetail_ProductID] ON [Purchasing].[PurchaseOrderDetail]
  (
  	[ProductID] ASC
  )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] ADD  CONSTRAINT [DF_PurchaseOrderDetail_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID] FOREIGN KEY([ProductID])
  REFERENCES [Production].[Product] ([ProductID])
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID] FOREIGN KEY([PurchaseOrderID])
  REFERENCES [Purchasing].[PurchaseOrderHeader] ([PurchaseOrderID])
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [CK_PurchaseOrderDetail_OrderQty] CHECK  (([OrderQty]>(0)))
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [CK_PurchaseOrderDetail_OrderQty]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [CK_PurchaseOrderDetail_ReceivedQty] CHECK  (([ReceivedQty]>=(0.00)))
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [CK_PurchaseOrderDetail_ReceivedQty]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [CK_PurchaseOrderDetail_RejectedQty] CHECK  (([RejectedQty]>=(0.00)))
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [CK_PurchaseOrderDetail_RejectedQty]
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [CK_PurchaseOrderDetail_UnitPrice] CHECK  (([UnitPrice]>=(0.00)))
  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] CHECK CONSTRAINT [CK_PurchaseOrderDetail_UnitPrice]
  GO

  SET ANSI_NULLS ON
  GO

  SET QUOTED_IDENTIFIER ON
  GO

  CREATE TRIGGER [Purchasing].[iPurchaseOrderDetail] ON [Purchasing].[PurchaseOrderDetail]
  AFTER INSERT AS
  BEGIN
      DECLARE @Count int;

      SET @Count = @@ROWCOUNT;
      IF @Count = 0
          RETURN;

      SET NOCOUNT ON;

      BEGIN TRY
          INSERT INTO [Production].[TransactionHistory]
              ([ProductID]
              ,[ReferenceOrderID]
              ,[ReferenceOrderLineID]
              ,[TransactionType]
              ,[TransactionDate]
              ,[Quantity]
              ,[ActualCost])
          SELECT
              inserted.[ProductID]
              ,inserted.[PurchaseOrderID]
              ,inserted.[PurchaseOrderDetailID]
              ,'P'
              ,GETDATE()
              ,inserted.[OrderQty]
              ,inserted.[UnitPrice]
          FROM inserted
              INNER JOIN [Purchasing].[PurchaseOrderHeader]
              ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

          -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the
          -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
          UPDATE [Purchasing].[PurchaseOrderHeader]
          SET [Purchasing].[PurchaseOrderHeader].[SubTotal] =
              (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                  FROM [Purchasing].[PurchaseOrderDetail]
                  WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
          WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);
      END TRY
      BEGIN CATCH
          EXECUTE [dbo].[uspPrintError];

          -- Rollback any active or uncommittable transactions before
          -- inserting information in the ErrorLog
          IF @@TRANCOUNT > 0
          BEGIN
              ROLLBACK TRANSACTION;
          END

          EXECUTE [dbo].[uspLogError];
      END CATCH;
  END;

  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] ENABLE TRIGGER [iPurchaseOrderDetail]
  GO

  SET ANSI_NULLS ON
  GO

  SET QUOTED_IDENTIFIER ON
  GO

  CREATE TRIGGER [Purchasing].[uPurchaseOrderDetail] ON [Purchasing].[PurchaseOrderDetail]
  AFTER UPDATE AS
  BEGIN
      DECLARE @Count int;

      SET @Count = @@ROWCOUNT;
      IF @Count = 0
          RETURN;

      SET NOCOUNT ON;

      BEGIN TRY
          IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])
          -- Insert record into TransactionHistory
          BEGIN
              INSERT INTO [Production].[TransactionHistory]
                  ([ProductID]
                  ,[ReferenceOrderID]
                  ,[ReferenceOrderLineID]
                  ,[TransactionType]
                  ,[TransactionDate]
                  ,[Quantity]
                  ,[ActualCost])
              SELECT
                  inserted.[ProductID]
                  ,inserted.[PurchaseOrderID]
                  ,inserted.[PurchaseOrderDetailID]
                  ,'P'
                  ,GETDATE()
                  ,inserted.[OrderQty]
                  ,inserted.[UnitPrice]
              FROM inserted
                  INNER JOIN [Purchasing].[PurchaseOrderDetail]
                  ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

              -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the
              -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
              UPDATE [Purchasing].[PurchaseOrderHeader]
              SET [Purchasing].[PurchaseOrderHeader].[SubTotal] =
                  (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                      FROM [Purchasing].[PurchaseOrderDetail]
                      WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID]
                          = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
              WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID]
                  IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

              UPDATE [Purchasing].[PurchaseOrderDetail]
              SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()
              FROM inserted
              WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]
                  AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];
          END;
      END TRY
      BEGIN CATCH
          EXECUTE [dbo].[uspPrintError];

          -- Rollback any active or uncommittable transactions before
          -- inserting information in the ErrorLog
          IF @@TRANCOUNT > 0
          BEGIN
              ROLLBACK TRANSACTION;
          END

          EXECUTE [dbo].[uspLogError];
      END CATCH;
  END;

  GO

  ALTER TABLE [Purchasing].[PurchaseOrderDetail] ENABLE TRIGGER [uPurchaseOrderDetail]
  GO

